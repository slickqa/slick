// Code generated by protoc-gen-go.
// source: slick.proto
// DO NOT EDIT!

/*
Package slickqa is a generated protocol buffer package.

It is generated from these files:
	slick.proto

It has these top-level messages:
	IsAuthorizedRequest
	IsAuthorizedResponse
	UserInfoRequest
	UsersForCompanyQueryRequest
	UsersForProjectQueryRequest
	UsersQueryResponse
	ProjectPermissionInfo
	CompanyPermissionInfo
	UserInfo
	ApiTokenLoginRequest
	PlainUserLoginRequest
	LoginResponse
	Project
	Component
	Feature
	Testcase
	Testplans
	Testruns
*/
package slickqa

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// auth stuff
type IsAuthorizedRequest struct {
	CompanyName string `protobuf:"bytes,1,opt,name=CompanyName" json:"CompanyName,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=ProjectName" json:"ProjectName,omitempty"`
	Permission  uint32 `protobuf:"varint,3,opt,name=Permission" json:"Permission,omitempty"`
}

func (m *IsAuthorizedRequest) Reset()                    { *m = IsAuthorizedRequest{} }
func (m *IsAuthorizedRequest) String() string            { return proto.CompactTextString(m) }
func (*IsAuthorizedRequest) ProtoMessage()               {}
func (*IsAuthorizedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsAuthorizedRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *IsAuthorizedRequest) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *IsAuthorizedRequest) GetPermission() uint32 {
	if m != nil {
		return m.Permission
	}
	return 0
}

type IsAuthorizedResponse struct {
	Allowed bool `protobuf:"varint,1,opt,name=allowed" json:"allowed,omitempty"`
}

func (m *IsAuthorizedResponse) Reset()                    { *m = IsAuthorizedResponse{} }
func (m *IsAuthorizedResponse) String() string            { return proto.CompactTextString(m) }
func (*IsAuthorizedResponse) ProtoMessage()               {}
func (*IsAuthorizedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IsAuthorizedResponse) GetAllowed() bool {
	if m != nil {
		return m.Allowed
	}
	return false
}

type UserInfoRequest struct {
	EmailAddress string `protobuf:"bytes,1,opt,name=EmailAddress" json:"EmailAddress,omitempty"`
}

func (m *UserInfoRequest) Reset()                    { *m = UserInfoRequest{} }
func (m *UserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*UserInfoRequest) ProtoMessage()               {}
func (*UserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserInfoRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

type UsersForCompanyQueryRequest struct {
	CompanyName string `protobuf:"bytes,1,opt,name=CompanyName" json:"CompanyName,omitempty"`
}

func (m *UsersForCompanyQueryRequest) Reset()                    { *m = UsersForCompanyQueryRequest{} }
func (m *UsersForCompanyQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*UsersForCompanyQueryRequest) ProtoMessage()               {}
func (*UsersForCompanyQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UsersForCompanyQueryRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

type UsersForProjectQueryRequest struct {
	CompanyName string `protobuf:"bytes,1,opt,name=CompanyName" json:"CompanyName,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=ProjectName" json:"ProjectName,omitempty"`
}

func (m *UsersForProjectQueryRequest) Reset()                    { *m = UsersForProjectQueryRequest{} }
func (m *UsersForProjectQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*UsersForProjectQueryRequest) ProtoMessage()               {}
func (*UsersForProjectQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UsersForProjectQueryRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *UsersForProjectQueryRequest) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

type UsersQueryResponse struct {
	Users []*UserInfo `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *UsersQueryResponse) Reset()                    { *m = UsersQueryResponse{} }
func (m *UsersQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*UsersQueryResponse) ProtoMessage()               {}
func (*UsersQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UsersQueryResponse) GetUsers() []*UserInfo {
	if m != nil {
		return m.Users
	}
	return nil
}

type ProjectPermissionInfo struct {
	ProjectName string `protobuf:"bytes,1,opt,name=ProjectName" json:"ProjectName,omitempty"`
	Permissions uint32 `protobuf:"varint,2,opt,name=Permissions" json:"Permissions,omitempty"`
}

func (m *ProjectPermissionInfo) Reset()                    { *m = ProjectPermissionInfo{} }
func (m *ProjectPermissionInfo) String() string            { return proto.CompactTextString(m) }
func (*ProjectPermissionInfo) ProtoMessage()               {}
func (*ProjectPermissionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ProjectPermissionInfo) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *ProjectPermissionInfo) GetPermissions() uint32 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

type CompanyPermissionInfo struct {
	CompanyName  string                   `protobuf:"bytes,1,opt,name=CompanyName" json:"CompanyName,omitempty"`
	CompanyAdmin uint32                   `protobuf:"varint,2,opt,name=CompanyAdmin" json:"CompanyAdmin,omitempty"`
	Projects     []*ProjectPermissionInfo `protobuf:"bytes,3,rep,name=Projects" json:"Projects,omitempty"`
}

func (m *CompanyPermissionInfo) Reset()                    { *m = CompanyPermissionInfo{} }
func (m *CompanyPermissionInfo) String() string            { return proto.CompactTextString(m) }
func (*CompanyPermissionInfo) ProtoMessage()               {}
func (*CompanyPermissionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CompanyPermissionInfo) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *CompanyPermissionInfo) GetCompanyAdmin() uint32 {
	if m != nil {
		return m.CompanyAdmin
	}
	return 0
}

func (m *CompanyPermissionInfo) GetProjects() []*ProjectPermissionInfo {
	if m != nil {
		return m.Projects
	}
	return nil
}

type UserInfo struct {
	EmailAddress   string                   `protobuf:"bytes,1,opt,name=EmailAddress" json:"EmailAddress,omitempty"`
	Companies      []*CompanyPermissionInfo `protobuf:"bytes,2,rep,name=Companies" json:"Companies,omitempty"`
	FullName       string                   `protobuf:"bytes,3,opt,name=FullName" json:"FullName,omitempty"`
	GivenName      string                   `protobuf:"bytes,4,opt,name=GivenName" json:"GivenName,omitempty"`
	FamilyName     string                   `protobuf:"bytes,5,opt,name=FamilyName" json:"FamilyName,omitempty"`
	AvatarUrl      string                   `protobuf:"bytes,6,opt,name=AvatarUrl" json:"AvatarUrl,omitempty"`
	JobTitle       string                   `protobuf:"bytes,7,opt,name=JobTitle" json:"JobTitle,omitempty"`
	HashedPassword string                   `protobuf:"bytes,8,opt,name=HashedPassword" json:"HashedPassword,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UserInfo) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *UserInfo) GetCompanies() []*CompanyPermissionInfo {
	if m != nil {
		return m.Companies
	}
	return nil
}

func (m *UserInfo) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *UserInfo) GetGivenName() string {
	if m != nil {
		return m.GivenName
	}
	return ""
}

func (m *UserInfo) GetFamilyName() string {
	if m != nil {
		return m.FamilyName
	}
	return ""
}

func (m *UserInfo) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *UserInfo) GetJobTitle() string {
	if m != nil {
		return m.JobTitle
	}
	return ""
}

func (m *UserInfo) GetHashedPassword() string {
	if m != nil {
		return m.HashedPassword
	}
	return ""
}

type ApiTokenLoginRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
}

func (m *ApiTokenLoginRequest) Reset()                    { *m = ApiTokenLoginRequest{} }
func (m *ApiTokenLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*ApiTokenLoginRequest) ProtoMessage()               {}
func (*ApiTokenLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ApiTokenLoginRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type PlainUserLoginRequest struct {
	UserName string `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *PlainUserLoginRequest) Reset()                    { *m = PlainUserLoginRequest{} }
func (m *PlainUserLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*PlainUserLoginRequest) ProtoMessage()               {}
func (*PlainUserLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PlainUserLoginRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *PlainUserLoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	Success bool      `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Token   string    `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
	User    *UserInfo `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *LoginResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginResponse) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

// slick objects
type Project struct {
	Id              []byte                     `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name            string                     `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	AutomationTools []string                   `protobuf:"bytes,3,rep,name=AutomationTools" json:"AutomationTools,omitempty"`
	Tags            []string                   `protobuf:"bytes,4,rep,name=Tags" json:"Tags,omitempty"`
	Attributes      map[string]string          `protobuf:"bytes,5,rep,name=Attributes" json:"Attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastUpdated     *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=LastUpdated" json:"LastUpdated,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Project) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetAutomationTools() []string {
	if m != nil {
		return m.AutomationTools
	}
	return nil
}

func (m *Project) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Project) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Project) GetLastUpdated() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastUpdated
	}
	return nil
}

type Component struct {
	Id      []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Project string `protobuf:"bytes,3,opt,name=Project" json:"Project,omitempty"`
}

func (m *Component) Reset()                    { *m = Component{} }
func (m *Component) String() string            { return proto.CompactTextString(m) }
func (*Component) ProtoMessage()               {}
func (*Component) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Component) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Component) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Component) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

type Feature struct {
	Id          []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	ComponentId []byte `protobuf:"bytes,3,opt,name=ComponentId,proto3" json:"ComponentId,omitempty"`
	ProjectId   string `protobuf:"bytes,4,opt,name=ProjectId" json:"ProjectId,omitempty"`
}

func (m *Feature) Reset()                    { *m = Feature{} }
func (m *Feature) String() string            { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()               {}
func (*Feature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Feature) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetComponentId() []byte {
	if m != nil {
		return m.ComponentId
	}
	return nil
}

func (m *Feature) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

type Testcase struct {
	Id               []byte   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name             string   `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	AutomationKey    string   `protobuf:"bytes,3,opt,name=AutomationKey" json:"AutomationKey,omitempty"`
	AutomationTool   string   `protobuf:"bytes,4,opt,name=AutomationTool" json:"AutomationTool,omitempty"`
	ComponentId      []byte   `protobuf:"bytes,5,opt,name=ComponentId,proto3" json:"ComponentId,omitempty"`
	Deleted          bool     `protobuf:"varint,6,opt,name=Deleted" json:"Deleted,omitempty"`
	ImportanceRating int32    `protobuf:"varint,7,opt,name=ImportanceRating" json:"ImportanceRating,omitempty"`
	InactiveNotes    []string `protobuf:"bytes,8,rep,name=InactiveNotes" json:"InactiveNotes,omitempty"`
	ProjectId        string   `protobuf:"bytes,9,opt,name=ProjectId" json:"ProjectId,omitempty"`
	StabilityRating  int32    `protobuf:"varint,10,opt,name=StabilityRating" json:"StabilityRating,omitempty"`
	Steps            []string `protobuf:"bytes,11,rep,name=Steps" json:"Steps,omitempty"`
	Tags             []string `protobuf:"bytes,12,rep,name=Tags" json:"Tags,omitempty"`
}

func (m *Testcase) Reset()                    { *m = Testcase{} }
func (m *Testcase) String() string            { return proto.CompactTextString(m) }
func (*Testcase) ProtoMessage()               {}
func (*Testcase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Testcase) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Testcase) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Testcase) GetAutomationKey() string {
	if m != nil {
		return m.AutomationKey
	}
	return ""
}

func (m *Testcase) GetAutomationTool() string {
	if m != nil {
		return m.AutomationTool
	}
	return ""
}

func (m *Testcase) GetComponentId() []byte {
	if m != nil {
		return m.ComponentId
	}
	return nil
}

func (m *Testcase) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *Testcase) GetImportanceRating() int32 {
	if m != nil {
		return m.ImportanceRating
	}
	return 0
}

func (m *Testcase) GetInactiveNotes() []string {
	if m != nil {
		return m.InactiveNotes
	}
	return nil
}

func (m *Testcase) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Testcase) GetStabilityRating() int32 {
	if m != nil {
		return m.StabilityRating
	}
	return 0
}

func (m *Testcase) GetSteps() []string {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Testcase) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Testplans struct {
	Id   []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *Testplans) Reset()                    { *m = Testplans{} }
func (m *Testplans) String() string            { return proto.CompactTextString(m) }
func (*Testplans) ProtoMessage()               {}
func (*Testplans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Testplans) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Testplans) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Testruns struct {
	Id          []byte                     `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name        string                     `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	ProjectId   string                     `protobuf:"bytes,3,opt,name=ProjectId" json:"ProjectId,omitempty"`
	Build       string                     `protobuf:"bytes,4,opt,name=Build" json:"Build,omitempty"`
	RunStarted  *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=RunStarted" json:"RunStarted,omitempty"`
	RunFinished *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=RunFinished" json:"RunFinished,omitempty"`
	State       string                     `protobuf:"bytes,7,opt,name=State" json:"State,omitempty"`
	TestplanId  string                     `protobuf:"bytes,8,opt,name=TestplanId" json:"TestplanId,omitempty"`
}

func (m *Testruns) Reset()                    { *m = Testruns{} }
func (m *Testruns) String() string            { return proto.CompactTextString(m) }
func (*Testruns) ProtoMessage()               {}
func (*Testruns) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Testruns) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Testruns) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Testruns) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Testruns) GetBuild() string {
	if m != nil {
		return m.Build
	}
	return ""
}

func (m *Testruns) GetRunStarted() *google_protobuf.Timestamp {
	if m != nil {
		return m.RunStarted
	}
	return nil
}

func (m *Testruns) GetRunFinished() *google_protobuf.Timestamp {
	if m != nil {
		return m.RunFinished
	}
	return nil
}

func (m *Testruns) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Testruns) GetTestplanId() string {
	if m != nil {
		return m.TestplanId
	}
	return ""
}

func init() {
	proto.RegisterType((*IsAuthorizedRequest)(nil), "slickqa.IsAuthorizedRequest")
	proto.RegisterType((*IsAuthorizedResponse)(nil), "slickqa.IsAuthorizedResponse")
	proto.RegisterType((*UserInfoRequest)(nil), "slickqa.UserInfoRequest")
	proto.RegisterType((*UsersForCompanyQueryRequest)(nil), "slickqa.UsersForCompanyQueryRequest")
	proto.RegisterType((*UsersForProjectQueryRequest)(nil), "slickqa.UsersForProjectQueryRequest")
	proto.RegisterType((*UsersQueryResponse)(nil), "slickqa.UsersQueryResponse")
	proto.RegisterType((*ProjectPermissionInfo)(nil), "slickqa.ProjectPermissionInfo")
	proto.RegisterType((*CompanyPermissionInfo)(nil), "slickqa.CompanyPermissionInfo")
	proto.RegisterType((*UserInfo)(nil), "slickqa.UserInfo")
	proto.RegisterType((*ApiTokenLoginRequest)(nil), "slickqa.ApiTokenLoginRequest")
	proto.RegisterType((*PlainUserLoginRequest)(nil), "slickqa.PlainUserLoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "slickqa.LoginResponse")
	proto.RegisterType((*Project)(nil), "slickqa.Project")
	proto.RegisterType((*Component)(nil), "slickqa.Component")
	proto.RegisterType((*Feature)(nil), "slickqa.Feature")
	proto.RegisterType((*Testcase)(nil), "slickqa.Testcase")
	proto.RegisterType((*Testplans)(nil), "slickqa.Testplans")
	proto.RegisterType((*Testruns)(nil), "slickqa.Testruns")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Auth service

type AuthClient interface {
	IsAuthorized(ctx context.Context, in *IsAuthorizedRequest, opts ...grpc.CallOption) (*IsAuthorizedResponse, error)
	LoginWithToken(ctx context.Context, in *ApiTokenLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	LoginWithCredentials(ctx context.Context, in *PlainUserLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) IsAuthorized(ctx context.Context, in *IsAuthorizedRequest, opts ...grpc.CallOption) (*IsAuthorizedResponse, error) {
	out := new(IsAuthorizedResponse)
	err := grpc.Invoke(ctx, "/slickqa.Auth/IsAuthorized", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LoginWithToken(ctx context.Context, in *ApiTokenLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/slickqa.Auth/LoginWithToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LoginWithCredentials(ctx context.Context, in *PlainUserLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/slickqa.Auth/LoginWithCredentials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	IsAuthorized(context.Context, *IsAuthorizedRequest) (*IsAuthorizedResponse, error)
	LoginWithToken(context.Context, *ApiTokenLoginRequest) (*LoginResponse, error)
	LoginWithCredentials(context.Context, *PlainUserLoginRequest) (*LoginResponse, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_IsAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAuthorizedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).IsAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Auth/IsAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).IsAuthorized(ctx, req.(*IsAuthorizedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LoginWithToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiTokenLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginWithToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Auth/LoginWithToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginWithToken(ctx, req.(*ApiTokenLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LoginWithCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlainUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginWithCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Auth/LoginWithCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginWithCredentials(ctx, req.(*PlainUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAuthorized",
			Handler:    _Auth_IsAuthorized_Handler,
		},
		{
			MethodName: "LoginWithToken",
			Handler:    _Auth_LoginWithToken_Handler,
		},
		{
			MethodName: "LoginWithCredentials",
			Handler:    _Auth_LoginWithCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

// Client API for Users service

type UsersClient interface {
	GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfo, error)
	GetUsersForCompany(ctx context.Context, in *UsersForCompanyQueryRequest, opts ...grpc.CallOption) (*UsersQueryResponse, error)
	GetUsersForProject(ctx context.Context, in *UsersForProjectQueryRequest, opts ...grpc.CallOption) (*UsersQueryResponse, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/slickqa.Users/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUsersForCompany(ctx context.Context, in *UsersForCompanyQueryRequest, opts ...grpc.CallOption) (*UsersQueryResponse, error) {
	out := new(UsersQueryResponse)
	err := grpc.Invoke(ctx, "/slickqa.Users/GetUsersForCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUsersForProject(ctx context.Context, in *UsersForProjectQueryRequest, opts ...grpc.CallOption) (*UsersQueryResponse, error) {
	out := new(UsersQueryResponse)
	err := grpc.Invoke(ctx, "/slickqa.Users/GetUsersForProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersServer interface {
	GetUserInfo(context.Context, *UserInfoRequest) (*UserInfo, error)
	GetUsersForCompany(context.Context, *UsersForCompanyQueryRequest) (*UsersQueryResponse, error)
	GetUsersForProject(context.Context, *UsersForProjectQueryRequest) (*UsersQueryResponse, error)
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUsersForCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersForCompanyQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsersForCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/GetUsersForCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsersForCompany(ctx, req.(*UsersForCompanyQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUsersForProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersForProjectQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsersForProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/GetUsersForProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsersForProject(ctx, req.(*UsersForProjectQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _Users_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUsersForCompany",
			Handler:    _Users_GetUsersForCompany_Handler,
		},
		{
			MethodName: "GetUsersForProject",
			Handler:    _Users_GetUsersForProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

func init() { proto.RegisterFile("slick.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x96, 0xed, 0xb8, 0xb1, 0x8f, 0x9d, 0xa6, 0x1d, 0x52, 0x58, 0xb9, 0xa5, 0x58, 0x43, 0x5b,
	0xa2, 0x42, 0x6d, 0x48, 0x85, 0x04, 0x55, 0xab, 0xe2, 0xfe, 0xa4, 0x18, 0xaa, 0x12, 0x36, 0xae,
	0x90, 0xe0, 0x6a, 0xec, 0x9d, 0x38, 0x43, 0x77, 0x67, 0xdc, 0x9d, 0xd9, 0x54, 0x26, 0xca, 0x0d,
	0x42, 0xe2, 0xbe, 0x70, 0xc3, 0x1b, 0xa0, 0xbe, 0x0e, 0xaf, 0xc0, 0x5b, 0xc0, 0x05, 0x9a, 0x9f,
	0x5d, 0xef, 0xda, 0x6e, 0x63, 0xee, 0xf6, 0x9c, 0x39, 0x73, 0xbe, 0xf3, 0x3f, 0x67, 0xa1, 0x21,
	0x43, 0x36, 0x7a, 0xd6, 0x99, 0xc4, 0x42, 0x09, 0xb4, 0x6e, 0x88, 0xe7, 0xa4, 0xf5, 0xde, 0x58,
	0x88, 0x71, 0x48, 0xbb, 0x86, 0x3d, 0x4c, 0x0e, 0xba, 0x8a, 0x45, 0x54, 0x2a, 0x12, 0x4d, 0xac,
	0x64, 0xeb, 0x92, 0x13, 0x20, 0x13, 0xd6, 0x25, 0x9c, 0x0b, 0x45, 0x14, 0x13, 0x5c, 0xda, 0x53,
	0x3c, 0x85, 0xb7, 0xfa, 0xb2, 0x97, 0xa8, 0x43, 0x11, 0xb3, 0x9f, 0x68, 0xe0, 0xd3, 0xe7, 0x09,
	0x95, 0x0a, 0xb5, 0xa1, 0x71, 0x5f, 0x44, 0x13, 0xc2, 0xa7, 0x4f, 0x48, 0x44, 0xbd, 0x52, 0xbb,
	0xb4, 0x5d, 0xf7, 0xf3, 0x2c, 0x2d, 0xb1, 0x17, 0x8b, 0x1f, 0xe9, 0x48, 0x19, 0x89, 0xb2, 0x95,
	0xc8, 0xb1, 0xd0, 0x65, 0x80, 0x3d, 0x1a, 0x47, 0x4c, 0x4a, 0x26, 0xb8, 0x57, 0x69, 0x97, 0xb6,
	0x37, 0xfc, 0x1c, 0x07, 0x7f, 0x0c, 0x5b, 0x45, 0x68, 0x39, 0x11, 0x5c, 0x52, 0xe4, 0xc1, 0x3a,
	0x09, 0x43, 0xf1, 0x82, 0x06, 0x06, 0xb7, 0xe6, 0xa7, 0x24, 0xfe, 0x14, 0x36, 0x9f, 0x4a, 0x1a,
	0xf7, 0xf9, 0x81, 0x48, 0x0d, 0xc5, 0xd0, 0x7c, 0x18, 0x11, 0x16, 0xf6, 0x82, 0x20, 0xa6, 0x52,
	0x3a, 0x4b, 0x0b, 0x3c, 0x7c, 0x17, 0x2e, 0xea, 0x6b, 0x72, 0x57, 0xc4, 0xce, 0x83, 0x6f, 0x13,
	0x1a, 0x4f, 0x57, 0xf6, 0x15, 0x93, 0x99, 0x02, 0xe7, 0xe0, 0xff, 0x53, 0x70, 0x7a, 0xb0, 0xf0,
	0x1d, 0x40, 0x06, 0xc2, 0x29, 0x76, 0xa1, 0xf8, 0x00, 0xaa, 0x89, 0xe6, 0x7a, 0xa5, 0x76, 0x65,
	0xbb, 0xb1, 0x73, 0xbe, 0xe3, 0xb2, 0xde, 0xc9, 0xc2, 0x60, 0xcf, 0xf1, 0x0f, 0x70, 0xc1, 0x69,
	0x9b, 0x05, 0x58, 0x9f, 0xcf, 0x23, 0x97, 0x16, 0xd3, 0xa4, 0x25, 0xb2, 0x3b, 0xd2, 0xd8, 0xb6,
	0xe1, 0xe7, 0x59, 0xf8, 0x8f, 0x12, 0x5c, 0x70, 0xde, 0x2c, 0x6a, 0x3f, 0xc5, 0x73, 0x0c, 0x4d,
	0x47, 0xf6, 0x82, 0x88, 0x71, 0xa7, 0xbe, 0xc0, 0x43, 0xb7, 0xa0, 0xe6, 0x0c, 0x92, 0x5e, 0xc5,
	0x38, 0x7a, 0x39, 0x73, 0x74, 0xa9, 0x57, 0x7e, 0x26, 0x8f, 0xff, 0x2c, 0x43, 0x2d, 0x0d, 0xc6,
	0x2a, 0xc5, 0x80, 0x6e, 0x43, 0xdd, 0x82, 0x33, 0xaa, 0x9d, 0x2d, 0xa2, 0x2d, 0xf5, 0xd2, 0x9f,
	0x5d, 0x40, 0x2d, 0xa8, 0xed, 0x26, 0x61, 0x68, 0xbc, 0xad, 0x18, 0xed, 0x19, 0x8d, 0x2e, 0x41,
	0xfd, 0x11, 0x3b, 0xa2, 0xdc, 0x1c, 0xae, 0x99, 0xc3, 0x19, 0x43, 0x77, 0xc3, 0x2e, 0x89, 0x58,
	0x68, 0x23, 0x55, 0x35, 0xc7, 0x39, 0x8e, 0xbe, 0xdd, 0x3b, 0x22, 0x8a, 0xc4, 0x4f, 0xe3, 0xd0,
	0x3b, 0x63, 0x6f, 0x67, 0x0c, 0x8d, 0xfb, 0x95, 0x18, 0x0e, 0x98, 0x0a, 0xa9, 0xb7, 0x6e, 0x71,
	0x53, 0x1a, 0x5d, 0x83, 0xb3, 0x5f, 0x12, 0x79, 0x48, 0x83, 0x3d, 0x22, 0xe5, 0x0b, 0x11, 0x07,
	0x5e, 0xcd, 0x48, 0xcc, 0x71, 0xf1, 0x47, 0xb0, 0xd5, 0x9b, 0xb0, 0x81, 0x78, 0x46, 0xf9, 0x63,
	0x31, 0x66, 0x3c, 0x2d, 0xdf, 0x2d, 0xa8, 0x1a, 0xa6, 0x0b, 0x97, 0x25, 0xf0, 0x37, 0x70, 0x61,
	0x2f, 0x24, 0x8c, 0xeb, 0xe0, 0x16, 0xc4, 0x5b, 0x36, 0xe0, 0xb9, 0x84, 0x67, 0xb4, 0x3e, 0xcb,
	0x8c, 0xb0, 0x45, 0x9e, 0xd1, 0xf8, 0x00, 0x36, 0x9c, 0x9e, 0x59, 0x9f, 0xef, 0x27, 0xa3, 0x51,
	0x9a, 0xa8, 0x9a, 0x9f, 0x92, 0x33, 0x8b, 0xca, 0x39, 0x8b, 0xd0, 0x55, 0x58, 0xd3, 0x40, 0x26,
	0xee, 0x4b, 0x7b, 0xc1, 0x1c, 0xe3, 0x57, 0x65, 0x58, 0x77, 0xe5, 0x81, 0xce, 0x42, 0xb9, 0x6f,
	0xa7, 0x48, 0xd3, 0x2f, 0xf7, 0x03, 0x84, 0x60, 0x2d, 0xd7, 0x80, 0xe6, 0x1b, 0x6d, 0xc3, 0x66,
	0x2f, 0x51, 0x22, 0x32, 0x63, 0x71, 0x20, 0x44, 0x68, 0x8b, 0xb0, 0xee, 0xcf, 0xb3, 0xf5, 0xed,
	0x01, 0x19, 0x4b, 0x6f, 0xcd, 0x1c, 0x9b, 0x6f, 0xf4, 0x05, 0x40, 0x4f, 0xa9, 0x98, 0x0d, 0x13,
	0x45, 0xa5, 0x57, 0x35, 0xf5, 0xd4, 0x9e, 0xaf, 0xde, 0xce, 0x4c, 0xe4, 0x21, 0x57, 0xf1, 0xd4,
	0xcf, 0xdd, 0x41, 0xb7, 0xa1, 0xf1, 0x98, 0x48, 0xf5, 0x74, 0x12, 0x10, 0x45, 0x03, 0x93, 0xfa,
	0xc6, 0x4e, 0xab, 0x63, 0xa7, 0x76, 0x27, 0x1d, 0xeb, 0x9d, 0x41, 0x3a, 0xd6, 0xfd, 0xbc, 0x78,
	0xeb, 0x0e, 0x6c, 0xce, 0x29, 0x47, 0xe7, 0xa0, 0xf2, 0x8c, 0x4e, 0x5d, 0x6e, 0xf4, 0xa7, 0x8e,
	0xe7, 0x11, 0x09, 0x93, 0xd4, 0x6f, 0x4b, 0xdc, 0x2a, 0x7f, 0x56, 0xc2, 0x7d, 0xdb, 0x0d, 0x82,
	0x53, 0xbe, 0x5a, 0xb4, 0xbc, 0x2c, 0xb8, 0xae, 0xfe, 0x53, 0x12, 0x47, 0xb0, 0xbe, 0x4b, 0x89,
	0x4a, 0x62, 0xba, 0x92, 0x22, 0x37, 0x3a, 0x0c, 0x72, 0x3f, 0x30, 0xca, 0x9a, 0x7e, 0x9e, 0xa5,
	0x3b, 0xc2, 0xe9, 0xee, 0x07, 0x69, 0x3f, 0x65, 0x0c, 0xfc, 0x6f, 0x19, 0x6a, 0x03, 0x2a, 0xd5,
	0x88, 0xc8, 0xd5, 0x00, 0xaf, 0xc0, 0xc6, 0x2c, 0xa1, 0x5f, 0xd3, 0xa9, 0xb3, 0xbf, 0xc8, 0xd4,
	0xcd, 0x54, 0x4c, 0xbb, 0x43, 0x9e, 0xe3, 0xce, 0x9b, 0x5f, 0x5d, 0x34, 0xdf, 0x83, 0xf5, 0x07,
	0x34, 0xa4, 0x69, 0x4e, 0x6b, 0x7e, 0x4a, 0xa2, 0xeb, 0x70, 0xae, 0x1f, 0x4d, 0x44, 0xac, 0x08,
	0x1f, 0x51, 0x9f, 0x28, 0xc6, 0xc7, 0xa6, 0xa9, 0xab, 0xfe, 0x02, 0x5f, 0x5b, 0xdd, 0xe7, 0x64,
	0xa4, 0xd8, 0x11, 0x7d, 0x22, 0x74, 0x89, 0xd5, 0x4c, 0xf1, 0x15, 0x99, 0xc5, 0x50, 0xd5, 0xe7,
	0x42, 0xa5, 0x2b, 0x7c, 0x5f, 0x91, 0x21, 0x0b, 0x99, 0x9a, 0x3a, 0x38, 0x30, 0x70, 0xf3, 0x6c,
	0x5d, 0x28, 0xfb, 0x8a, 0x4e, 0xa4, 0xd7, 0x30, 0x28, 0x96, 0xc8, 0xea, 0xbe, 0x39, 0xab, 0x7b,
	0xdc, 0x85, 0xba, 0x8e, 0xfe, 0x24, 0x24, 0x5c, 0xae, 0x12, 0x7e, 0xfc, 0xd2, 0xe5, 0x2b, 0x4e,
	0x56, 0xbb, 0x50, 0xf4, 0xa9, 0x32, 0xef, 0xd3, 0x16, 0x54, 0xef, 0x25, 0x2c, 0x4c, 0x0b, 0xc3,
	0x12, 0xe8, 0x16, 0x80, 0x9f, 0xf0, 0x7d, 0x45, 0x62, 0x1d, 0xf6, 0xea, 0xa9, 0xad, 0x94, 0x93,
	0xd6, 0x7d, 0xe8, 0x27, 0x7c, 0x97, 0x71, 0xa6, 0xa7, 0xe6, 0x2a, 0x7d, 0x98, 0x13, 0xb7, 0x91,
	0x23, 0x2a, 0x9d, 0xce, 0x96, 0xd0, 0x43, 0x3f, 0x8d, 0x52, 0x3f, 0x1d, 0xcb, 0x39, 0xce, 0xce,
	0x3f, 0x65, 0x58, 0xd3, 0x1b, 0x10, 0xfa, 0xbd, 0x04, 0xcd, 0xfc, 0x32, 0x84, 0x2e, 0x65, 0x33,
	0x64, 0xc9, 0x7a, 0xd6, 0x7a, 0xf7, 0x35, 0xa7, 0x76, 0xb2, 0xe2, 0x47, 0x3f, 0xff, 0xf5, 0xf7,
	0x6f, 0xe5, 0x1e, 0xba, 0x6b, 0x97, 0xbe, 0x44, 0x1d, 0x76, 0x59, 0x4e, 0xae, 0x7b, 0x9c, 0x7b,
	0xa1, 0x4f, 0xba, 0xc7, 0xb9, 0x6d, 0x40, 0x53, 0xd9, 0xe3, 0x77, 0x82, 0x24, 0x9c, 0x35, 0x33,
	0xfb, 0x3b, 0xa6, 0x0e, 0xed, 0x10, 0x9e, 0x21, 0x2f, 0x7b, 0x4b, 0x5a, 0x6f, 0x67, 0xc7, 0x85,
	0x59, 0x8f, 0xaf, 0x1b, 0x8b, 0xae, 0x20, 0x3c, 0xb3, 0x28, 0xd4, 0x02, 0x37, 0x5e, 0x30, 0x75,
	0x78, 0x43, 0x69, 0x3d, 0xdd, 0x63, 0xa3, 0xee, 0x04, 0x8d, 0x61, 0x2b, 0x03, 0xbd, 0x1f, 0xd3,
	0x80, 0x72, 0xc5, 0x48, 0x28, 0x51, 0x6e, 0x29, 0x58, 0xf6, 0x30, 0xbd, 0x16, 0xfb, 0x1d, 0x83,
	0x7d, 0x1e, 0x6f, 0xce, 0x61, 0xef, 0xfc, 0x5a, 0x81, 0xaa, 0x59, 0xba, 0xd0, 0x10, 0x1a, 0x8f,
	0xa8, 0xca, 0xf6, 0x08, 0x6f, 0xf1, 0x6d, 0x71, 0x18, 0x8b, 0xaf, 0x0e, 0xbe, 0x66, 0xd4, 0xb7,
	0xd1, 0x65, 0xa3, 0xde, 0xac, 0x63, 0x5d, 0xc6, 0x0f, 0x44, 0xf7, 0x38, 0xbf, 0x77, 0x9c, 0xa0,
	0x5f, 0x4a, 0x80, 0x1c, 0x48, 0x6e, 0x13, 0x45, 0x57, 0x0a, 0x1a, 0x5f, 0xb3, 0xa3, 0xb6, 0x2e,
	0x16, 0xa5, 0x0a, 0x5b, 0x22, 0xfe, 0xd0, 0x58, 0x70, 0x15, 0xbd, 0x9f, 0xb3, 0x60, 0x38, 0xbd,
	0x31, 0xb2, 0x7a, 0x8a, 0xd9, 0x46, 0x2f, 0x8b, 0x66, 0xa4, 0x2f, 0xe5, 0xa2, 0x19, 0x4b, 0x36,
	0xdd, 0x37, 0x9b, 0xf1, 0xb9, 0x31, 0xe3, 0x26, 0xfa, 0xa4, 0x68, 0xc6, 0xc4, 0xea, 0x79, 0x53,
	0xd1, 0xdd, 0x7b, 0x00, 0x17, 0x47, 0x22, 0xca, 0x94, 0x8f, 0x42, 0x46, 0xb9, 0xca, 0x7a, 0xee,
	0xfb, 0xf4, 0x67, 0xe7, 0x55, 0xf9, 0x4d, 0x62, 0xc3, 0x33, 0xe6, 0xeb, 0xe6, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xb9, 0xb4, 0x93, 0x50, 0x29, 0x0d, 0x00, 0x00,
}

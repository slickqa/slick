// Code generated by protoc-gen-go. DO NOT EDIT.
// source: slick.proto

/*
Package slickqa is a generated protocol buffer package.

It is generated from these files:
	slick.proto

It has these top-level messages:
	IsAuthorizedRequest
	IsAuthorizedResponse
	CurrentUserRequest
	UserInfoRequest
	UsersForCompanyQueryRequest
	UsersForProjectQueryRequest
	UsersQueryResponse
	ProjectPermissionInfo
	CompanyPermissionInfo
	SlickPermissionInfo
	Preferences
	S3StorageSettings
	CompanySettings
	UserInfo
	ApiTokenLoginRequest
	PlainUserLoginRequest
	LoginResponse
	VersionRequest
	VersionInfoResponse
	CompanySettingsRequest
	AddUserRequest
	AvailableCompanySettingsRequest
	AvailableCompanySettings
	RefreshTokenRequest
	ProjectsRequest
	ProjectsListResponse
	FileUploadInfo
	LinkListIdentity
	LinkList
	LinkUrl
	LinkIdentity
	Link
	SlickFile
	ProjectIdentity
	Project
	ComponentIdentity
	Component
	Feature
	Testcase
	Testplans
	Testruns
*/
package slickqa

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// auth stuff
type IsAuthorizedRequest struct {
	CompanyName string ` protobuf:"bytes,1,opt,name=CompanyName"              json:"CompanyName,omitempty"`
	ProjectName string ` protobuf:"bytes,2,opt,name=ProjectName"              json:"ProjectName,omitempty"`
	Permission  uint32 ` protobuf:"varint,3,opt,name=Permission"              json:"Permission,omitempty"`
}

func (m *IsAuthorizedRequest) Reset()                    { *m = IsAuthorizedRequest{} }
func (m *IsAuthorizedRequest) String() string            { return proto.CompactTextString(m) }
func (*IsAuthorizedRequest) ProtoMessage()               {}
func (*IsAuthorizedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsAuthorizedRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *IsAuthorizedRequest) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *IsAuthorizedRequest) GetPermission() uint32 {
	if m != nil {
		return m.Permission
	}
	return 0
}

type IsAuthorizedResponse struct {
	Allowed bool   `protobuf:"varint,1,opt,name=Allowed"                 json:"Allowed"`
	Message string ` protobuf:"bytes,2,opt,name=Message"                  json:"Message,omitempty"`
}

func (m *IsAuthorizedResponse) Reset()                    { *m = IsAuthorizedResponse{} }
func (m *IsAuthorizedResponse) String() string            { return proto.CompactTextString(m) }
func (*IsAuthorizedResponse) ProtoMessage()               {}
func (*IsAuthorizedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IsAuthorizedResponse) GetAllowed() bool {
	if m != nil {
		return m.Allowed
	}
	return false
}

func (m *IsAuthorizedResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CurrentUserRequest struct {
}

func (m *CurrentUserRequest) Reset()                    { *m = CurrentUserRequest{} }
func (m *CurrentUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CurrentUserRequest) ProtoMessage()               {}
func (*CurrentUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UserInfoRequest struct {
	EmailAddress string ` protobuf:"bytes,1,opt,name=EmailAddress"             json:"EmailAddress,omitempty"`
}

func (m *UserInfoRequest) Reset()                    { *m = UserInfoRequest{} }
func (m *UserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*UserInfoRequest) ProtoMessage()               {}
func (*UserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserInfoRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

type UsersForCompanyQueryRequest struct {
	CompanyName string ` protobuf:"bytes,1,opt,name=CompanyName"              json:"CompanyName,omitempty"`
}

func (m *UsersForCompanyQueryRequest) Reset()                    { *m = UsersForCompanyQueryRequest{} }
func (m *UsersForCompanyQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*UsersForCompanyQueryRequest) ProtoMessage()               {}
func (*UsersForCompanyQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UsersForCompanyQueryRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

type UsersForProjectQueryRequest struct {
	CompanyName string ` protobuf:"bytes,1,opt,name=CompanyName"              json:"CompanyName,omitempty"`
	ProjectName string ` protobuf:"bytes,2,opt,name=ProjectName"              json:"ProjectName,omitempty"`
}

func (m *UsersForProjectQueryRequest) Reset()                    { *m = UsersForProjectQueryRequest{} }
func (m *UsersForProjectQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*UsersForProjectQueryRequest) ProtoMessage()               {}
func (*UsersForProjectQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UsersForProjectQueryRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *UsersForProjectQueryRequest) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

type UsersQueryResponse struct {
	Users []*UserInfo ` protobuf:"bytes,1,rep,name=users"                    json:"users,omitempty"`
}

func (m *UsersQueryResponse) Reset()                    { *m = UsersQueryResponse{} }
func (m *UsersQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*UsersQueryResponse) ProtoMessage()               {}
func (*UsersQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UsersQueryResponse) GetUsers() []*UserInfo {
	if m != nil {
		return m.Users
	}
	return nil
}

type ProjectPermissionInfo struct {
	ProjectName string   ` protobuf:"bytes,1,opt,name=ProjectName"              json:"ProjectName,omitempty"  bson:"name"`
	Roles       []string ` protobuf:"bytes,2,rep,name=Roles"                    json:"Roles,omitempty"        bson:"roles"`
}

func (m *ProjectPermissionInfo) Reset()                    { *m = ProjectPermissionInfo{} }
func (m *ProjectPermissionInfo) String() string            { return proto.CompactTextString(m) }
func (*ProjectPermissionInfo) ProtoMessage()               {}
func (*ProjectPermissionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ProjectPermissionInfo) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *ProjectPermissionInfo) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

type CompanyPermissionInfo struct {
	CompanyName  string                   ` protobuf:"bytes,1,opt,name=CompanyName"              json:"CompanyName,omitempty"  bson:"name"`
	CompanyAdmin uint32                   ` protobuf:"varint,2,opt,name=CompanyAdmin"            json:"CompanyAdmin,omitempty"  bson:"admin"`
	Projects     []*ProjectPermissionInfo ` protobuf:"bytes,3,rep,name=Projects"                 json:"Projects,omitempty"     bson:"projects"`
}

func (m *CompanyPermissionInfo) Reset()                    { *m = CompanyPermissionInfo{} }
func (m *CompanyPermissionInfo) String() string            { return proto.CompactTextString(m) }
func (*CompanyPermissionInfo) ProtoMessage()               {}
func (*CompanyPermissionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CompanyPermissionInfo) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *CompanyPermissionInfo) GetCompanyAdmin() uint32 {
	if m != nil {
		return m.CompanyAdmin
	}
	return 0
}

func (m *CompanyPermissionInfo) GetProjects() []*ProjectPermissionInfo {
	if m != nil {
		return m.Projects
	}
	return nil
}

type SlickPermissionInfo struct {
	SlickAdmin uint32                   ` protobuf:"varint,1,opt,name=SlickAdmin"              json:"SlickAdmin,omitempty"   bson:"slickAdmin"`
	Companies  []*CompanyPermissionInfo ` protobuf:"bytes,2,rep,name=Companies"                json:"Companies,omitempty"    bson:"companies"`
}

func (m *SlickPermissionInfo) Reset()                    { *m = SlickPermissionInfo{} }
func (m *SlickPermissionInfo) String() string            { return proto.CompactTextString(m) }
func (*SlickPermissionInfo) ProtoMessage()               {}
func (*SlickPermissionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SlickPermissionInfo) GetSlickAdmin() uint32 {
	if m != nil {
		return m.SlickAdmin
	}
	return 0
}

func (m *SlickPermissionInfo) GetCompanies() []*CompanyPermissionInfo {
	if m != nil {
		return m.Companies
	}
	return nil
}

type Preferences struct {
	HomeUrl       string  ` protobuf:"bytes,1,opt,name=HomeUrl"                  json:"HomeUrl,omitempty"      bson:"home"`
	Theme         string  ` protobuf:"bytes,2,opt,name=Theme"                    json:"Theme,omitempty"        bson:"theme"`
	BackgroundUrl string  ` protobuf:"bytes,3,opt,name=BackgroundUrl"            json:"BackgroundUrl,omitempty"  bson:"background"`
	Favorites     []*Link ` protobuf:"bytes,4,rep,name=Favorites"                json:"Favorites,omitempty"    bson:"favorites"`
}

func (m *Preferences) Reset()                    { *m = Preferences{} }
func (m *Preferences) String() string            { return proto.CompactTextString(m) }
func (*Preferences) ProtoMessage()               {}
func (*Preferences) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Preferences) GetHomeUrl() string {
	if m != nil {
		return m.HomeUrl
	}
	return ""
}

func (m *Preferences) GetTheme() string {
	if m != nil {
		return m.Theme
	}
	return ""
}

func (m *Preferences) GetBackgroundUrl() string {
	if m != nil {
		return m.BackgroundUrl
	}
	return ""
}

func (m *Preferences) GetFavorites() []*Link {
	if m != nil {
		return m.Favorites
	}
	return nil
}

type S3StorageSettings struct {
	BaseUrl   string ` protobuf:"bytes,1,opt,name=BaseUrl"                  json:"BaseUrl,omitempty"      bson:"baseUrl"`
	AccessKey string ` protobuf:"bytes,2,opt,name=AccessKey"                json:"AccessKey,omitempty"    bson:"accessKey"`
	SecretKey string ` protobuf:"bytes,3,opt,name=SecretKey"                json:"SecretKey,omitempty"    bson:"secretKey"`
	Bucket    string ` protobuf:"bytes,4,opt,name=Bucket"                   json:"Bucket,omitempty"       bson:"bucket"`
	Prefix    string ` protobuf:"bytes,5,opt,name=Prefix"                   json:"Prefix,omitempty"       bson:"prefix"`
}

func (m *S3StorageSettings) Reset()                    { *m = S3StorageSettings{} }
func (m *S3StorageSettings) String() string            { return proto.CompactTextString(m) }
func (*S3StorageSettings) ProtoMessage()               {}
func (*S3StorageSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *S3StorageSettings) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

func (m *S3StorageSettings) GetAccessKey() string {
	if m != nil {
		return m.AccessKey
	}
	return ""
}

func (m *S3StorageSettings) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

func (m *S3StorageSettings) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *S3StorageSettings) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type CompanySettings struct {
	CompanyName            string             ` protobuf:"bytes,1,opt,name=CompanyName"              json:"CompanyName,omitempty"  bson:"_id"`
	UserPreferenceTemplate *Preferences       ` protobuf:"bytes,2,opt,name=UserPreferenceTemplate"   json:"UserPreferenceTemplate,omitempty"  bson:"user-preferences"`
	CustomIconUrl          string             ` protobuf:"bytes,3,opt,name=CustomIconUrl"            json:"CustomIconUrl,omitempty"  bson:"icon-url"`
	Links                  []*Link            ` protobuf:"bytes,4,rep,name=Links"                    json:"Links,omitempty"        bson:"links"`
	CompanyBannerUrl       string             ` protobuf:"bytes,5,opt,name=CompanyBannerUrl"         json:"CompanyBannerUrl,omitempty"  bson:"company-banner"`
	StorageSettings        *S3StorageSettings ` protobuf:"bytes,6,opt,name=StorageSettings"          json:"StorageSettings,omitempty"  bson:"storage-settings"`
}

func (m *CompanySettings) Reset()                    { *m = CompanySettings{} }
func (m *CompanySettings) String() string            { return proto.CompactTextString(m) }
func (*CompanySettings) ProtoMessage()               {}
func (*CompanySettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CompanySettings) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *CompanySettings) GetUserPreferenceTemplate() *Preferences {
	if m != nil {
		return m.UserPreferenceTemplate
	}
	return nil
}

func (m *CompanySettings) GetCustomIconUrl() string {
	if m != nil {
		return m.CustomIconUrl
	}
	return ""
}

func (m *CompanySettings) GetLinks() []*Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *CompanySettings) GetCompanyBannerUrl() string {
	if m != nil {
		return m.CompanyBannerUrl
	}
	return ""
}

func (m *CompanySettings) GetStorageSettings() *S3StorageSettings {
	if m != nil {
		return m.StorageSettings
	}
	return nil
}

type UserInfo struct {
	EmailAddress    string               ` protobuf:"bytes,1,opt,name=EmailAddress"             json:"EmailAddress,omitempty"  bson:"_id"`
	Permissions     *SlickPermissionInfo ` protobuf:"bytes,2,opt,name=Permissions"              json:"Permissions,omitempty"  bson:"permissions"`
	FullName        string               ` protobuf:"bytes,3,opt,name=FullName"                 json:"FullName,omitempty"     bson:"fullName"`
	GivenName       string               ` protobuf:"bytes,4,opt,name=GivenName"                json:"GivenName,omitempty"    bson:"givenName"`
	FamilyName      string               ` protobuf:"bytes,5,opt,name=FamilyName"               json:"FamilyName,omitempty"   bson:"familyName"`
	AvatarUrl       string               ` protobuf:"bytes,6,opt,name=AvatarUrl"                json:"AvatarUrl,omitempty"    bson:"avatarUrl"`
	JobTitle        string               ` protobuf:"bytes,7,opt,name=JobTitle"                 json:"JobTitle,omitempty"     bson:"title"`
	HashedPassword  string               ` protobuf:"bytes,8,opt,name=HashedPassword"           json:"HashedPassword,omitempty"  bson:"hashedPassword"`
	UserPreferences *Preferences         ` protobuf:"bytes,9,opt,name=UserPreferences"          json:"UserPreferences,omitempty"  bson:"preferences"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UserInfo) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *UserInfo) GetPermissions() *SlickPermissionInfo {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *UserInfo) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *UserInfo) GetGivenName() string {
	if m != nil {
		return m.GivenName
	}
	return ""
}

func (m *UserInfo) GetFamilyName() string {
	if m != nil {
		return m.FamilyName
	}
	return ""
}

func (m *UserInfo) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *UserInfo) GetJobTitle() string {
	if m != nil {
		return m.JobTitle
	}
	return ""
}

func (m *UserInfo) GetHashedPassword() string {
	if m != nil {
		return m.HashedPassword
	}
	return ""
}

func (m *UserInfo) GetUserPreferences() *Preferences {
	if m != nil {
		return m.UserPreferences
	}
	return nil
}

type ApiTokenLoginRequest struct {
	Token string ` protobuf:"bytes,1,opt,name=Token"                    json:"Token,omitempty"`
}

func (m *ApiTokenLoginRequest) Reset()                    { *m = ApiTokenLoginRequest{} }
func (m *ApiTokenLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*ApiTokenLoginRequest) ProtoMessage()               {}
func (*ApiTokenLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ApiTokenLoginRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type PlainUserLoginRequest struct {
	UserName string ` protobuf:"bytes,1,opt,name=UserName"                 json:"UserName,omitempty"`
	Password string ` protobuf:"bytes,2,opt,name=Password"                 json:"Password,omitempty"`
}

func (m *PlainUserLoginRequest) Reset()                    { *m = PlainUserLoginRequest{} }
func (m *PlainUserLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*PlainUserLoginRequest) ProtoMessage()               {}
func (*PlainUserLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PlainUserLoginRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *PlainUserLoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	Success bool      `protobuf:"varint,1,opt,name=Success"                 json:"Success"`
	Token   string    ` protobuf:"bytes,2,opt,name=Token"                    json:"Token,omitempty"`
	User    *UserInfo ` protobuf:"bytes,3,opt,name=User"                     json:"User,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *LoginResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginResponse) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type VersionInfoResponse struct {
	Version string ` protobuf:"bytes,1,opt,name=Version"                  json:"Version,omitempty"`
}

func (m *VersionInfoResponse) Reset()                    { *m = VersionInfoResponse{} }
func (m *VersionInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionInfoResponse) ProtoMessage()               {}
func (*VersionInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *VersionInfoResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type CompanySettingsRequest struct {
	CompanyName string ` protobuf:"bytes,1,opt,name=CompanyName"              json:"CompanyName,omitempty"`
}

func (m *CompanySettingsRequest) Reset()                    { *m = CompanySettingsRequest{} }
func (m *CompanySettingsRequest) String() string            { return proto.CompactTextString(m) }
func (*CompanySettingsRequest) ProtoMessage()               {}
func (*CompanySettingsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CompanySettingsRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

type AddUserRequest struct {
	UserEmail   string                 ` protobuf:"bytes,1,opt,name=UserEmail"                json:"UserEmail,omitempty"`
	CompanyName string                 ` protobuf:"bytes,2,opt,name=CompanyName"              json:"CompanyName,omitempty"`
	Permissions *CompanyPermissionInfo ` protobuf:"bytes,3,opt,name=Permissions"              json:"Permissions,omitempty"`
}

func (m *AddUserRequest) Reset()                    { *m = AddUserRequest{} }
func (m *AddUserRequest) String() string            { return proto.CompactTextString(m) }
func (*AddUserRequest) ProtoMessage()               {}
func (*AddUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *AddUserRequest) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

func (m *AddUserRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *AddUserRequest) GetPermissions() *CompanyPermissionInfo {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type AvailableCompanySettingsRequest struct {
}

func (m *AvailableCompanySettingsRequest) Reset()         { *m = AvailableCompanySettingsRequest{} }
func (m *AvailableCompanySettingsRequest) String() string { return proto.CompactTextString(m) }
func (*AvailableCompanySettingsRequest) ProtoMessage()    {}
func (*AvailableCompanySettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21}
}

type AvailableCompanySettings struct {
	Companies []*CompanySettings `protobuf:"bytes,1,rep,name=Companies"                json:"Companies"`
}

func (m *AvailableCompanySettings) Reset()                    { *m = AvailableCompanySettings{} }
func (m *AvailableCompanySettings) String() string            { return proto.CompactTextString(m) }
func (*AvailableCompanySettings) ProtoMessage()               {}
func (*AvailableCompanySettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *AvailableCompanySettings) GetCompanies() []*CompanySettings {
	if m != nil {
		return m.Companies
	}
	return nil
}

type RefreshTokenRequest struct {
}

func (m *RefreshTokenRequest) Reset()                    { *m = RefreshTokenRequest{} }
func (m *RefreshTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*RefreshTokenRequest) ProtoMessage()               {}
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type ProjectsRequest struct {
}

func (m *ProjectsRequest) Reset()                    { *m = ProjectsRequest{} }
func (m *ProjectsRequest) String() string            { return proto.CompactTextString(m) }
func (*ProjectsRequest) ProtoMessage()               {}
func (*ProjectsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type ProjectsListResponse struct {
	Projects []*Project ` protobuf:"bytes,1,rep,name=Projects"                 json:"Projects,omitempty"`
}

func (m *ProjectsListResponse) Reset()                    { *m = ProjectsListResponse{} }
func (m *ProjectsListResponse) String() string            { return proto.CompactTextString(m) }
func (*ProjectsListResponse) ProtoMessage()               {}
func (*ProjectsListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ProjectsListResponse) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

type FileUploadInfo struct {
	Id          *LinkIdentity ` protobuf:"bytes,1,opt,name=Id"                       json:"Id,omitempty"`
	Size        int64         ` protobuf:"varint,2,opt,name=Size"                    json:"Size,omitempty"`
	ContentType string        ` protobuf:"bytes,3,opt,name=ContentType"              json:"ContentType,omitempty"`
	FileName    string        ` protobuf:"bytes,4,opt,name=FileName"                 json:"FileName,omitempty"`
}

func (m *FileUploadInfo) Reset()                    { *m = FileUploadInfo{} }
func (m *FileUploadInfo) String() string            { return proto.CompactTextString(m) }
func (*FileUploadInfo) ProtoMessage()               {}
func (*FileUploadInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *FileUploadInfo) GetId() *LinkIdentity {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *FileUploadInfo) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileUploadInfo) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *FileUploadInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

type LinkListIdentity struct {
	Company    string ` protobuf:"bytes,1,opt,name=Company"                  json:"Company,omitempty"      bson:"company"`
	Project    string ` protobuf:"bytes,2,opt,name=Project"                  json:"Project,omitempty"      bson:"project"`
	EntityType string ` protobuf:"bytes,3,opt,name=EntityType"               json:"EntityType,omitempty"   bson:"type"`
	EntityId   string ` protobuf:"bytes,4,opt,name=EntityId"                 json:"EntityId,omitempty"     bson:"id"`
}

func (m *LinkListIdentity) Reset()                    { *m = LinkListIdentity{} }
func (m *LinkListIdentity) String() string            { return proto.CompactTextString(m) }
func (*LinkListIdentity) ProtoMessage()               {}
func (*LinkListIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *LinkListIdentity) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *LinkListIdentity) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *LinkListIdentity) GetEntityType() string {
	if m != nil {
		return m.EntityType
	}
	return ""
}

func (m *LinkListIdentity) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

type LinkList struct {
	Links []*Link ` protobuf:"bytes,1,rep,name=links"                    json:"links,omitempty"`
}

func (m *LinkList) Reset()                    { *m = LinkList{} }
func (m *LinkList) String() string            { return proto.CompactTextString(m) }
func (*LinkList) ProtoMessage()               {}
func (*LinkList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *LinkList) GetLinks() []*Link {
	if m != nil {
		return m.Links
	}
	return nil
}

type LinkUrl struct {
	Url     string                     ` protobuf:"bytes,1,opt,name=Url"                      json:"Url,omitempty"`
	Expires *google_protobuf.Timestamp ` protobuf:"bytes,7,opt,name=Expires"                  json:"Expires,omitempty"`
}

func (m *LinkUrl) Reset()                    { *m = LinkUrl{} }
func (m *LinkUrl) String() string            { return proto.CompactTextString(m) }
func (*LinkUrl) ProtoMessage()               {}
func (*LinkUrl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *LinkUrl) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *LinkUrl) GetExpires() *google_protobuf.Timestamp {
	if m != nil {
		return m.Expires
	}
	return nil
}

type LinkIdentity struct {
	Company    string ` protobuf:"bytes,1,opt,name=Company"                  json:"Company,omitempty"      bson:"company"`
	Project    string ` protobuf:"bytes,2,opt,name=Project"                  json:"Project,omitempty"      bson:"project"`
	EntityType string ` protobuf:"bytes,3,opt,name=EntityType"               json:"EntityType,omitempty"   bson:"type"`
	EntityId   string ` protobuf:"bytes,4,opt,name=EntityId"                 json:"EntityId,omitempty"     bson:"id"`
	Name       string ` protobuf:"bytes,5,opt,name=Name"                     json:"Name,omitempty"         bson:"name"`
}

func (m *LinkIdentity) Reset()                    { *m = LinkIdentity{} }
func (m *LinkIdentity) String() string            { return proto.CompactTextString(m) }
func (*LinkIdentity) ProtoMessage()               {}
func (*LinkIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *LinkIdentity) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *LinkIdentity) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *LinkIdentity) GetEntityType() string {
	if m != nil {
		return m.EntityType
	}
	return ""
}

func (m *LinkIdentity) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *LinkIdentity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Link struct {
	Id       *LinkIdentity              ` protobuf:"bytes,1,opt,name=Id"                       json:"Id,omitempty"           bson:"id"`
	Type     string                     ` protobuf:"bytes,2,opt,name=Type"                     json:"Type,omitempty"         bson:"type"`
	Order    int32                      ` protobuf:"varint,3,opt,name=Order"                   json:"Order,omitempty"        bson:"order"`
	Url      string                     ` protobuf:"bytes,4,opt,name=Url"                      json:"Url,omitempty"          bson:"url"`
	Creator  string                     ` protobuf:"bytes,5,opt,name=Creator"                  json:"Creator,omitempty"      bson:"creator"`
	FileInfo *SlickFile                 ` protobuf:"bytes,6,opt,name=FileInfo"                 json:"FileInfo,omitempty"     bson:"fileinfo"`
	Updated  *google_protobuf.Timestamp ` protobuf:"bytes,7,opt,name=Updated"                  json:"Updated,omitempty"      bson:"updated"`
}

func (m *Link) Reset()                    { *m = Link{} }
func (m *Link) String() string            { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()               {}
func (*Link) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *Link) GetId() *LinkIdentity {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Link) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Link) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Link) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Link) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Link) GetFileInfo() *SlickFile {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

func (m *Link) GetUpdated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

type SlickFile struct {
	Path        string ` protobuf:"bytes,1,opt,name=Path"                     json:"Path,omitempty"         bson:"path"`
	FileName    string ` protobuf:"bytes,2,opt,name=FileName"                 json:"FileName,omitempty"     bson:"filename"`
	ContentType string ` protobuf:"bytes,3,opt,name=ContentType"              json:"ContentType,omitempty"  bson:"contenttype"`
	Size        int64  ` protobuf:"varint,4,opt,name=Size"                    json:"Size,omitempty"         bson:"size"`
}

func (m *SlickFile) Reset()                    { *m = SlickFile{} }
func (m *SlickFile) String() string            { return proto.CompactTextString(m) }
func (*SlickFile) ProtoMessage()               {}
func (*SlickFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *SlickFile) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SlickFile) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *SlickFile) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *SlickFile) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type ProjectIdentity struct {
	Company string ` protobuf:"bytes,1,opt,name=Company"                  json:"Company,omitempty"      bson:"company"`
	Name    string ` protobuf:"bytes,2,opt,name=Name"                     json:"Name,omitempty"         bson:"name"`
}

func (m *ProjectIdentity) Reset()                    { *m = ProjectIdentity{} }
func (m *ProjectIdentity) String() string            { return proto.CompactTextString(m) }
func (*ProjectIdentity) ProtoMessage()               {}
func (*ProjectIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ProjectIdentity) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *ProjectIdentity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Project struct {
	Id              *ProjectIdentity           ` protobuf:"bytes,1,opt,name=Id"                       json:"Id,omitempty"           bson:"_id"`
	Links           []*Link                    ` protobuf:"bytes,2,rep,name=Links"                    json:"Links,omitempty"        bson:"links"`
	AutomationTools []string                   ` protobuf:"bytes,3,rep,name=AutomationTools"          json:"AutomationTools,omitempty"  bson:"automationTools"`
	Tags            []string                   ` protobuf:"bytes,4,rep,name=Tags"                     json:"Tags,omitempty"         bson:"tags"`
	Attributes      map[string]string          `   protobuf:"bytes,5,rep,name=Attributes"               json:"Attributes,omitempty"   protobuf_key:"bytes,1,opt,name=key"   protobuf_val:"bytes,2,opt,name=value"  bson:"attributes"`
	LastUpdated     *google_protobuf.Timestamp ` protobuf:"bytes,6,opt,name=LastUpdated"              json:"LastUpdated,omitempty"  bson:"lastUpdated"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Project) GetId() *ProjectIdentity {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Project) GetLinks() []*Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Project) GetAutomationTools() []string {
	if m != nil {
		return m.AutomationTools
	}
	return nil
}

func (m *Project) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Project) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Project) GetLastUpdated() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastUpdated
	}
	return nil
}

type ComponentIdentity struct {
	Project *ProjectIdentity ` protobuf:"bytes,1,opt,name=Project"                  json:"Project,omitempty"      bson:"project"`
	Name    string           ` protobuf:"bytes,2,opt,name=Name"                     json:"Name,omitempty"         bson:"name"`
}

func (m *ComponentIdentity) Reset()                    { *m = ComponentIdentity{} }
func (m *ComponentIdentity) String() string            { return proto.CompactTextString(m) }
func (*ComponentIdentity) ProtoMessage()               {}
func (*ComponentIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ComponentIdentity) GetProject() *ProjectIdentity {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *ComponentIdentity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Component struct {
	Id          *ComponentIdentity `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Description string             `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
}

func (m *Component) Reset()                    { *m = Component{} }
func (m *Component) String() string            { return proto.CompactTextString(m) }
func (*Component) ProtoMessage()               {}
func (*Component) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *Component) GetId() *ComponentIdentity {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Component) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Feature struct {
	Id          []byte ` protobuf:"bytes,1,opt,name=Id,proto3"                json:"Id,omitempty"           bson:"_id,omitempty"`
	Name        string ` protobuf:"bytes,2,opt,name=Name"                     json:"Name,omitempty"         bson:"name"`
	ComponentId []byte ` protobuf:"bytes,3,opt,name=ComponentId,proto3"       json:"ComponentId,omitempty"`
	ProjectId   string ` protobuf:"bytes,4,opt,name=ProjectId"                json:"ProjectId,omitempty"`
}

func (m *Feature) Reset()                    { *m = Feature{} }
func (m *Feature) String() string            { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()               {}
func (*Feature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *Feature) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetComponentId() []byte {
	if m != nil {
		return m.ComponentId
	}
	return nil
}

func (m *Feature) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

type Testcase struct {
	Id               []byte   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name             string   `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	AutomationKey    string   `protobuf:"bytes,3,opt,name=AutomationKey" json:"AutomationKey,omitempty"`
	AutomationTool   string   `protobuf:"bytes,4,opt,name=AutomationTool" json:"AutomationTool,omitempty"`
	ComponentId      []byte   `protobuf:"bytes,5,opt,name=ComponentId,proto3" json:"ComponentId,omitempty"`
	Deleted          bool     `protobuf:"varint,6,opt,name=Deleted" json:"Deleted,omitempty"`
	ImportanceRating int32    `protobuf:"varint,7,opt,name=ImportanceRating" json:"ImportanceRating,omitempty"`
	InactiveNotes    []string `protobuf:"bytes,8,rep,name=InactiveNotes" json:"InactiveNotes,omitempty"`
	ProjectId        string   `protobuf:"bytes,9,opt,name=ProjectId" json:"ProjectId,omitempty"`
	StabilityRating  int32    `protobuf:"varint,10,opt,name=StabilityRating" json:"StabilityRating,omitempty"`
	Steps            []string `protobuf:"bytes,11,rep,name=Steps" json:"Steps,omitempty"`
	Tags             []string `protobuf:"bytes,12,rep,name=Tags" json:"Tags,omitempty"`
}

func (m *Testcase) Reset()                    { *m = Testcase{} }
func (m *Testcase) String() string            { return proto.CompactTextString(m) }
func (*Testcase) ProtoMessage()               {}
func (*Testcase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *Testcase) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Testcase) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Testcase) GetAutomationKey() string {
	if m != nil {
		return m.AutomationKey
	}
	return ""
}

func (m *Testcase) GetAutomationTool() string {
	if m != nil {
		return m.AutomationTool
	}
	return ""
}

func (m *Testcase) GetComponentId() []byte {
	if m != nil {
		return m.ComponentId
	}
	return nil
}

func (m *Testcase) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *Testcase) GetImportanceRating() int32 {
	if m != nil {
		return m.ImportanceRating
	}
	return 0
}

func (m *Testcase) GetInactiveNotes() []string {
	if m != nil {
		return m.InactiveNotes
	}
	return nil
}

func (m *Testcase) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Testcase) GetStabilityRating() int32 {
	if m != nil {
		return m.StabilityRating
	}
	return 0
}

func (m *Testcase) GetSteps() []string {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Testcase) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Testplans struct {
	Id   []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *Testplans) Reset()                    { *m = Testplans{} }
func (m *Testplans) String() string            { return proto.CompactTextString(m) }
func (*Testplans) ProtoMessage()               {}
func (*Testplans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *Testplans) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Testplans) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Testruns struct {
	Id          []byte                     `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name        string                     `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	ProjectId   string                     `protobuf:"bytes,3,opt,name=ProjectId" json:"ProjectId,omitempty"`
	Build       string                     `protobuf:"bytes,4,opt,name=Build" json:"Build,omitempty"`
	RunStarted  *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=RunStarted" json:"RunStarted,omitempty"`
	RunFinished *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=RunFinished" json:"RunFinished,omitempty"`
	State       string                     `protobuf:"bytes,7,opt,name=State" json:"State,omitempty"`
	TestplanId  string                     `protobuf:"bytes,8,opt,name=TestplanId" json:"TestplanId,omitempty"`
}

func (m *Testruns) Reset()                    { *m = Testruns{} }
func (m *Testruns) String() string            { return proto.CompactTextString(m) }
func (*Testruns) ProtoMessage()               {}
func (*Testruns) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *Testruns) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Testruns) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Testruns) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Testruns) GetBuild() string {
	if m != nil {
		return m.Build
	}
	return ""
}

func (m *Testruns) GetRunStarted() *google_protobuf.Timestamp {
	if m != nil {
		return m.RunStarted
	}
	return nil
}

func (m *Testruns) GetRunFinished() *google_protobuf.Timestamp {
	if m != nil {
		return m.RunFinished
	}
	return nil
}

func (m *Testruns) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Testruns) GetTestplanId() string {
	if m != nil {
		return m.TestplanId
	}
	return ""
}

func init() {
	proto.RegisterType((*IsAuthorizedRequest)(nil), "slickqa.IsAuthorizedRequest")
	proto.RegisterType((*IsAuthorizedResponse)(nil), "slickqa.IsAuthorizedResponse")
	proto.RegisterType((*CurrentUserRequest)(nil), "slickqa.CurrentUserRequest")
	proto.RegisterType((*UserInfoRequest)(nil), "slickqa.UserInfoRequest")
	proto.RegisterType((*UsersForCompanyQueryRequest)(nil), "slickqa.UsersForCompanyQueryRequest")
	proto.RegisterType((*UsersForProjectQueryRequest)(nil), "slickqa.UsersForProjectQueryRequest")
	proto.RegisterType((*UsersQueryResponse)(nil), "slickqa.UsersQueryResponse")
	proto.RegisterType((*ProjectPermissionInfo)(nil), "slickqa.ProjectPermissionInfo")
	proto.RegisterType((*CompanyPermissionInfo)(nil), "slickqa.CompanyPermissionInfo")
	proto.RegisterType((*SlickPermissionInfo)(nil), "slickqa.SlickPermissionInfo")
	proto.RegisterType((*Preferences)(nil), "slickqa.Preferences")
	proto.RegisterType((*S3StorageSettings)(nil), "slickqa.S3StorageSettings")
	proto.RegisterType((*CompanySettings)(nil), "slickqa.CompanySettings")
	proto.RegisterType((*UserInfo)(nil), "slickqa.UserInfo")
	proto.RegisterType((*ApiTokenLoginRequest)(nil), "slickqa.ApiTokenLoginRequest")
	proto.RegisterType((*PlainUserLoginRequest)(nil), "slickqa.PlainUserLoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "slickqa.LoginResponse")
	proto.RegisterType((*VersionRequest)(nil), "slickqa.VersionRequest")
	proto.RegisterType((*VersionInfoResponse)(nil), "slickqa.VersionInfoResponse")
	proto.RegisterType((*CompanySettingsRequest)(nil), "slickqa.CompanySettingsRequest")
	proto.RegisterType((*AddUserRequest)(nil), "slickqa.AddUserRequest")
	proto.RegisterType((*AvailableCompanySettingsRequest)(nil), "slickqa.AvailableCompanySettingsRequest")
	proto.RegisterType((*AvailableCompanySettings)(nil), "slickqa.AvailableCompanySettings")
	proto.RegisterType((*RefreshTokenRequest)(nil), "slickqa.RefreshTokenRequest")
	proto.RegisterType((*ProjectsRequest)(nil), "slickqa.ProjectsRequest")
	proto.RegisterType((*ProjectsListResponse)(nil), "slickqa.ProjectsListResponse")
	proto.RegisterType((*FileUploadInfo)(nil), "slickqa.FileUploadInfo")
	proto.RegisterType((*LinkListIdentity)(nil), "slickqa.LinkListIdentity")
	proto.RegisterType((*LinkList)(nil), "slickqa.LinkList")
	proto.RegisterType((*LinkUrl)(nil), "slickqa.LinkUrl")
	proto.RegisterType((*LinkIdentity)(nil), "slickqa.LinkIdentity")
	proto.RegisterType((*Link)(nil), "slickqa.Link")
	proto.RegisterType((*SlickFile)(nil), "slickqa.SlickFile")
	proto.RegisterType((*ProjectIdentity)(nil), "slickqa.ProjectIdentity")
	proto.RegisterType((*Project)(nil), "slickqa.Project")
	proto.RegisterType((*ComponentIdentity)(nil), "slickqa.ComponentIdentity")
	proto.RegisterType((*Component)(nil), "slickqa.Component")
	proto.RegisterType((*Feature)(nil), "slickqa.Feature")
	proto.RegisterType((*Testcase)(nil), "slickqa.Testcase")
	proto.RegisterType((*Testplans)(nil), "slickqa.Testplans")
	proto.RegisterType((*Testruns)(nil), "slickqa.Testruns")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Auth service

type AuthClient interface {
	IsAuthorized(ctx context.Context, in *IsAuthorizedRequest, opts ...grpc.CallOption) (*IsAuthorizedResponse, error)
	LoginWithToken(ctx context.Context, in *ApiTokenLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	LoginWithCredentials(ctx context.Context, in *PlainUserLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) IsAuthorized(ctx context.Context, in *IsAuthorizedRequest, opts ...grpc.CallOption) (*IsAuthorizedResponse, error) {
	out := new(IsAuthorizedResponse)
	err := grpc.Invoke(ctx, "/slickqa.Auth/IsAuthorized", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LoginWithToken(ctx context.Context, in *ApiTokenLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/slickqa.Auth/LoginWithToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LoginWithCredentials(ctx context.Context, in *PlainUserLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/slickqa.Auth/LoginWithCredentials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/slickqa.Auth/RefreshToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	IsAuthorized(context.Context, *IsAuthorizedRequest) (*IsAuthorizedResponse, error)
	LoginWithToken(context.Context, *ApiTokenLoginRequest) (*LoginResponse, error)
	LoginWithCredentials(context.Context, *PlainUserLoginRequest) (*LoginResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*LoginResponse, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_IsAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAuthorizedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).IsAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Auth/IsAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).IsAuthorized(ctx, req.(*IsAuthorizedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LoginWithToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiTokenLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginWithToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Auth/LoginWithToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginWithToken(ctx, req.(*ApiTokenLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LoginWithCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlainUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginWithCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Auth/LoginWithCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginWithCredentials(ctx, req.(*PlainUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Auth/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAuthorized",
			Handler:    _Auth_IsAuthorized_Handler,
		},
		{
			MethodName: "LoginWithToken",
			Handler:    _Auth_LoginWithToken_Handler,
		},
		{
			MethodName: "LoginWithCredentials",
			Handler:    _Auth_LoginWithCredentials_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Auth_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

// Client API for Users service

type UsersClient interface {
	GetCurrentUserInfo(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*UserInfo, error)
	GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfo, error)
	GetUsersForCompany(ctx context.Context, in *UsersForCompanyQueryRequest, opts ...grpc.CallOption) (*UsersQueryResponse, error)
	GetUsersForProject(ctx context.Context, in *UsersForProjectQueryRequest, opts ...grpc.CallOption) (*UsersQueryResponse, error)
	UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserInfo, error)
	AddUserToCompany(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*UserInfo, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) GetCurrentUserInfo(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/slickqa.Users/GetCurrentUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/slickqa.Users/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUsersForCompany(ctx context.Context, in *UsersForCompanyQueryRequest, opts ...grpc.CallOption) (*UsersQueryResponse, error) {
	out := new(UsersQueryResponse)
	err := grpc.Invoke(ctx, "/slickqa.Users/GetUsersForCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUsersForProject(ctx context.Context, in *UsersForProjectQueryRequest, opts ...grpc.CallOption) (*UsersQueryResponse, error) {
	out := new(UsersQueryResponse)
	err := grpc.Invoke(ctx, "/slickqa.Users/GetUsersForProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/slickqa.Users/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) AddUserToCompany(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/slickqa.Users/AddUserToCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersServer interface {
	GetCurrentUserInfo(context.Context, *CurrentUserRequest) (*UserInfo, error)
	GetUserInfo(context.Context, *UserInfoRequest) (*UserInfo, error)
	GetUsersForCompany(context.Context, *UsersForCompanyQueryRequest) (*UsersQueryResponse, error)
	GetUsersForProject(context.Context, *UsersForProjectQueryRequest) (*UsersQueryResponse, error)
	UpdateUser(context.Context, *UserInfo) (*UserInfo, error)
	AddUserToCompany(context.Context, *AddUserRequest) (*UserInfo, error)
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_GetCurrentUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetCurrentUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/GetCurrentUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetCurrentUserInfo(ctx, req.(*CurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUsersForCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersForCompanyQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsersForCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/GetUsersForCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsersForCompany(ctx, req.(*UsersForCompanyQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUsersForProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersForProjectQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsersForProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/GetUsersForProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsersForProject(ctx, req.(*UsersForProjectQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_AddUserToCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).AddUserToCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/AddUserToCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).AddUserToCompany(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentUserInfo",
			Handler:    _Users_GetCurrentUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Users_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUsersForCompany",
			Handler:    _Users_GetUsersForCompany_Handler,
		},
		{
			MethodName: "GetUsersForProject",
			Handler:    _Users_GetUsersForProject_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Users_UpdateUser_Handler,
		},
		{
			MethodName: "AddUserToCompany",
			Handler:    _Users_AddUserToCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

// Client API for Company service

type CompanyClient interface {
	GetCompanySettings(ctx context.Context, in *CompanySettingsRequest, opts ...grpc.CallOption) (*CompanySettings, error)
	GetAvailableCompanySettings(ctx context.Context, in *AvailableCompanySettingsRequest, opts ...grpc.CallOption) (*AvailableCompanySettings, error)
	UpdateCompanySettings(ctx context.Context, in *CompanySettings, opts ...grpc.CallOption) (*CompanySettings, error)
	AddCompanySettings(ctx context.Context, in *CompanySettingsRequest, opts ...grpc.CallOption) (*CompanySettings, error)
}

type companyClient struct {
	cc *grpc.ClientConn
}

func NewCompanyClient(cc *grpc.ClientConn) CompanyClient {
	return &companyClient{cc}
}

func (c *companyClient) GetCompanySettings(ctx context.Context, in *CompanySettingsRequest, opts ...grpc.CallOption) (*CompanySettings, error) {
	out := new(CompanySettings)
	err := grpc.Invoke(ctx, "/slickqa.Company/GetCompanySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetAvailableCompanySettings(ctx context.Context, in *AvailableCompanySettingsRequest, opts ...grpc.CallOption) (*AvailableCompanySettings, error) {
	out := new(AvailableCompanySettings)
	err := grpc.Invoke(ctx, "/slickqa.Company/GetAvailableCompanySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) UpdateCompanySettings(ctx context.Context, in *CompanySettings, opts ...grpc.CallOption) (*CompanySettings, error) {
	out := new(CompanySettings)
	err := grpc.Invoke(ctx, "/slickqa.Company/UpdateCompanySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) AddCompanySettings(ctx context.Context, in *CompanySettingsRequest, opts ...grpc.CallOption) (*CompanySettings, error) {
	out := new(CompanySettings)
	err := grpc.Invoke(ctx, "/slickqa.Company/AddCompanySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Company service

type CompanyServer interface {
	GetCompanySettings(context.Context, *CompanySettingsRequest) (*CompanySettings, error)
	GetAvailableCompanySettings(context.Context, *AvailableCompanySettingsRequest) (*AvailableCompanySettings, error)
	UpdateCompanySettings(context.Context, *CompanySettings) (*CompanySettings, error)
	AddCompanySettings(context.Context, *CompanySettingsRequest) (*CompanySettings, error)
}

func RegisterCompanyServer(s *grpc.Server, srv CompanyServer) {
	s.RegisterService(&_Company_serviceDesc, srv)
}

func _Company_GetCompanySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetCompanySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Company/GetCompanySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetCompanySettings(ctx, req.(*CompanySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetAvailableCompanySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableCompanySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetAvailableCompanySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Company/GetAvailableCompanySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetAvailableCompanySettings(ctx, req.(*AvailableCompanySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_UpdateCompanySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).UpdateCompanySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Company/UpdateCompanySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).UpdateCompanySettings(ctx, req.(*CompanySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_AddCompanySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).AddCompanySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Company/AddCompanySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).AddCompanySettings(ctx, req.(*CompanySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Company_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Company",
	HandlerType: (*CompanyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompanySettings",
			Handler:    _Company_GetCompanySettings_Handler,
		},
		{
			MethodName: "GetAvailableCompanySettings",
			Handler:    _Company_GetAvailableCompanySettings_Handler,
		},
		{
			MethodName: "UpdateCompanySettings",
			Handler:    _Company_UpdateCompanySettings_Handler,
		},
		{
			MethodName: "AddCompanySettings",
			Handler:    _Company_AddCompanySettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

// Client API for Projects service

type ProjectsClient interface {
	GetProjects(ctx context.Context, in *ProjectsRequest, opts ...grpc.CallOption) (*ProjectsListResponse, error)
	GetProjectByName(ctx context.Context, in *ProjectIdentity, opts ...grpc.CallOption) (*Project, error)
	AddProject(ctx context.Context, in *ProjectIdentity, opts ...grpc.CallOption) (*Project, error)
}

type projectsClient struct {
	cc *grpc.ClientConn
}

func NewProjectsClient(cc *grpc.ClientConn) ProjectsClient {
	return &projectsClient{cc}
}

func (c *projectsClient) GetProjects(ctx context.Context, in *ProjectsRequest, opts ...grpc.CallOption) (*ProjectsListResponse, error) {
	out := new(ProjectsListResponse)
	err := grpc.Invoke(ctx, "/slickqa.Projects/GetProjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) GetProjectByName(ctx context.Context, in *ProjectIdentity, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := grpc.Invoke(ctx, "/slickqa.Projects/GetProjectByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) AddProject(ctx context.Context, in *ProjectIdentity, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := grpc.Invoke(ctx, "/slickqa.Projects/AddProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Projects service

type ProjectsServer interface {
	GetProjects(context.Context, *ProjectsRequest) (*ProjectsListResponse, error)
	GetProjectByName(context.Context, *ProjectIdentity) (*Project, error)
	AddProject(context.Context, *ProjectIdentity) (*Project, error)
}

func RegisterProjectsServer(s *grpc.Server, srv ProjectsServer) {
	s.RegisterService(&_Projects_serviceDesc, srv)
}

func _Projects_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Projects/GetProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).GetProjects(ctx, req.(*ProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_GetProjectByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).GetProjectByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Projects/GetProjectByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).GetProjectByName(ctx, req.(*ProjectIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_AddProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).AddProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Projects/AddProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).AddProject(ctx, req.(*ProjectIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

var _Projects_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Projects",
	HandlerType: (*ProjectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjects",
			Handler:    _Projects_GetProjects_Handler,
		},
		{
			MethodName: "GetProjectByName",
			Handler:    _Projects_GetProjectByName_Handler,
		},
		{
			MethodName: "AddProject",
			Handler:    _Projects_AddProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

// Client API for Links service

type LinksClient interface {
	GetLinks(ctx context.Context, in *LinkListIdentity, opts ...grpc.CallOption) (*LinkList, error)
	AddLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*LinkList, error)
	RemoveLink(ctx context.Context, in *LinkIdentity, opts ...grpc.CallOption) (*LinkList, error)
	UpdateLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*LinkList, error)
	GetDownloadUrl(ctx context.Context, in *LinkIdentity, opts ...grpc.CallOption) (*LinkUrl, error)
	GetUploadUrl(ctx context.Context, in *FileUploadInfo, opts ...grpc.CallOption) (*LinkUrl, error)
}

type linksClient struct {
	cc *grpc.ClientConn
}

func NewLinksClient(cc *grpc.ClientConn) LinksClient {
	return &linksClient{cc}
}

func (c *linksClient) GetLinks(ctx context.Context, in *LinkListIdentity, opts ...grpc.CallOption) (*LinkList, error) {
	out := new(LinkList)
	err := grpc.Invoke(ctx, "/slickqa.Links/GetLinks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) AddLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*LinkList, error) {
	out := new(LinkList)
	err := grpc.Invoke(ctx, "/slickqa.Links/AddLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) RemoveLink(ctx context.Context, in *LinkIdentity, opts ...grpc.CallOption) (*LinkList, error) {
	out := new(LinkList)
	err := grpc.Invoke(ctx, "/slickqa.Links/RemoveLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) UpdateLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*LinkList, error) {
	out := new(LinkList)
	err := grpc.Invoke(ctx, "/slickqa.Links/UpdateLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) GetDownloadUrl(ctx context.Context, in *LinkIdentity, opts ...grpc.CallOption) (*LinkUrl, error) {
	out := new(LinkUrl)
	err := grpc.Invoke(ctx, "/slickqa.Links/GetDownloadUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) GetUploadUrl(ctx context.Context, in *FileUploadInfo, opts ...grpc.CallOption) (*LinkUrl, error) {
	out := new(LinkUrl)
	err := grpc.Invoke(ctx, "/slickqa.Links/GetUploadUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Links service

type LinksServer interface {
	GetLinks(context.Context, *LinkListIdentity) (*LinkList, error)
	AddLink(context.Context, *Link) (*LinkList, error)
	RemoveLink(context.Context, *LinkIdentity) (*LinkList, error)
	UpdateLink(context.Context, *Link) (*LinkList, error)
	GetDownloadUrl(context.Context, *LinkIdentity) (*LinkUrl, error)
	GetUploadUrl(context.Context, *FileUploadInfo) (*LinkUrl, error)
}

func RegisterLinksServer(s *grpc.Server, srv LinksServer) {
	s.RegisterService(&_Links_serviceDesc, srv)
}

func _Links_GetLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkListIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).GetLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Links/GetLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).GetLinks(ctx, req.(*LinkListIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_AddLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).AddLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Links/AddLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).AddLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_RemoveLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).RemoveLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Links/RemoveLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).RemoveLink(ctx, req.(*LinkIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_UpdateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).UpdateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Links/UpdateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).UpdateLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_GetDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).GetDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Links/GetDownloadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).GetDownloadUrl(ctx, req.(*LinkIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_GetUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).GetUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Links/GetUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).GetUploadUrl(ctx, req.(*FileUploadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Links_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Links",
	HandlerType: (*LinksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLinks",
			Handler:    _Links_GetLinks_Handler,
		},
		{
			MethodName: "AddLink",
			Handler:    _Links_AddLink_Handler,
		},
		{
			MethodName: "RemoveLink",
			Handler:    _Links_RemoveLink_Handler,
		},
		{
			MethodName: "UpdateLink",
			Handler:    _Links_UpdateLink_Handler,
		},
		{
			MethodName: "GetDownloadUrl",
			Handler:    _Links_GetDownloadUrl_Handler,
		},
		{
			MethodName: "GetUploadUrl",
			Handler:    _Links_GetUploadUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

// Client API for Version service

type VersionClient interface {
	GetFullVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionInfoResponse, error)
}

type versionClient struct {
	cc *grpc.ClientConn
}

func NewVersionClient(cc *grpc.ClientConn) VersionClient {
	return &versionClient{cc}
}

func (c *versionClient) GetFullVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionInfoResponse, error) {
	out := new(VersionInfoResponse)
	err := grpc.Invoke(ctx, "/slickqa.Version/GetFullVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Version service

type VersionServer interface {
	GetFullVersion(context.Context, *VersionRequest) (*VersionInfoResponse, error)
}

func RegisterVersionServer(s *grpc.Server, srv VersionServer) {
	s.RegisterService(&_Version_serviceDesc, srv)
}

func _Version_GetFullVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServer).GetFullVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Version/GetFullVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServer).GetFullVersion(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Version_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Version",
	HandlerType: (*VersionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFullVersion",
			Handler:    _Version_GetFullVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

func init() { proto.RegisterFile("slick.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xcd, 0x72, 0x1b, 0xc7,
	0xf1, 0xaf, 0x05, 0x09, 0x7e, 0x34, 0x3f, 0x35, 0x22, 0x65, 0x08, 0xd2, 0x5f, 0xa2, 0xc7, 0x92,
	0xcd, 0xa2, 0x2d, 0xa0, 0xfe, 0x54, 0xe2, 0x72, 0x58, 0x96, 0x64, 0x50, 0x14, 0x29, 0x38, 0x8c,
	0x2c, 0x2d, 0xa8, 0xd8, 0x49, 0xca, 0xa9, 0x2c, 0xb1, 0x43, 0x72, 0xc5, 0xc5, 0x2e, 0xb4, 0x3b,
	0x4b, 0x89, 0x66, 0xf1, 0xa2, 0x4a, 0x55, 0xca, 0xb7, 0x94, 0x92, 0x8b, 0x1f, 0x20, 0x97, 0x5c,
	0x73, 0xca, 0x25, 0x2f, 0x91, 0xca, 0x1b, 0x24, 0x95, 0x4a, 0x9e, 0x21, 0x87, 0xd4, 0xf4, 0xcc,
	0xec, 0xce, 0x2e, 0x00, 0x12, 0x4a, 0x54, 0xb9, 0xa1, 0x7b, 0x66, 0xfb, 0xe3, 0xd7, 0x3d, 0xd3,
	0xdd, 0x03, 0x98, 0x8a, 0x7d, 0xaf, 0x7d, 0x58, 0xeb, 0x46, 0x21, 0x0f, 0xc9, 0x38, 0x12, 0xcf,
	0x9d, 0xea, 0xf5, 0xfd, 0x30, 0xdc, 0xf7, 0x59, 0x1d, 0xd9, 0xbb, 0xc9, 0x5e, 0x9d, 0x7b, 0x1d,
	0x16, 0x73, 0xa7, 0xd3, 0x95, 0x3b, 0xab, 0x57, 0xd5, 0x06, 0xa7, 0xeb, 0xd5, 0x9d, 0x20, 0x08,
	0xb9, 0xc3, 0xbd, 0x30, 0x88, 0xe5, 0x2a, 0x3d, 0x86, 0x8b, 0xcd, 0xb8, 0x91, 0xf0, 0x83, 0x30,
	0xf2, 0xbe, 0x61, 0xae, 0xcd, 0x9e, 0x27, 0x2c, 0xe6, 0x64, 0x09, 0xa6, 0xee, 0x87, 0x9d, 0xae,
	0x13, 0x1c, 0x3f, 0x72, 0x3a, 0xac, 0x62, 0x2d, 0x59, 0xcb, 0x93, 0xb6, 0xc9, 0x12, 0x3b, 0x1e,
	0x47, 0xe1, 0x33, 0xd6, 0xe6, 0xb8, 0xa3, 0x24, 0x77, 0x18, 0x2c, 0x72, 0x0d, 0xe0, 0x31, 0x8b,
	0x3a, 0x5e, 0x1c, 0x7b, 0x61, 0x50, 0x19, 0x59, 0xb2, 0x96, 0x67, 0x6c, 0x83, 0x43, 0x3f, 0x87,
	0x85, 0xbc, 0xea, 0xb8, 0x1b, 0x06, 0x31, 0x23, 0x15, 0x18, 0x6f, 0xf8, 0x7e, 0xf8, 0x82, 0xb9,
	0xa8, 0x77, 0xc2, 0xd6, 0xa4, 0x58, 0xf9, 0x11, 0x8b, 0x63, 0x67, 0x5f, 0xeb, 0xd3, 0x24, 0x5d,
	0x00, 0x72, 0x3f, 0x89, 0x22, 0x16, 0xf0, 0xa7, 0x31, 0x8b, 0x94, 0x17, 0xf4, 0xfb, 0x30, 0x27,
	0xc8, 0x66, 0xb0, 0x17, 0x6a, 0xc7, 0x28, 0x4c, 0x3f, 0xe8, 0x38, 0x9e, 0xdf, 0x70, 0xdd, 0x88,
	0xc5, 0xb1, 0xf2, 0x2c, 0xc7, 0xa3, 0xf7, 0xe0, 0x8a, 0xf8, 0x2c, 0xde, 0x0c, 0x23, 0xe5, 0xf1,
	0x93, 0x84, 0x45, 0xc7, 0x43, 0x63, 0x43, 0x9d, 0x4c, 0x80, 0x02, 0xe4, 0xcd, 0x04, 0x9c, 0x0f,
	0x2e, 0xbd, 0x03, 0x04, 0x55, 0x28, 0xc1, 0x0a, 0xba, 0x0f, 0xa0, 0x9c, 0x08, 0x6e, 0xc5, 0x5a,
	0x1a, 0x59, 0x9e, 0x5a, 0xbd, 0x50, 0x53, 0x59, 0x52, 0x4b, 0x61, 0x90, 0xeb, 0xf4, 0x0b, 0x58,
	0x54, 0xd2, 0xb2, 0x80, 0x88, 0xf5, 0xa2, 0x66, 0xab, 0x37, 0xac, 0x0b, 0x50, 0xb6, 0x43, 0x9f,
	0xc5, 0x95, 0xd2, 0xd2, 0xc8, 0xf2, 0xa4, 0x2d, 0x09, 0xfa, 0x9d, 0x05, 0x8b, 0xca, 0x83, 0x5e,
	0x89, 0xe7, 0x78, 0x4b, 0x61, 0x5a, 0x91, 0x0d, 0xb7, 0xe3, 0x05, 0xe8, 0xee, 0x8c, 0x9d, 0xe3,
	0x91, 0x35, 0x98, 0x50, 0x46, 0xc4, 0x95, 0x11, 0x74, 0xee, 0x5a, 0xea, 0x5c, 0x5f, 0x4f, 0xec,
	0x74, 0x3f, 0x8d, 0xe1, 0x62, 0x4b, 0x6c, 0x2d, 0x18, 0x76, 0x0d, 0x00, 0xd9, 0x52, 0xa9, 0x25,
	0xf3, 0x33, 0xe3, 0x90, 0x4f, 0x61, 0x52, 0x9a, 0xe0, 0x29, 0x67, 0x4d, 0x9d, 0x7d, 0x7d, 0xb5,
	0xb3, 0x0f, 0xe8, 0xaf, 0x2d, 0x81, 0x24, 0xdb, 0x63, 0x11, 0x0b, 0xda, 0x2c, 0x16, 0xb9, 0xfb,
	0x30, 0xec, 0xb0, 0xa7, 0x91, 0xaf, 0x20, 0xd0, 0xa4, 0x00, 0x74, 0xe7, 0x80, 0xa5, 0x61, 0x96,
	0x04, 0xb9, 0x01, 0x33, 0xeb, 0x4e, 0xfb, 0x70, 0x3f, 0x0a, 0x93, 0xc0, 0x15, 0x5f, 0x8d, 0xe0,
	0x6a, 0x9e, 0x49, 0x3e, 0x84, 0xc9, 0x4d, 0xe7, 0x28, 0x8c, 0x3c, 0xce, 0xe2, 0xca, 0x28, 0xda,
	0x38, 0x93, 0xda, 0xb8, 0xed, 0x05, 0x87, 0x76, 0xb6, 0x2e, 0x62, 0x74, 0xa1, 0x75, 0xbb, 0xc5,
	0xc3, 0xc8, 0xd9, 0x67, 0x2d, 0xc6, 0xb9, 0x17, 0xec, 0xa3, 0x61, 0xeb, 0x4e, 0x6c, 0x1a, 0xa6,
	0x48, 0x72, 0x15, 0x26, 0x1b, 0xed, 0x36, 0x8b, 0xe3, 0x1f, 0xb2, 0x63, 0x65, 0x5c, 0xc6, 0x10,
	0xab, 0x2d, 0xd6, 0x8e, 0x18, 0x17, 0xab, 0xd2, 0xb8, 0x8c, 0x41, 0x2e, 0xc1, 0xd8, 0x7a, 0xd2,
	0x3e, 0x64, 0xbc, 0x32, 0x8a, 0x4b, 0x8a, 0x12, 0x7c, 0x81, 0x8a, 0xf7, 0xb2, 0x52, 0x96, 0x7c,
	0x49, 0xd1, 0x3f, 0x95, 0x60, 0x4e, 0x61, 0x9a, 0x5a, 0x76, 0x7e, 0xe6, 0x6c, 0xc3, 0x25, 0x91,
	0xd9, 0x19, 0xce, 0x3b, 0xac, 0xd3, 0xf5, 0x1d, 0x2e, 0xb1, 0x9c, 0x5a, 0x5d, 0x30, 0x72, 0x24,
	0x0d, 0x85, 0x3d, 0xe0, 0x1b, 0x01, 0xf9, 0xfd, 0x24, 0xe6, 0x61, 0xa7, 0xd9, 0x0e, 0x03, 0x03,
	0xf2, 0x1c, 0x93, 0xbc, 0x07, 0x65, 0x01, 0xec, 0x00, 0xb8, 0xe5, 0x1a, 0x59, 0x81, 0x79, 0x65,
	0xe7, 0xba, 0x13, 0x04, 0x2c, 0x12, 0xd2, 0xa4, 0xc3, 0x3d, 0x7c, 0xb2, 0x01, 0x73, 0x85, 0x98,
	0x54, 0xc6, 0xd0, 0xfa, 0x6a, 0x2a, 0xba, 0x27, 0x6a, 0x76, 0xf1, 0x13, 0xfa, 0xcf, 0x12, 0x4c,
	0xe8, 0x53, 0x3e, 0xcc, 0x2d, 0x47, 0xee, 0xc2, 0x54, 0x96, 0xbd, 0xb1, 0x02, 0xec, 0x6a, 0xa6,
	0xb2, 0xf7, 0xc4, 0xd8, 0xe6, 0x07, 0xa4, 0x0a, 0x13, 0x9b, 0x89, 0xef, 0x63, 0x68, 0x24, 0x50,
	0x29, 0x2d, 0x72, 0x63, 0xcb, 0x3b, 0x62, 0x01, 0x2e, 0xca, 0x04, 0xc8, 0x18, 0xe2, 0xe0, 0x6d,
	0x3a, 0x1d, 0xcf, 0x97, 0x61, 0x95, 0xb0, 0x18, 0x1c, 0xcc, 0xbb, 0x23, 0x87, 0x3b, 0x88, 0xda,
	0x98, 0xca, 0x3b, 0xcd, 0x10, 0x7a, 0x3f, 0x0f, 0x77, 0x77, 0x3c, 0xee, 0xb3, 0xca, 0xb8, 0xd4,
	0xab, 0x69, 0xf2, 0x3e, 0xcc, 0x3e, 0x74, 0xe2, 0x03, 0xe6, 0x3e, 0x76, 0xe2, 0xf8, 0x45, 0x18,
	0xb9, 0x95, 0x09, 0xdc, 0x51, 0xe0, 0x92, 0xbb, 0xb2, 0x30, 0x18, 0x49, 0x51, 0x99, 0x3c, 0x23,
	0x61, 0x8a, 0x9b, 0xe9, 0x47, 0xb0, 0xd0, 0xe8, 0x7a, 0x3b, 0xe1, 0x21, 0x0b, 0xb6, 0xc3, 0x7d,
	0x2f, 0xd0, 0x37, 0xbb, 0x38, 0xca, 0x82, 0xa9, 0x00, 0x97, 0x04, 0x5e, 0xb6, 0xbe, 0xe3, 0x05,
	0x42, 0x4a, 0x6e, 0x7b, 0x55, 0x86, 0xcc, 0xc8, 0xee, 0x94, 0x16, 0x6b, 0xa9, 0x13, 0xf2, 0xec,
	0xa5, 0x34, 0xdd, 0x83, 0x19, 0x25, 0x27, 0x2b, 0x99, 0xad, 0x04, 0x4f, 0xa6, 0x2e, 0x99, 0x8a,
	0xcc, 0x2c, 0x2a, 0x19, 0x16, 0x91, 0x9b, 0x30, 0x2a, 0x14, 0x61, 0xdc, 0xfa, 0x96, 0x09, 0x5c,
	0xa6, 0xf3, 0x30, 0xfb, 0x63, 0x16, 0x89, 0x70, 0xeb, 0x8a, 0x5a, 0x87, 0x8b, 0x8a, 0x23, 0x8b,
	0x6a, 0xa6, 0x5f, 0xb1, 0xf5, 0x1d, 0xa2, 0x48, 0xba, 0x06, 0x97, 0x0a, 0xc7, 0x7a, 0xf8, 0x32,
	0xfa, 0xda, 0x82, 0xd9, 0x86, 0xeb, 0x1a, 0x15, 0x5d, 0xa4, 0x86, 0x20, 0x31, 0x91, 0xd5, 0x27,
	0x19, 0xa3, 0x28, 0xb2, 0xd4, 0x7b, 0x61, 0x7c, 0x96, 0x4f, 0x7a, 0xe9, 0xff, 0x79, 0xb7, 0xba,
	0xf9, 0x09, 0x7d, 0x17, 0xae, 0x37, 0x8e, 0x1c, 0xcf, 0x77, 0x76, 0x7d, 0xd6, 0xdf, 0x33, 0x6a,
	0x43, 0x65, 0xd0, 0x16, 0xf2, 0xb1, 0x59, 0x54, 0x64, 0x95, 0xae, 0x14, 0xd5, 0xa7, 0xf2, 0x8c,
	0x72, 0xb2, 0x08, 0x17, 0x6d, 0xb6, 0x17, 0xb1, 0xf8, 0x00, 0x23, 0xa8, 0x55, 0x5d, 0x80, 0x39,
	0x5d, 0xe6, 0x34, 0x6b, 0x03, 0x16, 0x34, 0x6b, 0xdb, 0x8b, 0x79, 0x1a, 0xa3, 0x8f, 0x8c, 0x0a,
	0x2a, 0x15, 0xcf, 0x17, 0x2b, 0xa8, 0x51, 0x33, 0xbf, 0xb5, 0x60, 0x76, 0xd3, 0xf3, 0xd9, 0xd3,
	0xae, 0x1f, 0x3a, 0x2e, 0x5e, 0x2a, 0x37, 0xa1, 0xd4, 0x94, 0x2d, 0xd9, 0xd4, 0xea, 0x62, 0xee,
	0xd6, 0x6b, 0xba, 0x2c, 0xe0, 0x1e, 0x3f, 0xb6, 0x4b, 0x4d, 0x97, 0x10, 0x18, 0x6d, 0x79, 0xdf,
	0x48, 0xf4, 0x47, 0x6c, 0xfc, 0x2d, 0x03, 0x13, 0x70, 0x16, 0xf0, 0x9d, 0xe3, 0xae, 0xbe, 0x2e,
	0x4c, 0x16, 0xde, 0x26, 0x9e, 0xcf, 0x8c, 0x0b, 0x23, 0xa5, 0xe9, 0x2b, 0x0b, 0xe6, 0x85, 0x1a,
	0xe1, 0x8e, 0x56, 0x25, 0x52, 0x4e, 0xc1, 0xa5, 0x53, 0x4e, 0x91, 0x62, 0x45, 0xb9, 0xa1, 0xbb,
	0x44, 0x45, 0x8a, 0x8b, 0xe7, 0x01, 0x7e, 0x6d, 0x58, 0x61, 0x70, 0x84, 0x11, 0x92, 0x6a, 0xba,
	0xda, 0x08, 0x4d, 0xd3, 0x3a, 0x4c, 0x68, 0x1b, 0x44, 0x09, 0xf0, 0xb1, 0x04, 0x58, 0x7d, 0x4b,
	0x00, 0xae, 0xd1, 0x27, 0x30, 0x2e, 0x48, 0x71, 0x65, 0xcd, 0xc3, 0x48, 0x56, 0x5e, 0xc5, 0x4f,
	0xf2, 0x3d, 0x18, 0x7f, 0xf0, 0xb2, 0xeb, 0x45, 0x2c, 0xc6, 0x3b, 0x4c, 0xdc, 0xf5, 0xb2, 0x4d,
	0xaf, 0xe9, 0x3e, 0xbe, 0xb6, 0xa3, 0xfb, 0x78, 0x5b, 0x6f, 0x15, 0x07, 0x62, 0xda, 0xc4, 0xfb,
	0x7f, 0x0d, 0x82, 0x88, 0xad, 0x71, 0x67, 0xe3, 0x6f, 0xfa, 0x0f, 0x0b, 0x46, 0x85, 0x51, 0x6f,
	0x90, 0x1f, 0xa8, 0x59, 0x9a, 0x85, 0xbf, 0xc5, 0x2d, 0xf5, 0x45, 0xe4, 0xaa, 0x0b, 0xa9, 0x6c,
	0x4b, 0x42, 0xc3, 0x36, 0x9a, 0xc1, 0x26, 0xfc, 0x8d, 0x98, 0xc3, 0xc3, 0x48, 0x99, 0xa0, 0x49,
	0x52, 0x93, 0xf9, 0x23, 0x12, 0x55, 0x55, 0x4f, 0x92, 0x2f, 0x65, 0x62, 0xd5, 0x4e, 0xf7, 0x88,
	0x00, 0x3c, 0xed, 0xba, 0x0e, 0x67, 0xee, 0x30, 0x01, 0x50, 0x5b, 0xe9, 0x73, 0x98, 0x4c, 0x85,
	0x09, 0x47, 0x1e, 0x3b, 0xfc, 0x40, 0x21, 0x8f, 0xbf, 0x73, 0x69, 0x5c, 0xca, 0xa7, 0xf1, 0x10,
	0x87, 0x40, 0x1f, 0x9d, 0xd1, 0xec, 0xe8, 0xd0, 0x7b, 0xe9, 0x09, 0x1f, 0x22, 0xea, 0x3a, 0x3e,
	0x25, 0x23, 0x3e, 0x7f, 0x29, 0xa5, 0xa9, 0x40, 0x96, 0x8d, 0x10, 0x55, 0x8a, 0xa7, 0x3f, 0x17,
	0xa5, 0xb4, 0xcb, 0x29, 0x9d, 0xd1, 0xe5, 0x2c, 0xc3, 0x5c, 0x23, 0xe1, 0x61, 0x07, 0x27, 0xca,
	0x9d, 0x30, 0xf4, 0x65, 0x6f, 0x3e, 0x69, 0x17, 0xd9, 0x18, 0x74, 0x67, 0x5f, 0xf6, 0x4c, 0x22,
	0xe8, 0xce, 0x7e, 0x4c, 0x3e, 0x03, 0x68, 0x70, 0x1e, 0x79, 0xbb, 0x89, 0x68, 0x5e, 0xcb, 0xa8,
	0x67, 0xa9, 0x68, 0x54, 0x2d, 0xdb, 0xf2, 0x20, 0xe0, 0xd1, 0xb1, 0x6d, 0x7c, 0x43, 0x3e, 0x85,
	0xa9, 0x6d, 0x27, 0xe6, 0x3a, 0x90, 0x63, 0xe7, 0x06, 0xd2, 0xdc, 0x5e, 0xbd, 0x03, 0x73, 0x05,
	0xe1, 0x22, 0xe3, 0x0e, 0x99, 0x46, 0x55, 0xfc, 0x14, 0x99, 0x79, 0xe4, 0xf8, 0x49, 0xda, 0x9c,
	0x23, 0xb1, 0x56, 0xfa, 0xc4, 0xa2, 0x3f, 0x83, 0x0b, 0x02, 0xf6, 0x30, 0x60, 0x41, 0x16, 0x9a,
	0xd5, 0xec, 0xd8, 0x9d, 0x87, 0x72, 0x1a, 0x94, 0x7e, 0x41, 0xfb, 0x89, 0x2c, 0x13, 0x28, 0x9c,
	0xac, 0x18, 0x51, 0xab, 0xe6, 0x8a, 0x45, 0x4e, 0x39, 0xc6, 0x6d, 0x09, 0xa6, 0x36, 0x58, 0xdc,
	0x8e, 0xbc, 0xae, 0x00, 0x5f, 0x97, 0x40, 0x83, 0x45, 0x3b, 0x30, 0xbe, 0xc9, 0x1c, 0x9e, 0x44,
	0x8c, 0xcc, 0xa6, 0x82, 0xa7, 0xf5, 0xd1, 0x2c, 0x5a, 0xa2, 0x6b, 0xaa, 0xd2, 0x84, 0x59, 0x3b,
	0x6d, 0x9b, 0x2c, 0x51, 0x93, 0x53, 0xdf, 0x74, 0xb3, 0x97, 0x32, 0xe8, 0xbf, 0x4a, 0x30, 0xb1,
	0xc3, 0x62, 0xde, 0x76, 0xe2, 0xe1, 0x14, 0xde, 0x80, 0x99, 0x2c, 0x7b, 0xb2, 0xd9, 0x22, 0xcf,
	0x14, 0x9d, 0x5e, 0x3e, 0xc7, 0x94, 0xe6, 0x02, 0xb7, 0x68, 0x7e, 0xb9, 0xd7, 0xfc, 0x0a, 0x8c,
	0x6f, 0x30, 0x9f, 0xe9, 0x04, 0x9a, 0xb0, 0x35, 0x29, 0x9a, 0xf8, 0x66, 0xa7, 0x1b, 0x46, 0xdc,
	0x09, 0xda, 0xcc, 0x76, 0x44, 0x4d, 0xc6, 0xcb, 0xa2, 0x6c, 0xf7, 0xf0, 0x85, 0xd5, 0xcd, 0xc0,
	0x69, 0x73, 0xef, 0x88, 0x3d, 0x0a, 0x45, 0x3e, 0x4f, 0x60, 0xa6, 0xe7, 0x99, 0x79, 0xa8, 0x26,
	0x0b, 0x50, 0x89, 0xe3, 0xd4, 0xe2, 0xce, 0xae, 0xe7, 0x8b, 0x60, 0x4a, 0x75, 0x80, 0xea, 0x8a,
	0x6c, 0x91, 0x95, 0x2d, 0xce, 0xba, 0x71, 0x65, 0x4a, 0xce, 0xe0, 0x48, 0xa4, 0x87, 0x6c, 0x3a,
	0x3b, 0x64, 0xb4, 0x0e, 0x93, 0x02, 0xfd, 0xae, 0xef, 0x04, 0xf1, 0x30, 0xf0, 0xd3, 0xd7, 0x2a,
	0x5e, 0x51, 0x32, 0xdc, 0x07, 0x79, 0x9f, 0x46, 0x8a, 0x3e, 0x2d, 0x40, 0x79, 0x3d, 0xf1, 0x7c,
	0x9d, 0x18, 0x92, 0x20, 0x6b, 0x00, 0x76, 0x12, 0xb4, 0xb8, 0x13, 0x09, 0xd8, 0xcb, 0xe7, 0x9e,
	0x5b, 0x63, 0xb7, 0x38, 0xf4, 0x76, 0x12, 0x6c, 0x7a, 0x81, 0x27, 0x5a, 0xfa, 0x61, 0x0e, 0xbd,
	0xb1, 0x5d, 0x22, 0x27, 0x06, 0x44, 0x39, 0x3a, 0x48, 0x42, 0xd4, 0x44, 0x8d, 0x52, 0x53, 0xcf,
	0x0c, 0x06, 0x67, 0xf5, 0x6f, 0x23, 0x30, 0xda, 0x48, 0xf8, 0x01, 0xf9, 0xad, 0x05, 0xd3, 0xe6,
	0xa3, 0x15, 0xc9, 0x06, 0xa6, 0x3e, 0xcf, 0x68, 0xd5, 0xff, 0x1b, 0xb0, 0x2a, 0x5b, 0x32, 0xba,
	0xf5, 0xea, 0xcf, 0x7f, 0xfd, 0x4d, 0xa9, 0x41, 0xee, 0xc9, 0xc7, 0xb9, 0x84, 0x1f, 0xd4, 0x3d,
	0x63, 0x5f, 0xfd, 0xc4, 0x68, 0x5d, 0x4f, 0xeb, 0x27, 0xc6, 0x2b, 0x8c, 0xa0, 0xd2, 0xa6, 0xf4,
	0x94, 0xc4, 0x30, 0x8b, 0x03, 0xc1, 0x97, 0x1e, 0x97, 0xfd, 0x21, 0xc9, 0x34, 0xf7, 0x1b, 0x54,
	0xaa, 0x97, 0xb2, 0xfb, 0xdc, 0x1c, 0x24, 0xe8, 0x0a, 0x5a, 0x74, 0x83, 0xd0, 0xcc, 0x22, 0x5f,
	0x6c, 0xb8, 0xf5, 0xc2, 0xe3, 0x07, 0xb7, 0xb8, 0x90, 0x53, 0x3f, 0x41, 0x71, 0xa7, 0xe4, 0x19,
	0x2c, 0xa4, 0x4a, 0xef, 0x47, 0x0c, 0x6f, 0x21, 0xc7, 0x8f, 0x89, 0xf1, 0x30, 0xd3, 0x6f, 0xea,
	0x19, 0xa8, 0xbb, 0x8a, 0xba, 0x17, 0xe8, 0x5c, 0x41, 0xf7, 0x9a, 0xb5, 0x42, 0x18, 0x4c, 0x9b,
	0xed, 0xaf, 0x01, 0x7b, 0x9f, 0xae, 0x78, 0xa0, 0x86, 0xeb, 0xa8, 0xe1, 0x32, 0x79, 0x27, 0xd3,
	0x10, 0xc9, 0xcf, 0xa5, 0x6b, 0xab, 0x7f, 0x28, 0x43, 0x19, 0x9f, 0xd5, 0xc8, 0x2f, 0x80, 0x6c,
	0x31, 0x6e, 0xbc, 0x29, 0x62, 0xd7, 0x70, 0x25, 0xbb, 0x7d, 0x7b, 0x5e, 0x1b, 0xab, 0xbd, 0x63,
	0x94, 0x76, 0x89, 0x10, 0x54, 0x88, 0x4f, 0x6f, 0xf5, 0xb6, 0xfc, 0x92, 0xec, 0xc2, 0xd4, 0x16,
	0xcb, 0x44, 0x57, 0x7a, 0x87, 0xb0, 0xc1, 0x72, 0xdf, 0x47, 0xb9, 0x4b, 0xe4, 0x9a, 0x21, 0xd7,
	0x0b, 0xf6, 0xc2, 0xfa, 0x89, 0x39, 0xe2, 0x9f, 0x92, 0x5f, 0x5a, 0xe8, 0x46, 0xe1, 0x35, 0x93,
	0xdc, 0xc8, 0x49, 0x1c, 0xf0, 0xce, 0x59, 0xbd, 0x92, 0xdf, 0x95, 0x7b, 0x69, 0xa4, 0x1f, 0xa2,
	0x05, 0x37, 0xc9, 0x7b, 0x86, 0x05, 0xbb, 0xc7, 0xb7, 0xda, 0x52, 0x4e, 0x3e, 0x73, 0xc9, 0xeb,
	0xbc, 0x19, 0xba, 0xf0, 0xf5, 0x9a, 0xd1, 0xe7, 0xb5, 0xf4, 0x6c, 0x33, 0x7e, 0x80, 0x66, 0xdc,
	0x26, 0xff, 0x9f, 0x37, 0xa3, 0x2b, 0xe5, 0x9c, 0x75, 0x80, 0xc8, 0x57, 0x00, 0xb2, 0x13, 0x10,
	0x62, 0x49, 0x2f, 0xc8, 0xfd, 0x70, 0xbf, 0x81, 0xea, 0xae, 0x55, 0x2f, 0x1b, 0xea, 0xf2, 0x90,
	0x8b, 0x64, 0x0d, 0x60, 0x5e, 0x8d, 0xad, 0x3b, 0xa1, 0x86, 0xfc, 0x9d, 0xec, 0x3c, 0xe6, 0x26,
	0xda, 0x7e, 0x5a, 0x6a, 0xa8, 0x65, 0x99, 0x0e, 0x83, 0xed, 0x9a, 0xb5, 0xb2, 0xfa, 0xf7, 0x91,
	0xb4, 0x21, 0x24, 0x89, 0xcc, 0xdb, 0xc2, 0xd4, 0x79, 0x7d, 0xe0, 0x88, 0xa9, 0xac, 0x18, 0x38,
	0x83, 0x6a, 0x97, 0xc9, 0x55, 0x34, 0xa6, 0xad, 0x07, 0xd2, 0x42, 0x84, 0x5f, 0x59, 0x70, 0x65,
	0x8b, 0xf1, 0x81, 0x63, 0xef, 0x72, 0xe6, 0xfe, 0xd9, 0xc3, 0x73, 0xf5, 0xdd, 0x73, 0x77, 0xd2,
	0x4b, 0x68, 0xd2, 0x3c, 0x99, 0xcd, 0x9b, 0x44, 0x38, 0x2c, 0xca, 0x88, 0x16, 0xb5, 0x0f, 0xf4,
	0xee, 0x0c, 0xbf, 0x3f, 0x40, 0x25, 0xef, 0x56, 0xcf, 0xf4, 0x5b, 0x44, 0xfb, 0x19, 0x90, 0x86,
	0xeb, 0xbe, 0x45, 0xc4, 0x2f, 0xa3, 0xe6, 0x8b, 0xb4, 0xe0, 0x9e, 0x88, 0xf4, 0xef, 0x4a, 0xd9,
	0x10, 0x4f, 0xbe, 0xc6, 0x0b, 0x24, 0x25, 0x7b, 0x3a, 0xcd, 0xb8, 0xb7, 0x0a, 0xf5, 0x7b, 0x18,
	0xa0, 0x8b, 0xa8, 0x6f, 0x8e, 0xcc, 0xa0, 0xbe, 0xae, 0x96, 0xb7, 0x07, 0xf3, 0x99, 0xf8, 0x75,
	0xf9, 0x7c, 0x32, 0xb0, 0x9b, 0xad, 0xf6, 0xbc, 0x25, 0x14, 0xee, 0x28, 0x2d, 0x36, 0xc5, 0xef,
	0xb4, 0x7e, 0x22, 0x53, 0xc7, 0x06, 0x68, 0xb8, 0xae, 0xbe, 0x13, 0xde, 0x44, 0x43, 0x05, 0x35,
	0x10, 0x9a, 0x37, 0x5c, 0xe0, 0xf4, 0xc7, 0x31, 0x35, 0xbe, 0x90, 0x97, 0x30, 0xb1, 0xc5, 0xb8,
	0xfc, 0x7d, 0x39, 0x37, 0xc4, 0x98, 0xaf, 0x09, 0xc6, 0x29, 0xd4, 0x4b, 0xf4, 0x2e, 0x4a, 0xff,
	0x84, 0x7c, 0x8c, 0xd2, 0x71, 0xa6, 0x37, 0x8d, 0x57, 0x46, 0x9c, 0xd6, 0x4f, 0xb2, 0xd9, 0x39,
	0x25, 0x9a, 0x2e, 0xde, 0xbd, 0xe3, 0x0d, 0xd7, 0xc5, 0xd1, 0x38, 0x3f, 0x3e, 0xf5, 0xd3, 0xf6,
	0x25, 0x6a, 0x7b, 0x42, 0xb7, 0x4d, 0x6d, 0x4d, 0xb7, 0x96, 0x29, 0x6c, 0xba, 0xb5, 0x4c, 0x67,
	0xd3, 0xad, 0xe5, 0xd4, 0xa6, 0x74, 0xd3, 0x95, 0x54, 0x9a, 0x9e, 0xa7, 0x00, 0x36, 0xeb, 0x84,
	0x47, 0x0c, 0x0d, 0xe9, 0x3f, 0x97, 0xf7, 0x33, 0xe8, 0x01, 0x1a, 0x74, 0x6f, 0xe5, 0xce, 0x7f,
	0xe6, 0xbe, 0x8e, 0xee, 0xaf, 0x2c, 0x7d, 0xcd, 0xbe, 0x19, 0x10, 0xd5, 0xb7, 0x0e, 0xc4, 0xb7,
	0x16, 0xcc, 0x6e, 0x31, 0xbe, 0x11, 0xbe, 0x08, 0xfc, 0xd0, 0xc1, 0x7f, 0x4f, 0x06, 0xa0, 0x31,
	0x9f, 0x63, 0x3f, 0x8d, 0x7c, 0xfa, 0x08, 0x8d, 0x7a, 0x48, 0x36, 0xff, 0x2b, 0x30, 0xea, 0xae,
	0xd2, 0x4d, 0xbe, 0xb3, 0x60, 0x5a, 0x14, 0xc4, 0xae, 0xb6, 0x24, 0x2b, 0x0f, 0xf9, 0x47, 0xb7,
	0x3e, 0xb6, 0xfc, 0x1c, 0x6d, 0xf9, 0x8a, 0xb6, 0xde, 0x26, 0x40, 0xf5, 0x04, 0x55, 0x8a, 0xb3,
	0x73, 0x90, 0xbe, 0xe5, 0x92, 0xaf, 0x11, 0xb1, 0xcd, 0xc4, 0xf7, 0x35, 0x27, 0xb3, 0x33, 0xff,
	0x30, 0x5c, 0xbd, 0x5a, 0x5c, 0x30, 0xdf, 0x87, 0xe9, 0x02, 0xda, 0x3c, 0x4b, 0xa6, 0xd1, 0xe6,
	0x23, 0xb9, 0x63, 0x7d, 0x03, 0xae, 0xb4, 0xc3, 0x4e, 0xfa, 0x61, 0xdb, 0xf7, 0x58, 0xc0, 0xd3,
	0x0e, 0xfe, 0xa7, 0xfa, 0x2f, 0xee, 0xdf, 0x97, 0xce, 0xda, 0xb6, 0x3b, 0x86, 0xbf, 0x6e, 0xff,
	0x3b, 0x00, 0x00, 0xff, 0xff, 0x76, 0xa7, 0x22, 0x7a, 0x1f, 0x1f, 0x00, 0x00,
}

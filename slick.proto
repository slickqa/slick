syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

package slickqa;

option java_package = "com.slickqa.client.protobuf";
option go_package = "slickqa";
option csharp_namespace = "com.slickqa.client.protobuf";

// auth stuff
message IsAuthorizedRequest {
  string CompanyName = 1; //
  string ProjectName = 2; //
  uint32 Permission = 3; //
}

message IsAuthorizedResponse {
  bool Allowed = 1; //`json:"Allowed"`
  string Message = 2; //
}

message CurrentUserRequest {
}

message UserInfoRequest {
  string EmailAddress = 1; //
}

message UsersForCompanyQueryRequest {
  string CompanyName = 1; //
}

message UsersForProjectQueryRequest {
  string CompanyName = 1; //
  string ProjectName = 2; //
}

message UsersQueryResponse {
  repeated UserInfo users = 1; //
}

message ProjectPermissionInfo {
  string ProjectName = 1; //`bson:"name"`
  repeated string Roles = 2; //`bson:"roles"`
}

message CompanyPermissionInfo {
  string CompanyName = 1; //`bson:"name"`
  uint32 CompanyAdmin = 2; //`bson:"admin"`
  repeated ProjectPermissionInfo Projects = 3; //`bson:"projects"`
}

message SlickPermissionInfo {
  uint32 SlickAdmin = 1; //`bson:"slickAdmin"`
  repeated CompanyPermissionInfo Companies = 2; //`bson:"companies"`
}

message Preferences {
  string HomeUrl = 1; //`bson:"home"`
  string Theme = 2; //`bson:"theme"`
  string BackgroundUrl = 3; //`bson:"background"`
  repeated Link Favorites = 4; //`bson:"favorites"`
}

message CompanySettings {
  string CompanyName = 1; //`bson:"_id"`
  Preferences UserPreferenceTemplate = 2; //`bson:"user-preferences"`
  string CustomIconUrl = 3; //`bson:"icon-url"`
  repeated Link Links = 4; //`bson:"links"`
  string CompanyBannerUrl = 5; //`bson:"company-banner"`
}

message UserInfo {
  string EmailAddress = 1; //`bson:"_id"`
  SlickPermissionInfo Permissions = 2; //`bson:"permissions"`
  string FullName = 3; //`bson:"fullName"`
  string GivenName = 4; //`bson:"givenName"`
  string FamilyName = 5; //`bson:"familyName"`
  string AvatarUrl = 6; //`bson:"avatarUrl"`
  string JobTitle = 7; //`bson:"title"`
  string HashedPassword = 8; //`bson:"hashedPassword"`
  Preferences UserPreferences = 9; //`bson:"preferences"`
}

message ApiTokenLoginRequest {
  string Token = 1; //
}

message PlainUserLoginRequest {
  string UserName = 1; //
  string Password = 2; //
}

message LoginResponse {
  bool Success = 1; //`json:"Success"`
  string Token = 2; //
  UserInfo User = 3; //
}

message VersionRequest {
}

message VersionInfoResponse {
    string Version = 1; //
}

message CompanySettingsRequest {
  string CompanyName = 1; //
}

message AddUserRequest {
  string UserEmail = 1; //
  string CompanyName = 2; //
  CompanyPermissionInfo Permissions = 3; //
}

message AvailableCompanySettingsRequest {
}

message AvailableCompanySettings {
  repeated CompanySettings Companies = 1; //`json:"Companies"`
}

service Auth {
  rpc IsAuthorized(IsAuthorizedRequest) returns(IsAuthorizedResponse) {
    option (google.api.http) = {
      get: "/api/auth/isAuthorized/{CompanyName}/{ProjectName}/{Permission}"
    };
  }
  rpc LoginWithToken(ApiTokenLoginRequest) returns(LoginResponse) {
    option (google.api.http) = {
      get: "/api/auth/login-with-token/{Token}"
    };
  }
  rpc LoginWithCredentials(PlainUserLoginRequest) returns(LoginResponse) {
    option (google.api.http) = {
      post: "/api/auth/login"
      body: "*"
    };
  }
}

service Users {
  rpc GetCurrentUserInfo(CurrentUserRequest) returns(UserInfo) {
    option (google.api.http) = {
      get: "/api/users/current"
    };
  }
  rpc GetUserInfo(UserInfoRequest) returns(UserInfo) {
    option (google.api.http) = {
      get: "/api/users/info/{EmailAddress}"
    };
  }
  rpc GetUsersForCompany(UsersForCompanyQueryRequest) returns(UsersQueryResponse) {
    option (google.api.http) = {
      get: "/api/users/by-company/{CompanyName}"
    };
  }
  rpc GetUsersForProject(UsersForProjectQueryRequest) returns (UsersQueryResponse) {
    option (google.api.http) = {
      get: "/api/users/by-project/{CompanyName}/{ProjectName}"
    };
  }
  rpc UpdateUser(UserInfo) returns (UserInfo) {
    option (google.api.http) = {
      put: "/api/users/{EmailAddress}"
      body: "*"
    };
  }
  rpc AddUserToCompany(AddUserRequest) returns (UserInfo) {
    option (google.api.http) = {
      post: "/api/users/by-company/{CompanyName}"
      body: "*"
    };
  }
}

service Company {
  rpc GetCompanySettings(CompanySettingsRequest) returns (CompanySettings) {
    option (google.api.http) = {
      get: "/api/companies/{CompanyName}"
    };
  }

  rpc GetAvailableCompanySettings(AvailableCompanySettingsRequest) returns (AvailableCompanySettings) {
    option (google.api.http) = {
      get: "/api/companies"
    };
  }

  rpc UpdateCompanySettings(CompanySettings) returns (CompanySettings) {
    option (google.api.http) = {
      put: "/api/companies/{CompanyName}"
      body: "*"
    };
  }
  rpc CreateCompanySettings(CompanySettings) returns (CompanySettings) {
    option (google.api.http) = {
      post: "/api/companies"
      body: "*"
    };
  }
}

service Version {
  rpc GetFullVersion(VersionRequest) returns(VersionInfoResponse) {
    option (google.api.http) = {
            get: "/api/version"
    };
  }
}
// slick objects

message Link {
  string Url = 1; //`bson:"url"`
  string Name = 2; //`bson:"name"`
  // to be used by UI, examples include iframe, video, picture, external, html-source, etc
  string UIViewType = 3; //`bson:"ui-view"`
}

message ProjectIdentity {
  string Company = 1; //`bson:"company"`
  string Name = 2; //`bson:"name"`
}

message Project {
  ProjectIdentity Id = 1; //`bson:"_id"`
  repeated string AutomationTools = 3; //`bson:"automationTools"`
  repeated string Tags = 4; //`bson:"tags"`
  map<string, string> Attributes = 5; //`bson:"attributes"`
  google.protobuf.Timestamp LastUpdated = 6; //`bson:"lastUpdated"`

}

message ComponentIdentity {
  ProjectIdentity Project = 1; //`bson:"project"`
  string Name = 2; //`bson:"name"`
}

message Component{
  ComponentIdentity Id = 1; //`bson:"_id"`
  string Description = 2; //

}

message Feature{
  bytes Id = 1; //`bson:"_id,omitempty"`
  string Name = 2; //`bson:"name"`
  bytes ComponentId= 3; //`bson:"componentId,omitempty"` 
  string ProjectId= 4; //`bson:"_id,omitempty"`
}

message Testcase{
  bytes Id = 1; //`bson:"_id,omitempty"`
  string Name = 2; //`bson:"name"`
  string AutomationKey = 3; //`bson:"automationId"`
  string AutomationTool = 4; //`bson:"automationTool"`
  bytes ComponentId = 5; //`bson:"componentId,omitempty"`
  bool Deleted = 6; //`bson:"bson:"deleted"`
  int32 ImportanceRating = 7; //`bson:"bson:"importanceRating"`
  repeated string InactiveNotes = 8; //`bson:"inactiveNotes"`
  string ProjectId = 9; //`bson:"_id,omitempty"`
  int32 StabilityRating = 10; //`bson:"stabilityRating"`
  repeated string Steps = 11; //`bson:"steps"`
  repeated string Tags = 12; //`bson:"tags"`
}

message Testplans{
  bytes Id = 1; //`bson:"_id,omitempty"`
  string Name = 2; //`bson:"name"`
}

message Testruns{
  bytes Id = 1; //`bson:"_id,omitempty"`
  string Name = 2; //`bson:"name"`
  string ProjectId = 3; //`bson:"_id,omitempty"`
  string Build = 4; //`bson:"build"`
  google.protobuf.Timestamp RunStarted = 5; //`bson:"runStarted"`
  google.protobuf.Timestamp RunFinished = 6; //`bson:"runFinished"`
  string State = 7; //`bson:"state"`
  string TestplanId = 8; //`bson:"_id,omitempty"`
}


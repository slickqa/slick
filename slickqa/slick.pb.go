// Code generated by protoc-gen-go. DO NOT EDIT.
// source: slick.proto

package slickqa

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// auth stuff
type IsAuthorizedRequest struct {
	CompanyName          string   ` protobuf:"bytes,1,opt,name=CompanyName,proto3"       json:"CompanyName,omitempty"`
	ProjectName          string   ` protobuf:"bytes,2,opt,name=ProjectName,proto3"       json:"ProjectName,omitempty"`
	Permission           uint32   ` protobuf:"varint,3,opt,name=Permission,proto3"       json:"Permission,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *IsAuthorizedRequest) Reset()         { *m = IsAuthorizedRequest{} }
func (m *IsAuthorizedRequest) String() string { return proto.CompactTextString(m) }
func (*IsAuthorizedRequest) ProtoMessage()    {}
func (*IsAuthorizedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{0}
}

func (m *IsAuthorizedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsAuthorizedRequest.Unmarshal(m, b)
}
func (m *IsAuthorizedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsAuthorizedRequest.Marshal(b, m, deterministic)
}
func (m *IsAuthorizedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsAuthorizedRequest.Merge(m, src)
}
func (m *IsAuthorizedRequest) XXX_Size() int {
	return xxx_messageInfo_IsAuthorizedRequest.Size(m)
}
func (m *IsAuthorizedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsAuthorizedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsAuthorizedRequest proto.InternalMessageInfo

func (m *IsAuthorizedRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *IsAuthorizedRequest) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *IsAuthorizedRequest) GetPermission() uint32 {
	if m != nil {
		return m.Permission
	}
	return 0
}

type IsAuthorizedResponse struct {
	Allowed              bool     `protobuf:"varint,1,opt,name=Allowed,proto3"          json:"Allowed"`
	Message              string   ` protobuf:"bytes,2,opt,name=Message,proto3"           json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *IsAuthorizedResponse) Reset()         { *m = IsAuthorizedResponse{} }
func (m *IsAuthorizedResponse) String() string { return proto.CompactTextString(m) }
func (*IsAuthorizedResponse) ProtoMessage()    {}
func (*IsAuthorizedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{1}
}

func (m *IsAuthorizedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsAuthorizedResponse.Unmarshal(m, b)
}
func (m *IsAuthorizedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsAuthorizedResponse.Marshal(b, m, deterministic)
}
func (m *IsAuthorizedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsAuthorizedResponse.Merge(m, src)
}
func (m *IsAuthorizedResponse) XXX_Size() int {
	return xxx_messageInfo_IsAuthorizedResponse.Size(m)
}
func (m *IsAuthorizedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsAuthorizedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsAuthorizedResponse proto.InternalMessageInfo

func (m *IsAuthorizedResponse) GetAllowed() bool {
	if m != nil {
		return m.Allowed
	}
	return false
}

func (m *IsAuthorizedResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CurrentUserRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrentUserRequest) Reset()         { *m = CurrentUserRequest{} }
func (m *CurrentUserRequest) String() string { return proto.CompactTextString(m) }
func (*CurrentUserRequest) ProtoMessage()    {}
func (*CurrentUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{2}
}

func (m *CurrentUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentUserRequest.Unmarshal(m, b)
}
func (m *CurrentUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentUserRequest.Marshal(b, m, deterministic)
}
func (m *CurrentUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentUserRequest.Merge(m, src)
}
func (m *CurrentUserRequest) XXX_Size() int {
	return xxx_messageInfo_CurrentUserRequest.Size(m)
}
func (m *CurrentUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentUserRequest proto.InternalMessageInfo

type UserInfoRequest struct {
	EmailAddress         string   ` protobuf:"bytes,1,opt,name=EmailAddress,proto3"      json:"EmailAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *UserInfoRequest) Reset()         { *m = UserInfoRequest{} }
func (m *UserInfoRequest) String() string { return proto.CompactTextString(m) }
func (*UserInfoRequest) ProtoMessage()    {}
func (*UserInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{3}
}

func (m *UserInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfoRequest.Unmarshal(m, b)
}
func (m *UserInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfoRequest.Marshal(b, m, deterministic)
}
func (m *UserInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoRequest.Merge(m, src)
}
func (m *UserInfoRequest) XXX_Size() int {
	return xxx_messageInfo_UserInfoRequest.Size(m)
}
func (m *UserInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoRequest proto.InternalMessageInfo

func (m *UserInfoRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

type UsersForCompanyQueryRequest struct {
	CompanyName          string   ` protobuf:"bytes,1,opt,name=CompanyName,proto3"       json:"CompanyName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *UsersForCompanyQueryRequest) Reset()         { *m = UsersForCompanyQueryRequest{} }
func (m *UsersForCompanyQueryRequest) String() string { return proto.CompactTextString(m) }
func (*UsersForCompanyQueryRequest) ProtoMessage()    {}
func (*UsersForCompanyQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{4}
}

func (m *UsersForCompanyQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsersForCompanyQueryRequest.Unmarshal(m, b)
}
func (m *UsersForCompanyQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsersForCompanyQueryRequest.Marshal(b, m, deterministic)
}
func (m *UsersForCompanyQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersForCompanyQueryRequest.Merge(m, src)
}
func (m *UsersForCompanyQueryRequest) XXX_Size() int {
	return xxx_messageInfo_UsersForCompanyQueryRequest.Size(m)
}
func (m *UsersForCompanyQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersForCompanyQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UsersForCompanyQueryRequest proto.InternalMessageInfo

func (m *UsersForCompanyQueryRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

type UsersForProjectQueryRequest struct {
	CompanyName          string   ` protobuf:"bytes,1,opt,name=CompanyName,proto3"       json:"CompanyName,omitempty"`
	ProjectName          string   ` protobuf:"bytes,2,opt,name=ProjectName,proto3"       json:"ProjectName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *UsersForProjectQueryRequest) Reset()         { *m = UsersForProjectQueryRequest{} }
func (m *UsersForProjectQueryRequest) String() string { return proto.CompactTextString(m) }
func (*UsersForProjectQueryRequest) ProtoMessage()    {}
func (*UsersForProjectQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{5}
}

func (m *UsersForProjectQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsersForProjectQueryRequest.Unmarshal(m, b)
}
func (m *UsersForProjectQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsersForProjectQueryRequest.Marshal(b, m, deterministic)
}
func (m *UsersForProjectQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersForProjectQueryRequest.Merge(m, src)
}
func (m *UsersForProjectQueryRequest) XXX_Size() int {
	return xxx_messageInfo_UsersForProjectQueryRequest.Size(m)
}
func (m *UsersForProjectQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersForProjectQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UsersForProjectQueryRequest proto.InternalMessageInfo

func (m *UsersForProjectQueryRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *UsersForProjectQueryRequest) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

type UsersQueryResponse struct {
	Users                []*UserInfo ` protobuf:"bytes,1,rep,name=users,proto3"             json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"                                             `
	XXX_unrecognized     []byte      `json:"-"                                             `
	XXX_sizecache        int32       `json:"-"                                             `
}

func (m *UsersQueryResponse) Reset()         { *m = UsersQueryResponse{} }
func (m *UsersQueryResponse) String() string { return proto.CompactTextString(m) }
func (*UsersQueryResponse) ProtoMessage()    {}
func (*UsersQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{6}
}

func (m *UsersQueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsersQueryResponse.Unmarshal(m, b)
}
func (m *UsersQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsersQueryResponse.Marshal(b, m, deterministic)
}
func (m *UsersQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersQueryResponse.Merge(m, src)
}
func (m *UsersQueryResponse) XXX_Size() int {
	return xxx_messageInfo_UsersQueryResponse.Size(m)
}
func (m *UsersQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UsersQueryResponse proto.InternalMessageInfo

func (m *UsersQueryResponse) GetUsers() []*UserInfo {
	if m != nil {
		return m.Users
	}
	return nil
}

type ProjectPermissionInfo struct {
	ProjectName          string   ` protobuf:"bytes,1,opt,name=ProjectName,proto3"       json:"ProjectName,omitempty"  bson:"name"`
	Roles                []string ` protobuf:"bytes,2,rep,name=Roles,proto3"             json:"Roles,omitempty"        bson:"roles"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *ProjectPermissionInfo) Reset()         { *m = ProjectPermissionInfo{} }
func (m *ProjectPermissionInfo) String() string { return proto.CompactTextString(m) }
func (*ProjectPermissionInfo) ProtoMessage()    {}
func (*ProjectPermissionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{7}
}

func (m *ProjectPermissionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectPermissionInfo.Unmarshal(m, b)
}
func (m *ProjectPermissionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectPermissionInfo.Marshal(b, m, deterministic)
}
func (m *ProjectPermissionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectPermissionInfo.Merge(m, src)
}
func (m *ProjectPermissionInfo) XXX_Size() int {
	return xxx_messageInfo_ProjectPermissionInfo.Size(m)
}
func (m *ProjectPermissionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectPermissionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectPermissionInfo proto.InternalMessageInfo

func (m *ProjectPermissionInfo) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *ProjectPermissionInfo) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

type CompanyPermissionInfo struct {
	CompanyName          string                   ` protobuf:"bytes,1,opt,name=CompanyName,proto3"       json:"CompanyName,omitempty"  bson:"name"`
	CompanyAdmin         uint32                   ` protobuf:"varint,2,opt,name=CompanyAdmin,proto3"     json:"CompanyAdmin,omitempty"  bson:"admin"`
	Projects             []*ProjectPermissionInfo ` protobuf:"bytes,3,rep,name=Projects,proto3"          json:"Projects,omitempty"     bson:"projects"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"                                             `
	XXX_unrecognized     []byte                   `json:"-"                                             `
	XXX_sizecache        int32                    `json:"-"                                             `
}

func (m *CompanyPermissionInfo) Reset()         { *m = CompanyPermissionInfo{} }
func (m *CompanyPermissionInfo) String() string { return proto.CompactTextString(m) }
func (*CompanyPermissionInfo) ProtoMessage()    {}
func (*CompanyPermissionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{8}
}

func (m *CompanyPermissionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompanyPermissionInfo.Unmarshal(m, b)
}
func (m *CompanyPermissionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompanyPermissionInfo.Marshal(b, m, deterministic)
}
func (m *CompanyPermissionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompanyPermissionInfo.Merge(m, src)
}
func (m *CompanyPermissionInfo) XXX_Size() int {
	return xxx_messageInfo_CompanyPermissionInfo.Size(m)
}
func (m *CompanyPermissionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CompanyPermissionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CompanyPermissionInfo proto.InternalMessageInfo

func (m *CompanyPermissionInfo) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *CompanyPermissionInfo) GetCompanyAdmin() uint32 {
	if m != nil {
		return m.CompanyAdmin
	}
	return 0
}

func (m *CompanyPermissionInfo) GetProjects() []*ProjectPermissionInfo {
	if m != nil {
		return m.Projects
	}
	return nil
}

type SlickPermissionInfo struct {
	SlickAdmin           uint32                   ` protobuf:"varint,1,opt,name=SlickAdmin,proto3"       json:"SlickAdmin,omitempty"   bson:"slickAdmin"`
	Companies            []*CompanyPermissionInfo ` protobuf:"bytes,2,rep,name=Companies,proto3"         json:"Companies,omitempty"    bson:"companies"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"                                             `
	XXX_unrecognized     []byte                   `json:"-"                                             `
	XXX_sizecache        int32                    `json:"-"                                             `
}

func (m *SlickPermissionInfo) Reset()         { *m = SlickPermissionInfo{} }
func (m *SlickPermissionInfo) String() string { return proto.CompactTextString(m) }
func (*SlickPermissionInfo) ProtoMessage()    {}
func (*SlickPermissionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{9}
}

func (m *SlickPermissionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SlickPermissionInfo.Unmarshal(m, b)
}
func (m *SlickPermissionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SlickPermissionInfo.Marshal(b, m, deterministic)
}
func (m *SlickPermissionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlickPermissionInfo.Merge(m, src)
}
func (m *SlickPermissionInfo) XXX_Size() int {
	return xxx_messageInfo_SlickPermissionInfo.Size(m)
}
func (m *SlickPermissionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SlickPermissionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SlickPermissionInfo proto.InternalMessageInfo

func (m *SlickPermissionInfo) GetSlickAdmin() uint32 {
	if m != nil {
		return m.SlickAdmin
	}
	return 0
}

func (m *SlickPermissionInfo) GetCompanies() []*CompanyPermissionInfo {
	if m != nil {
		return m.Companies
	}
	return nil
}

type Preferences struct {
	HomeUrl              string   ` protobuf:"bytes,1,opt,name=HomeUrl,proto3"           json:"HomeUrl,omitempty"      bson:"home"`
	Theme                string   ` protobuf:"bytes,2,opt,name=Theme,proto3"             json:"Theme,omitempty"        bson:"theme"`
	BackgroundUrl        string   ` protobuf:"bytes,3,opt,name=BackgroundUrl,proto3"     json:"BackgroundUrl,omitempty"  bson:"background"`
	Favorites            []*Link  ` protobuf:"bytes,4,rep,name=Favorites,proto3"         json:"Favorites,omitempty"    bson:"favorites"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *Preferences) Reset()         { *m = Preferences{} }
func (m *Preferences) String() string { return proto.CompactTextString(m) }
func (*Preferences) ProtoMessage()    {}
func (*Preferences) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{10}
}

func (m *Preferences) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Preferences.Unmarshal(m, b)
}
func (m *Preferences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Preferences.Marshal(b, m, deterministic)
}
func (m *Preferences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Preferences.Merge(m, src)
}
func (m *Preferences) XXX_Size() int {
	return xxx_messageInfo_Preferences.Size(m)
}
func (m *Preferences) XXX_DiscardUnknown() {
	xxx_messageInfo_Preferences.DiscardUnknown(m)
}

var xxx_messageInfo_Preferences proto.InternalMessageInfo

func (m *Preferences) GetHomeUrl() string {
	if m != nil {
		return m.HomeUrl
	}
	return ""
}

func (m *Preferences) GetTheme() string {
	if m != nil {
		return m.Theme
	}
	return ""
}

func (m *Preferences) GetBackgroundUrl() string {
	if m != nil {
		return m.BackgroundUrl
	}
	return ""
}

func (m *Preferences) GetFavorites() []*Link {
	if m != nil {
		return m.Favorites
	}
	return nil
}

type S3StorageSettings struct {
	BaseUrl              string   ` protobuf:"bytes,1,opt,name=BaseUrl,proto3"           json:"BaseUrl,omitempty"      bson:"baseUrl"`
	AccessKey            string   ` protobuf:"bytes,2,opt,name=AccessKey,proto3"         json:"AccessKey,omitempty"    bson:"accessKey"`
	SecretKey            string   ` protobuf:"bytes,3,opt,name=SecretKey,proto3"         json:"SecretKey,omitempty"    bson:"secretKey"`
	Bucket               string   ` protobuf:"bytes,4,opt,name=Bucket,proto3"            json:"Bucket,omitempty"       bson:"bucket"`
	Prefix               string   ` protobuf:"bytes,5,opt,name=Prefix,proto3"            json:"Prefix,omitempty"       bson:"prefix"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *S3StorageSettings) Reset()         { *m = S3StorageSettings{} }
func (m *S3StorageSettings) String() string { return proto.CompactTextString(m) }
func (*S3StorageSettings) ProtoMessage()    {}
func (*S3StorageSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{11}
}

func (m *S3StorageSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_S3StorageSettings.Unmarshal(m, b)
}
func (m *S3StorageSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_S3StorageSettings.Marshal(b, m, deterministic)
}
func (m *S3StorageSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3StorageSettings.Merge(m, src)
}
func (m *S3StorageSettings) XXX_Size() int {
	return xxx_messageInfo_S3StorageSettings.Size(m)
}
func (m *S3StorageSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_S3StorageSettings.DiscardUnknown(m)
}

var xxx_messageInfo_S3StorageSettings proto.InternalMessageInfo

func (m *S3StorageSettings) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

func (m *S3StorageSettings) GetAccessKey() string {
	if m != nil {
		return m.AccessKey
	}
	return ""
}

func (m *S3StorageSettings) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

func (m *S3StorageSettings) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *S3StorageSettings) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type CompanySettings struct {
	CompanyName            string             ` protobuf:"bytes,1,opt,name=CompanyName,proto3"       json:"CompanyName,omitempty"  bson:"_id"`
	UserPreferenceTemplate *Preferences       ` protobuf:"bytes,2,opt,name=UserPreferenceTemplate,proto3"  json:"UserPreferenceTemplate,omitempty"  bson:"user-preferences"`
	CustomIconUrl          string             ` protobuf:"bytes,3,opt,name=CustomIconUrl,proto3"     json:"CustomIconUrl,omitempty"  bson:"icon-url"`
	Links                  []*Link            ` protobuf:"bytes,4,rep,name=Links,proto3"             json:"Links,omitempty"        bson:"links"`
	CompanyBannerUrl       string             ` protobuf:"bytes,5,opt,name=CompanyBannerUrl,proto3"  json:"CompanyBannerUrl,omitempty"  bson:"company-banner"`
	StorageSettings        *S3StorageSettings ` protobuf:"bytes,6,opt,name=StorageSettings,proto3"   json:"StorageSettings,omitempty"  bson:"storage-settings"`
	XXX_NoUnkeyedLiteral   struct{}           `json:"-"                                             `
	XXX_unrecognized       []byte             `json:"-"                                             `
	XXX_sizecache          int32              `json:"-"                                             `
}

func (m *CompanySettings) Reset()         { *m = CompanySettings{} }
func (m *CompanySettings) String() string { return proto.CompactTextString(m) }
func (*CompanySettings) ProtoMessage()    {}
func (*CompanySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{12}
}

func (m *CompanySettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompanySettings.Unmarshal(m, b)
}
func (m *CompanySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompanySettings.Marshal(b, m, deterministic)
}
func (m *CompanySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompanySettings.Merge(m, src)
}
func (m *CompanySettings) XXX_Size() int {
	return xxx_messageInfo_CompanySettings.Size(m)
}
func (m *CompanySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_CompanySettings.DiscardUnknown(m)
}

var xxx_messageInfo_CompanySettings proto.InternalMessageInfo

func (m *CompanySettings) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *CompanySettings) GetUserPreferenceTemplate() *Preferences {
	if m != nil {
		return m.UserPreferenceTemplate
	}
	return nil
}

func (m *CompanySettings) GetCustomIconUrl() string {
	if m != nil {
		return m.CustomIconUrl
	}
	return ""
}

func (m *CompanySettings) GetLinks() []*Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *CompanySettings) GetCompanyBannerUrl() string {
	if m != nil {
		return m.CompanyBannerUrl
	}
	return ""
}

func (m *CompanySettings) GetStorageSettings() *S3StorageSettings {
	if m != nil {
		return m.StorageSettings
	}
	return nil
}

type UserInfo struct {
	EmailAddress         string               ` protobuf:"bytes,1,opt,name=EmailAddress,proto3"      json:"EmailAddress,omitempty"  bson:"_id"`
	Permissions          *SlickPermissionInfo ` protobuf:"bytes,2,opt,name=Permissions,proto3"       json:"Permissions,omitempty"  bson:"permissions"`
	FullName             string               ` protobuf:"bytes,3,opt,name=FullName,proto3"          json:"FullName,omitempty"     bson:"fullName"`
	GivenName            string               ` protobuf:"bytes,4,opt,name=GivenName,proto3"         json:"GivenName,omitempty"    bson:"givenName"`
	FamilyName           string               ` protobuf:"bytes,5,opt,name=FamilyName,proto3"        json:"FamilyName,omitempty"   bson:"familyName"`
	AvatarUrl            string               ` protobuf:"bytes,6,opt,name=AvatarUrl,proto3"         json:"AvatarUrl,omitempty"    bson:"avatarUrl"`
	JobTitle             string               ` protobuf:"bytes,7,opt,name=JobTitle,proto3"          json:"JobTitle,omitempty"     bson:"title"`
	HashedPassword       string               ` protobuf:"bytes,8,opt,name=HashedPassword,proto3"    json:"HashedPassword,omitempty"  bson:"hashedPassword"`
	UserPreferences      *Preferences         ` protobuf:"bytes,9,opt,name=UserPreferences,proto3"   json:"UserPreferences,omitempty"  bson:"preferences"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"                                             `
	XXX_unrecognized     []byte               `json:"-"                                             `
	XXX_sizecache        int32                `json:"-"                                             `
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{13}
}

func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfo.Unmarshal(m, b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return xxx_messageInfo_UserInfo.Size(m)
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *UserInfo) GetPermissions() *SlickPermissionInfo {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *UserInfo) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *UserInfo) GetGivenName() string {
	if m != nil {
		return m.GivenName
	}
	return ""
}

func (m *UserInfo) GetFamilyName() string {
	if m != nil {
		return m.FamilyName
	}
	return ""
}

func (m *UserInfo) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *UserInfo) GetJobTitle() string {
	if m != nil {
		return m.JobTitle
	}
	return ""
}

func (m *UserInfo) GetHashedPassword() string {
	if m != nil {
		return m.HashedPassword
	}
	return ""
}

func (m *UserInfo) GetUserPreferences() *Preferences {
	if m != nil {
		return m.UserPreferences
	}
	return nil
}

type ApiTokenLoginRequest struct {
	Token                string   ` protobuf:"bytes,1,opt,name=Token,proto3"             json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *ApiTokenLoginRequest) Reset()         { *m = ApiTokenLoginRequest{} }
func (m *ApiTokenLoginRequest) String() string { return proto.CompactTextString(m) }
func (*ApiTokenLoginRequest) ProtoMessage()    {}
func (*ApiTokenLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{14}
}

func (m *ApiTokenLoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApiTokenLoginRequest.Unmarshal(m, b)
}
func (m *ApiTokenLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApiTokenLoginRequest.Marshal(b, m, deterministic)
}
func (m *ApiTokenLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiTokenLoginRequest.Merge(m, src)
}
func (m *ApiTokenLoginRequest) XXX_Size() int {
	return xxx_messageInfo_ApiTokenLoginRequest.Size(m)
}
func (m *ApiTokenLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiTokenLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApiTokenLoginRequest proto.InternalMessageInfo

func (m *ApiTokenLoginRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type PlainUserLoginRequest struct {
	UserName             string   ` protobuf:"bytes,1,opt,name=UserName,proto3"          json:"UserName,omitempty"`
	Password             string   ` protobuf:"bytes,2,opt,name=Password,proto3"          json:"Password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *PlainUserLoginRequest) Reset()         { *m = PlainUserLoginRequest{} }
func (m *PlainUserLoginRequest) String() string { return proto.CompactTextString(m) }
func (*PlainUserLoginRequest) ProtoMessage()    {}
func (*PlainUserLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{15}
}

func (m *PlainUserLoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlainUserLoginRequest.Unmarshal(m, b)
}
func (m *PlainUserLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlainUserLoginRequest.Marshal(b, m, deterministic)
}
func (m *PlainUserLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlainUserLoginRequest.Merge(m, src)
}
func (m *PlainUserLoginRequest) XXX_Size() int {
	return xxx_messageInfo_PlainUserLoginRequest.Size(m)
}
func (m *PlainUserLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlainUserLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlainUserLoginRequest proto.InternalMessageInfo

func (m *PlainUserLoginRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *PlainUserLoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	Success              bool      `protobuf:"varint,1,opt,name=Success,proto3"          json:"Success"`
	Token                string    ` protobuf:"bytes,2,opt,name=Token,proto3"             json:"Token,omitempty"`
	User                 *UserInfo ` protobuf:"bytes,3,opt,name=User,proto3"              json:"User,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"                                             `
	XXX_unrecognized     []byte    `json:"-"                                             `
	XXX_sizecache        int32     `json:"-"                                             `
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{16}
}

func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginResponse.Unmarshal(m, b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return xxx_messageInfo_LoginResponse.Size(m)
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginResponse) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

type VersionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionRequest) Reset()         { *m = VersionRequest{} }
func (m *VersionRequest) String() string { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()    {}
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{17}
}

func (m *VersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionRequest.Unmarshal(m, b)
}
func (m *VersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionRequest.Marshal(b, m, deterministic)
}
func (m *VersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionRequest.Merge(m, src)
}
func (m *VersionRequest) XXX_Size() int {
	return xxx_messageInfo_VersionRequest.Size(m)
}
func (m *VersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VersionRequest proto.InternalMessageInfo

type VersionInfoResponse struct {
	Version              string   ` protobuf:"bytes,1,opt,name=Version,proto3"           json:"Version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *VersionInfoResponse) Reset()         { *m = VersionInfoResponse{} }
func (m *VersionInfoResponse) String() string { return proto.CompactTextString(m) }
func (*VersionInfoResponse) ProtoMessage()    {}
func (*VersionInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{18}
}

func (m *VersionInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionInfoResponse.Unmarshal(m, b)
}
func (m *VersionInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionInfoResponse.Marshal(b, m, deterministic)
}
func (m *VersionInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionInfoResponse.Merge(m, src)
}
func (m *VersionInfoResponse) XXX_Size() int {
	return xxx_messageInfo_VersionInfoResponse.Size(m)
}
func (m *VersionInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionInfoResponse proto.InternalMessageInfo

func (m *VersionInfoResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type CompanySettingsRequest struct {
	CompanyName          string   ` protobuf:"bytes,1,opt,name=CompanyName,proto3"       json:"CompanyName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *CompanySettingsRequest) Reset()         { *m = CompanySettingsRequest{} }
func (m *CompanySettingsRequest) String() string { return proto.CompactTextString(m) }
func (*CompanySettingsRequest) ProtoMessage()    {}
func (*CompanySettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{19}
}

func (m *CompanySettingsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompanySettingsRequest.Unmarshal(m, b)
}
func (m *CompanySettingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompanySettingsRequest.Marshal(b, m, deterministic)
}
func (m *CompanySettingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompanySettingsRequest.Merge(m, src)
}
func (m *CompanySettingsRequest) XXX_Size() int {
	return xxx_messageInfo_CompanySettingsRequest.Size(m)
}
func (m *CompanySettingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompanySettingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompanySettingsRequest proto.InternalMessageInfo

func (m *CompanySettingsRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

type AddUserRequest struct {
	UserEmail            string                 ` protobuf:"bytes,1,opt,name=UserEmail,proto3"         json:"UserEmail,omitempty"`
	CompanyName          string                 ` protobuf:"bytes,2,opt,name=CompanyName,proto3"       json:"CompanyName,omitempty"`
	Permissions          *CompanyPermissionInfo ` protobuf:"bytes,3,opt,name=Permissions,proto3"       json:"Permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"                                             `
	XXX_unrecognized     []byte                 `json:"-"                                             `
	XXX_sizecache        int32                  `json:"-"                                             `
}

func (m *AddUserRequest) Reset()         { *m = AddUserRequest{} }
func (m *AddUserRequest) String() string { return proto.CompactTextString(m) }
func (*AddUserRequest) ProtoMessage()    {}
func (*AddUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{20}
}

func (m *AddUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddUserRequest.Unmarshal(m, b)
}
func (m *AddUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddUserRequest.Marshal(b, m, deterministic)
}
func (m *AddUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddUserRequest.Merge(m, src)
}
func (m *AddUserRequest) XXX_Size() int {
	return xxx_messageInfo_AddUserRequest.Size(m)
}
func (m *AddUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddUserRequest proto.InternalMessageInfo

func (m *AddUserRequest) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

func (m *AddUserRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *AddUserRequest) GetPermissions() *CompanyPermissionInfo {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type AvailableCompanySettingsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AvailableCompanySettingsRequest) Reset()         { *m = AvailableCompanySettingsRequest{} }
func (m *AvailableCompanySettingsRequest) String() string { return proto.CompactTextString(m) }
func (*AvailableCompanySettingsRequest) ProtoMessage()    {}
func (*AvailableCompanySettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{21}
}

func (m *AvailableCompanySettingsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AvailableCompanySettingsRequest.Unmarshal(m, b)
}
func (m *AvailableCompanySettingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AvailableCompanySettingsRequest.Marshal(b, m, deterministic)
}
func (m *AvailableCompanySettingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailableCompanySettingsRequest.Merge(m, src)
}
func (m *AvailableCompanySettingsRequest) XXX_Size() int {
	return xxx_messageInfo_AvailableCompanySettingsRequest.Size(m)
}
func (m *AvailableCompanySettingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailableCompanySettingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AvailableCompanySettingsRequest proto.InternalMessageInfo

type AvailableCompanySettings struct {
	Companies            []*CompanySettings `protobuf:"bytes,1,rep,name=Companies,proto3"         json:"Companies"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"                                             `
	XXX_unrecognized     []byte             `json:"-"                                             `
	XXX_sizecache        int32              `json:"-"                                             `
}

func (m *AvailableCompanySettings) Reset()         { *m = AvailableCompanySettings{} }
func (m *AvailableCompanySettings) String() string { return proto.CompactTextString(m) }
func (*AvailableCompanySettings) ProtoMessage()    {}
func (*AvailableCompanySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{22}
}

func (m *AvailableCompanySettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AvailableCompanySettings.Unmarshal(m, b)
}
func (m *AvailableCompanySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AvailableCompanySettings.Marshal(b, m, deterministic)
}
func (m *AvailableCompanySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailableCompanySettings.Merge(m, src)
}
func (m *AvailableCompanySettings) XXX_Size() int {
	return xxx_messageInfo_AvailableCompanySettings.Size(m)
}
func (m *AvailableCompanySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailableCompanySettings.DiscardUnknown(m)
}

var xxx_messageInfo_AvailableCompanySettings proto.InternalMessageInfo

func (m *AvailableCompanySettings) GetCompanies() []*CompanySettings {
	if m != nil {
		return m.Companies
	}
	return nil
}

type RefreshTokenRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshTokenRequest) Reset()         { *m = RefreshTokenRequest{} }
func (m *RefreshTokenRequest) String() string { return proto.CompactTextString(m) }
func (*RefreshTokenRequest) ProtoMessage()    {}
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{23}
}

func (m *RefreshTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshTokenRequest.Unmarshal(m, b)
}
func (m *RefreshTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshTokenRequest.Marshal(b, m, deterministic)
}
func (m *RefreshTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshTokenRequest.Merge(m, src)
}
func (m *RefreshTokenRequest) XXX_Size() int {
	return xxx_messageInfo_RefreshTokenRequest.Size(m)
}
func (m *RefreshTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshTokenRequest proto.InternalMessageInfo

type ProjectsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectsRequest) Reset()         { *m = ProjectsRequest{} }
func (m *ProjectsRequest) String() string { return proto.CompactTextString(m) }
func (*ProjectsRequest) ProtoMessage()    {}
func (*ProjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{24}
}

func (m *ProjectsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectsRequest.Unmarshal(m, b)
}
func (m *ProjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectsRequest.Marshal(b, m, deterministic)
}
func (m *ProjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectsRequest.Merge(m, src)
}
func (m *ProjectsRequest) XXX_Size() int {
	return xxx_messageInfo_ProjectsRequest.Size(m)
}
func (m *ProjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectsRequest proto.InternalMessageInfo

type ProjectsListResponse struct {
	Projects             []*Project ` protobuf:"bytes,1,rep,name=Projects,proto3"          json:"Projects,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"                                             `
	XXX_unrecognized     []byte     `json:"-"                                             `
	XXX_sizecache        int32      `json:"-"                                             `
}

func (m *ProjectsListResponse) Reset()         { *m = ProjectsListResponse{} }
func (m *ProjectsListResponse) String() string { return proto.CompactTextString(m) }
func (*ProjectsListResponse) ProtoMessage()    {}
func (*ProjectsListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{25}
}

func (m *ProjectsListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectsListResponse.Unmarshal(m, b)
}
func (m *ProjectsListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectsListResponse.Marshal(b, m, deterministic)
}
func (m *ProjectsListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectsListResponse.Merge(m, src)
}
func (m *ProjectsListResponse) XXX_Size() int {
	return xxx_messageInfo_ProjectsListResponse.Size(m)
}
func (m *ProjectsListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectsListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectsListResponse proto.InternalMessageInfo

func (m *ProjectsListResponse) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

type FileUploadInfo struct {
	Id                   *LinkIdentity ` protobuf:"bytes,1,opt,name=Id,proto3"                json:"Id,omitempty"`
	Size                 int64         ` protobuf:"varint,2,opt,name=Size,proto3"             json:"Size,omitempty"`
	ContentType          string        ` protobuf:"bytes,3,opt,name=ContentType,proto3"       json:"ContentType,omitempty"`
	FileName             string        ` protobuf:"bytes,4,opt,name=FileName,proto3"          json:"FileName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"                                             `
	XXX_unrecognized     []byte        `json:"-"                                             `
	XXX_sizecache        int32         `json:"-"                                             `
}

func (m *FileUploadInfo) Reset()         { *m = FileUploadInfo{} }
func (m *FileUploadInfo) String() string { return proto.CompactTextString(m) }
func (*FileUploadInfo) ProtoMessage()    {}
func (*FileUploadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{26}
}

func (m *FileUploadInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileUploadInfo.Unmarshal(m, b)
}
func (m *FileUploadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileUploadInfo.Marshal(b, m, deterministic)
}
func (m *FileUploadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileUploadInfo.Merge(m, src)
}
func (m *FileUploadInfo) XXX_Size() int {
	return xxx_messageInfo_FileUploadInfo.Size(m)
}
func (m *FileUploadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileUploadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileUploadInfo proto.InternalMessageInfo

func (m *FileUploadInfo) GetId() *LinkIdentity {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *FileUploadInfo) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileUploadInfo) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *FileUploadInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

type LinkListIdentity struct {
	Company              string   ` protobuf:"bytes,1,opt,name=Company,proto3"           json:"Company,omitempty"      bson:"company"`
	Project              string   ` protobuf:"bytes,2,opt,name=Project,proto3"           json:"Project,omitempty"      bson:"project"`
	EntityType           string   ` protobuf:"bytes,3,opt,name=EntityType,proto3"        json:"EntityType,omitempty"   bson:"type"`
	EntityId             string   ` protobuf:"bytes,4,opt,name=EntityId,proto3"          json:"EntityId,omitempty"     bson:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *LinkListIdentity) Reset()         { *m = LinkListIdentity{} }
func (m *LinkListIdentity) String() string { return proto.CompactTextString(m) }
func (*LinkListIdentity) ProtoMessage()    {}
func (*LinkListIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{27}
}

func (m *LinkListIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkListIdentity.Unmarshal(m, b)
}
func (m *LinkListIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkListIdentity.Marshal(b, m, deterministic)
}
func (m *LinkListIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkListIdentity.Merge(m, src)
}
func (m *LinkListIdentity) XXX_Size() int {
	return xxx_messageInfo_LinkListIdentity.Size(m)
}
func (m *LinkListIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkListIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_LinkListIdentity proto.InternalMessageInfo

func (m *LinkListIdentity) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *LinkListIdentity) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *LinkListIdentity) GetEntityType() string {
	if m != nil {
		return m.EntityType
	}
	return ""
}

func (m *LinkListIdentity) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

type LinkList struct {
	Links                []*Link  ` protobuf:"bytes,1,rep,name=links,proto3"             json:"links,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *LinkList) Reset()         { *m = LinkList{} }
func (m *LinkList) String() string { return proto.CompactTextString(m) }
func (*LinkList) ProtoMessage()    {}
func (*LinkList) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{28}
}

func (m *LinkList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkList.Unmarshal(m, b)
}
func (m *LinkList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkList.Marshal(b, m, deterministic)
}
func (m *LinkList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkList.Merge(m, src)
}
func (m *LinkList) XXX_Size() int {
	return xxx_messageInfo_LinkList.Size(m)
}
func (m *LinkList) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkList.DiscardUnknown(m)
}

var xxx_messageInfo_LinkList proto.InternalMessageInfo

func (m *LinkList) GetLinks() []*Link {
	if m != nil {
		return m.Links
	}
	return nil
}

type LinkUrl struct {
	Url                  string               ` protobuf:"bytes,1,opt,name=Url,proto3"               json:"Url,omitempty"`
	Expires              *timestamp.Timestamp ` protobuf:"bytes,7,opt,name=Expires,proto3"           json:"Expires,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"                                             `
	XXX_unrecognized     []byte               `json:"-"                                             `
	XXX_sizecache        int32                `json:"-"                                             `
}

func (m *LinkUrl) Reset()         { *m = LinkUrl{} }
func (m *LinkUrl) String() string { return proto.CompactTextString(m) }
func (*LinkUrl) ProtoMessage()    {}
func (*LinkUrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{29}
}

func (m *LinkUrl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkUrl.Unmarshal(m, b)
}
func (m *LinkUrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkUrl.Marshal(b, m, deterministic)
}
func (m *LinkUrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkUrl.Merge(m, src)
}
func (m *LinkUrl) XXX_Size() int {
	return xxx_messageInfo_LinkUrl.Size(m)
}
func (m *LinkUrl) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkUrl.DiscardUnknown(m)
}

var xxx_messageInfo_LinkUrl proto.InternalMessageInfo

func (m *LinkUrl) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *LinkUrl) GetExpires() *timestamp.Timestamp {
	if m != nil {
		return m.Expires
	}
	return nil
}

type LinkIdentity struct {
	Company              string   ` protobuf:"bytes,1,opt,name=Company,proto3"           json:"Company,omitempty"      bson:"company,omitempty"`
	Project              string   ` protobuf:"bytes,2,opt,name=Project,proto3"           json:"Project,omitempty"      bson:"project,omitempty"`
	EntityType           string   ` protobuf:"bytes,3,opt,name=EntityType,proto3"        json:"EntityType,omitempty"   bson:"type,omitempty"`
	EntityId             string   ` protobuf:"bytes,4,opt,name=EntityId,proto3"          json:"EntityId,omitempty"     bson:"id,omitempty"`
	Name                 string   ` protobuf:"bytes,5,opt,name=Name,proto3"              json:"Name,omitempty"         bson:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *LinkIdentity) Reset()         { *m = LinkIdentity{} }
func (m *LinkIdentity) String() string { return proto.CompactTextString(m) }
func (*LinkIdentity) ProtoMessage()    {}
func (*LinkIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{30}
}

func (m *LinkIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkIdentity.Unmarshal(m, b)
}
func (m *LinkIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkIdentity.Marshal(b, m, deterministic)
}
func (m *LinkIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkIdentity.Merge(m, src)
}
func (m *LinkIdentity) XXX_Size() int {
	return xxx_messageInfo_LinkIdentity.Size(m)
}
func (m *LinkIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_LinkIdentity proto.InternalMessageInfo

func (m *LinkIdentity) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *LinkIdentity) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *LinkIdentity) GetEntityType() string {
	if m != nil {
		return m.EntityType
	}
	return ""
}

func (m *LinkIdentity) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *LinkIdentity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Link struct {
	Id                   *LinkIdentity        ` protobuf:"bytes,1,opt,name=Id,proto3"                json:"Id,omitempty"           bson:"_id"`
	Type                 string               ` protobuf:"bytes,2,opt,name=Type,proto3"              json:"Type,omitempty"         bson:"type"`
	Order                int32                ` protobuf:"varint,3,opt,name=Order,proto3"            json:"Order,omitempty"        bson:"order"`
	Url                  string               ` protobuf:"bytes,4,opt,name=Url,proto3"               json:"Url,omitempty"          bson:"url"`
	Creator              string               ` protobuf:"bytes,5,opt,name=Creator,proto3"           json:"Creator,omitempty"      bson:"creator"`
	FileInfo             *SlickFile           ` protobuf:"bytes,6,opt,name=FileInfo,proto3"          json:"FileInfo,omitempty"     bson:"fileinfo"`
	Updated              *timestamp.Timestamp ` protobuf:"bytes,7,opt,name=Updated,proto3"           json:"Updated,omitempty"      bson:"updated"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"                                             `
	XXX_unrecognized     []byte               `json:"-"                                             `
	XXX_sizecache        int32                `json:"-"                                             `
}

func (m *Link) Reset()         { *m = Link{} }
func (m *Link) String() string { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()    {}
func (*Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{31}
}

func (m *Link) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Link.Unmarshal(m, b)
}
func (m *Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Link.Marshal(b, m, deterministic)
}
func (m *Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Link.Merge(m, src)
}
func (m *Link) XXX_Size() int {
	return xxx_messageInfo_Link.Size(m)
}
func (m *Link) XXX_DiscardUnknown() {
	xxx_messageInfo_Link.DiscardUnknown(m)
}

var xxx_messageInfo_Link proto.InternalMessageInfo

func (m *Link) GetId() *LinkIdentity {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Link) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Link) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Link) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Link) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Link) GetFileInfo() *SlickFile {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

func (m *Link) GetUpdated() *timestamp.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

type SlickFile struct {
	Path                 string   ` protobuf:"bytes,1,opt,name=Path,proto3"              json:"Path,omitempty"         bson:"path"`
	FileName             string   ` protobuf:"bytes,2,opt,name=FileName,proto3"          json:"FileName,omitempty"     bson:"filename"`
	ContentType          string   ` protobuf:"bytes,3,opt,name=ContentType,proto3"       json:"ContentType,omitempty"  bson:"contenttype"`
	Size                 int64    ` protobuf:"varint,4,opt,name=Size,proto3"             json:"Size,omitempty"         bson:"size"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *SlickFile) Reset()         { *m = SlickFile{} }
func (m *SlickFile) String() string { return proto.CompactTextString(m) }
func (*SlickFile) ProtoMessage()    {}
func (*SlickFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{32}
}

func (m *SlickFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SlickFile.Unmarshal(m, b)
}
func (m *SlickFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SlickFile.Marshal(b, m, deterministic)
}
func (m *SlickFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlickFile.Merge(m, src)
}
func (m *SlickFile) XXX_Size() int {
	return xxx_messageInfo_SlickFile.Size(m)
}
func (m *SlickFile) XXX_DiscardUnknown() {
	xxx_messageInfo_SlickFile.DiscardUnknown(m)
}

var xxx_messageInfo_SlickFile proto.InternalMessageInfo

func (m *SlickFile) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SlickFile) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *SlickFile) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *SlickFile) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type ProjectIdentity struct {
	Company              string   ` protobuf:"bytes,1,opt,name=Company,proto3"           json:"Company,omitempty"      bson:"company"`
	Name                 string   ` protobuf:"bytes,2,opt,name=Name,proto3"              json:"Name,omitempty"         bson:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *ProjectIdentity) Reset()         { *m = ProjectIdentity{} }
func (m *ProjectIdentity) String() string { return proto.CompactTextString(m) }
func (*ProjectIdentity) ProtoMessage()    {}
func (*ProjectIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{33}
}

func (m *ProjectIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectIdentity.Unmarshal(m, b)
}
func (m *ProjectIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectIdentity.Marshal(b, m, deterministic)
}
func (m *ProjectIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectIdentity.Merge(m, src)
}
func (m *ProjectIdentity) XXX_Size() int {
	return xxx_messageInfo_ProjectIdentity.Size(m)
}
func (m *ProjectIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectIdentity proto.InternalMessageInfo

func (m *ProjectIdentity) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *ProjectIdentity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Project struct {
	Id                   *ProjectIdentity     ` protobuf:"bytes,1,opt,name=Id,proto3"                json:"Id,omitempty"           bson:"_id"`
	Links                []*Link              ` protobuf:"bytes,2,rep,name=Links,proto3"             json:"Links,omitempty"        bson:"links"`
	AutomationTools      []string             ` protobuf:"bytes,3,rep,name=AutomationTools,proto3"   json:"AutomationTools,omitempty"  bson:"automationTools"`
	Tags                 []string             ` protobuf:"bytes,4,rep,name=Tags,proto3"              json:"Tags,omitempty"         bson:"tags"`
	Attributes           map[string]string    `   protobuf:"bytes,5,rep,name=Attributes,proto3"        json:"Attributes,omitempty"   protobuf_key:"bytes,1,opt,name=key,proto3"  protobuf_val:"bytes,2,opt,name=value,proto3"  bson:"attributes"`
	LastUpdated          *timestamp.Timestamp ` protobuf:"bytes,6,opt,name=LastUpdated,proto3"       json:"LastUpdated,omitempty"  bson:"lastUpdated"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"                                             `
	XXX_unrecognized     []byte               `json:"-"                                             `
	XXX_sizecache        int32                `json:"-"                                             `
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{34}
}

func (m *Project) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Project.Unmarshal(m, b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Project.Marshal(b, m, deterministic)
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return xxx_messageInfo_Project.Size(m)
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetId() *ProjectIdentity {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Project) GetLinks() []*Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Project) GetAutomationTools() []string {
	if m != nil {
		return m.AutomationTools
	}
	return nil
}

func (m *Project) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Project) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Project) GetLastUpdated() *timestamp.Timestamp {
	if m != nil {
		return m.LastUpdated
	}
	return nil
}

type ComponentIdentity struct {
	Project              *ProjectIdentity ` protobuf:"bytes,1,opt,name=Project,proto3"           json:"Project,omitempty"      bson:"project"`
	Name                 string           ` protobuf:"bytes,2,opt,name=Name,proto3"              json:"Name,omitempty"         bson:"name"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"                                             `
	XXX_unrecognized     []byte           `json:"-"                                             `
	XXX_sizecache        int32            `json:"-"                                             `
}

func (m *ComponentIdentity) Reset()         { *m = ComponentIdentity{} }
func (m *ComponentIdentity) String() string { return proto.CompactTextString(m) }
func (*ComponentIdentity) ProtoMessage()    {}
func (*ComponentIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{35}
}

func (m *ComponentIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComponentIdentity.Unmarshal(m, b)
}
func (m *ComponentIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComponentIdentity.Marshal(b, m, deterministic)
}
func (m *ComponentIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentIdentity.Merge(m, src)
}
func (m *ComponentIdentity) XXX_Size() int {
	return xxx_messageInfo_ComponentIdentity.Size(m)
}
func (m *ComponentIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentIdentity proto.InternalMessageInfo

func (m *ComponentIdentity) GetProject() *ProjectIdentity {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *ComponentIdentity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Component struct {
	Id                   *ComponentIdentity `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description          string             `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Component) Reset()         { *m = Component{} }
func (m *Component) String() string { return proto.CompactTextString(m) }
func (*Component) ProtoMessage()    {}
func (*Component) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{36}
}

func (m *Component) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Component.Unmarshal(m, b)
}
func (m *Component) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Component.Marshal(b, m, deterministic)
}
func (m *Component) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Component.Merge(m, src)
}
func (m *Component) XXX_Size() int {
	return xxx_messageInfo_Component.Size(m)
}
func (m *Component) XXX_DiscardUnknown() {
	xxx_messageInfo_Component.DiscardUnknown(m)
}

var xxx_messageInfo_Component proto.InternalMessageInfo

func (m *Component) GetId() *ComponentIdentity {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Component) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Feature struct {
	Id                   []byte   ` protobuf:"bytes,1,opt,name=Id,proto3"                json:"Id,omitempty"           bson:"_id,omitempty"`
	Name                 string   ` protobuf:"bytes,2,opt,name=Name,proto3"              json:"Name,omitempty"         bson:"name"`
	ComponentId          []byte   ` protobuf:"bytes,3,opt,name=ComponentId,proto3"       json:"ComponentId,omitempty"`
	ProjectId            string   ` protobuf:"bytes,4,opt,name=ProjectId,proto3"         json:"ProjectId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{37}
}

func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetComponentId() []byte {
	if m != nil {
		return m.ComponentId
	}
	return nil
}

func (m *Feature) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

type Testcase struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	AutomationKey        string   `protobuf:"bytes,3,opt,name=AutomationKey,proto3" json:"AutomationKey,omitempty"`
	AutomationTool       string   `protobuf:"bytes,4,opt,name=AutomationTool,proto3" json:"AutomationTool,omitempty"`
	ComponentId          []byte   `protobuf:"bytes,5,opt,name=ComponentId,proto3" json:"ComponentId,omitempty"`
	Deleted              bool     `protobuf:"varint,6,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	ImportanceRating     int32    `protobuf:"varint,7,opt,name=ImportanceRating,proto3" json:"ImportanceRating,omitempty"`
	InactiveNotes        []string `protobuf:"bytes,8,rep,name=InactiveNotes,proto3" json:"InactiveNotes,omitempty"`
	ProjectId            string   `protobuf:"bytes,9,opt,name=ProjectId,proto3" json:"ProjectId,omitempty"`
	StabilityRating      int32    `protobuf:"varint,10,opt,name=StabilityRating,proto3" json:"StabilityRating,omitempty"`
	Steps                []string `protobuf:"bytes,11,rep,name=Steps,proto3" json:"Steps,omitempty"`
	Tags                 []string `protobuf:"bytes,12,rep,name=Tags,proto3" json:"Tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Testcase) Reset()         { *m = Testcase{} }
func (m *Testcase) String() string { return proto.CompactTextString(m) }
func (*Testcase) ProtoMessage()    {}
func (*Testcase) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{38}
}

func (m *Testcase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Testcase.Unmarshal(m, b)
}
func (m *Testcase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Testcase.Marshal(b, m, deterministic)
}
func (m *Testcase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Testcase.Merge(m, src)
}
func (m *Testcase) XXX_Size() int {
	return xxx_messageInfo_Testcase.Size(m)
}
func (m *Testcase) XXX_DiscardUnknown() {
	xxx_messageInfo_Testcase.DiscardUnknown(m)
}

var xxx_messageInfo_Testcase proto.InternalMessageInfo

func (m *Testcase) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Testcase) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Testcase) GetAutomationKey() string {
	if m != nil {
		return m.AutomationKey
	}
	return ""
}

func (m *Testcase) GetAutomationTool() string {
	if m != nil {
		return m.AutomationTool
	}
	return ""
}

func (m *Testcase) GetComponentId() []byte {
	if m != nil {
		return m.ComponentId
	}
	return nil
}

func (m *Testcase) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *Testcase) GetImportanceRating() int32 {
	if m != nil {
		return m.ImportanceRating
	}
	return 0
}

func (m *Testcase) GetInactiveNotes() []string {
	if m != nil {
		return m.InactiveNotes
	}
	return nil
}

func (m *Testcase) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Testcase) GetStabilityRating() int32 {
	if m != nil {
		return m.StabilityRating
	}
	return 0
}

func (m *Testcase) GetSteps() []string {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Testcase) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Testplans struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Testplans) Reset()         { *m = Testplans{} }
func (m *Testplans) String() string { return proto.CompactTextString(m) }
func (*Testplans) ProtoMessage()    {}
func (*Testplans) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{39}
}

func (m *Testplans) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Testplans.Unmarshal(m, b)
}
func (m *Testplans) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Testplans.Marshal(b, m, deterministic)
}
func (m *Testplans) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Testplans.Merge(m, src)
}
func (m *Testplans) XXX_Size() int {
	return xxx_messageInfo_Testplans.Size(m)
}
func (m *Testplans) XXX_DiscardUnknown() {
	xxx_messageInfo_Testplans.DiscardUnknown(m)
}

var xxx_messageInfo_Testplans proto.InternalMessageInfo

func (m *Testplans) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Testplans) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Testruns struct {
	Id                   []byte               `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ProjectId            string               `protobuf:"bytes,3,opt,name=ProjectId,proto3" json:"ProjectId,omitempty"`
	Build                string               `protobuf:"bytes,4,opt,name=Build,proto3" json:"Build,omitempty"`
	RunStarted           *timestamp.Timestamp `protobuf:"bytes,5,opt,name=RunStarted,proto3" json:"RunStarted,omitempty"`
	RunFinished          *timestamp.Timestamp `protobuf:"bytes,6,opt,name=RunFinished,proto3" json:"RunFinished,omitempty"`
	State                string               `protobuf:"bytes,7,opt,name=State,proto3" json:"State,omitempty"`
	TestplanId           string               `protobuf:"bytes,8,opt,name=TestplanId,proto3" json:"TestplanId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Testruns) Reset()         { *m = Testruns{} }
func (m *Testruns) String() string { return proto.CompactTextString(m) }
func (*Testruns) ProtoMessage()    {}
func (*Testruns) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{40}
}

func (m *Testruns) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Testruns.Unmarshal(m, b)
}
func (m *Testruns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Testruns.Marshal(b, m, deterministic)
}
func (m *Testruns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Testruns.Merge(m, src)
}
func (m *Testruns) XXX_Size() int {
	return xxx_messageInfo_Testruns.Size(m)
}
func (m *Testruns) XXX_DiscardUnknown() {
	xxx_messageInfo_Testruns.DiscardUnknown(m)
}

var xxx_messageInfo_Testruns proto.InternalMessageInfo

func (m *Testruns) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Testruns) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Testruns) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Testruns) GetBuild() string {
	if m != nil {
		return m.Build
	}
	return ""
}

func (m *Testruns) GetRunStarted() *timestamp.Timestamp {
	if m != nil {
		return m.RunStarted
	}
	return nil
}

func (m *Testruns) GetRunFinished() *timestamp.Timestamp {
	if m != nil {
		return m.RunFinished
	}
	return nil
}

func (m *Testruns) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Testruns) GetTestplanId() string {
	if m != nil {
		return m.TestplanId
	}
	return ""
}

type AgentId struct {
	Company              string   ` protobuf:"bytes,1,opt,name=Company,proto3"           json:"Company,omitempty"      bson:"company"`
	Name                 string   ` protobuf:"bytes,2,opt,name=Name,proto3"              json:"Name,omitempty"         bson:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *AgentId) Reset()         { *m = AgentId{} }
func (m *AgentId) String() string { return proto.CompactTextString(m) }
func (*AgentId) ProtoMessage()    {}
func (*AgentId) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{41}
}

func (m *AgentId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgentId.Unmarshal(m, b)
}
func (m *AgentId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgentId.Marshal(b, m, deterministic)
}
func (m *AgentId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentId.Merge(m, src)
}
func (m *AgentId) XXX_Size() int {
	return xxx_messageInfo_AgentId.Size(m)
}
func (m *AgentId) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentId.DiscardUnknown(m)
}

var xxx_messageInfo_AgentId proto.InternalMessageInfo

func (m *AgentId) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *AgentId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AgentCurrentTest struct {
	Name                 string   ` protobuf:"bytes,1,opt,name=Name,proto3"              json:"Name,omitempty"         bson:"name"`
	Url                  string   ` protobuf:"bytes,2,opt,name=Url,proto3"               json:"Url,omitempty"          bson:"url"`
	AutomationId         string   ` protobuf:"bytes,3,opt,name=AutomationId,proto3"      json:"AutomationId,omitempty"  bson:"automationId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"                                             `
	XXX_unrecognized     []byte   `json:"-"                                             `
	XXX_sizecache        int32    `json:"-"                                             `
}

func (m *AgentCurrentTest) Reset()         { *m = AgentCurrentTest{} }
func (m *AgentCurrentTest) String() string { return proto.CompactTextString(m) }
func (*AgentCurrentTest) ProtoMessage()    {}
func (*AgentCurrentTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{42}
}

func (m *AgentCurrentTest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgentCurrentTest.Unmarshal(m, b)
}
func (m *AgentCurrentTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgentCurrentTest.Marshal(b, m, deterministic)
}
func (m *AgentCurrentTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentCurrentTest.Merge(m, src)
}
func (m *AgentCurrentTest) XXX_Size() int {
	return xxx_messageInfo_AgentCurrentTest.Size(m)
}
func (m *AgentCurrentTest) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentCurrentTest.DiscardUnknown(m)
}

var xxx_messageInfo_AgentCurrentTest proto.InternalMessageInfo

func (m *AgentCurrentTest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AgentCurrentTest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AgentCurrentTest) GetAutomationId() string {
	if m != nil {
		return m.AutomationId
	}
	return ""
}

type AgentStatus struct {
	Id                   *AgentId             ` protobuf:"bytes,1,opt,name=Id,proto3"                json:"Id,omitempty"           bson:"_id"`
	LastCheckin          *timestamp.Timestamp ` protobuf:"bytes,2,opt,name=LastCheckin,proto3"       json:"LastCheckin,omitempty"  bson:"checkin"`
	RunStatus            string               ` protobuf:"bytes,3,opt,name=RunStatus,proto3"         json:"RunStatus,omitempty"    bson:"runstatus"`
	Groups               []string             ` protobuf:"bytes,4,rep,name=Groups,proto3"            json:"Groups,omitempty"       bson:"groups"`
	CurrentTest          *AgentCurrentTest    ` protobuf:"bytes,5,opt,name=CurrentTest,proto3"       json:"CurrentTest,omitempty"  bson:"testcase"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"                                             `
	XXX_unrecognized     []byte               `json:"-"                                             `
	XXX_sizecache        int32                `json:"-"                                             `
}

func (m *AgentStatus) Reset()         { *m = AgentStatus{} }
func (m *AgentStatus) String() string { return proto.CompactTextString(m) }
func (*AgentStatus) ProtoMessage()    {}
func (*AgentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_645db33d074d42ff, []int{43}
}

func (m *AgentStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgentStatus.Unmarshal(m, b)
}
func (m *AgentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgentStatus.Marshal(b, m, deterministic)
}
func (m *AgentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentStatus.Merge(m, src)
}
func (m *AgentStatus) XXX_Size() int {
	return xxx_messageInfo_AgentStatus.Size(m)
}
func (m *AgentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AgentStatus proto.InternalMessageInfo

func (m *AgentStatus) GetId() *AgentId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AgentStatus) GetLastCheckin() *timestamp.Timestamp {
	if m != nil {
		return m.LastCheckin
	}
	return nil
}

func (m *AgentStatus) GetRunStatus() string {
	if m != nil {
		return m.RunStatus
	}
	return ""
}

func (m *AgentStatus) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *AgentStatus) GetCurrentTest() *AgentCurrentTest {
	if m != nil {
		return m.CurrentTest
	}
	return nil
}

func init() {
	proto.RegisterType((*IsAuthorizedRequest)(nil), "slickqa.IsAuthorizedRequest")
	proto.RegisterType((*IsAuthorizedResponse)(nil), "slickqa.IsAuthorizedResponse")
	proto.RegisterType((*CurrentUserRequest)(nil), "slickqa.CurrentUserRequest")
	proto.RegisterType((*UserInfoRequest)(nil), "slickqa.UserInfoRequest")
	proto.RegisterType((*UsersForCompanyQueryRequest)(nil), "slickqa.UsersForCompanyQueryRequest")
	proto.RegisterType((*UsersForProjectQueryRequest)(nil), "slickqa.UsersForProjectQueryRequest")
	proto.RegisterType((*UsersQueryResponse)(nil), "slickqa.UsersQueryResponse")
	proto.RegisterType((*ProjectPermissionInfo)(nil), "slickqa.ProjectPermissionInfo")
	proto.RegisterType((*CompanyPermissionInfo)(nil), "slickqa.CompanyPermissionInfo")
	proto.RegisterType((*SlickPermissionInfo)(nil), "slickqa.SlickPermissionInfo")
	proto.RegisterType((*Preferences)(nil), "slickqa.Preferences")
	proto.RegisterType((*S3StorageSettings)(nil), "slickqa.S3StorageSettings")
	proto.RegisterType((*CompanySettings)(nil), "slickqa.CompanySettings")
	proto.RegisterType((*UserInfo)(nil), "slickqa.UserInfo")
	proto.RegisterType((*ApiTokenLoginRequest)(nil), "slickqa.ApiTokenLoginRequest")
	proto.RegisterType((*PlainUserLoginRequest)(nil), "slickqa.PlainUserLoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "slickqa.LoginResponse")
	proto.RegisterType((*VersionRequest)(nil), "slickqa.VersionRequest")
	proto.RegisterType((*VersionInfoResponse)(nil), "slickqa.VersionInfoResponse")
	proto.RegisterType((*CompanySettingsRequest)(nil), "slickqa.CompanySettingsRequest")
	proto.RegisterType((*AddUserRequest)(nil), "slickqa.AddUserRequest")
	proto.RegisterType((*AvailableCompanySettingsRequest)(nil), "slickqa.AvailableCompanySettingsRequest")
	proto.RegisterType((*AvailableCompanySettings)(nil), "slickqa.AvailableCompanySettings")
	proto.RegisterType((*RefreshTokenRequest)(nil), "slickqa.RefreshTokenRequest")
	proto.RegisterType((*ProjectsRequest)(nil), "slickqa.ProjectsRequest")
	proto.RegisterType((*ProjectsListResponse)(nil), "slickqa.ProjectsListResponse")
	proto.RegisterType((*FileUploadInfo)(nil), "slickqa.FileUploadInfo")
	proto.RegisterType((*LinkListIdentity)(nil), "slickqa.LinkListIdentity")
	proto.RegisterType((*LinkList)(nil), "slickqa.LinkList")
	proto.RegisterType((*LinkUrl)(nil), "slickqa.LinkUrl")
	proto.RegisterType((*LinkIdentity)(nil), "slickqa.LinkIdentity")
	proto.RegisterType((*Link)(nil), "slickqa.Link")
	proto.RegisterType((*SlickFile)(nil), "slickqa.SlickFile")
	proto.RegisterType((*ProjectIdentity)(nil), "slickqa.ProjectIdentity")
	proto.RegisterType((*Project)(nil), "slickqa.Project")
	proto.RegisterMapType((map[string]string)(nil), "slickqa.Project.AttributesEntry")
	proto.RegisterType((*ComponentIdentity)(nil), "slickqa.ComponentIdentity")
	proto.RegisterType((*Component)(nil), "slickqa.Component")
	proto.RegisterType((*Feature)(nil), "slickqa.Feature")
	proto.RegisterType((*Testcase)(nil), "slickqa.Testcase")
	proto.RegisterType((*Testplans)(nil), "slickqa.Testplans")
	proto.RegisterType((*Testruns)(nil), "slickqa.Testruns")
	proto.RegisterType((*AgentId)(nil), "slickqa.AgentId")
	proto.RegisterType((*AgentCurrentTest)(nil), "slickqa.AgentCurrentTest")
	proto.RegisterType((*AgentStatus)(nil), "slickqa.AgentStatus")
}

func init() { proto.RegisterFile("slick.proto", fileDescriptor_645db33d074d42ff) }

var fileDescriptor_645db33d074d42ff = []byte{
	// 2645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5a, 0x4b, 0x73, 0x1b, 0xc7,
	0xf1, 0xaf, 0x05, 0x09, 0x3e, 0x1a, 0xe0, 0x43, 0x23, 0x52, 0x86, 0x20, 0xfd, 0x25, 0x7a, 0x2c,
	0xdb, 0xfc, 0xd3, 0x36, 0x50, 0xa1, 0x1d, 0xc7, 0x61, 0x6c, 0xcb, 0xa0, 0x28, 0xd2, 0x70, 0x18,
	0x5b, 0x5e, 0x52, 0xb1, 0xf3, 0x70, 0x2a, 0x4b, 0xec, 0x90, 0x5c, 0x71, 0xb1, 0x0b, 0xed, 0xce,
	0x52, 0xa2, 0x58, 0xbc, 0xa8, 0x52, 0x95, 0xf2, 0x2d, 0xa5, 0xe4, 0xe2, 0x0f, 0x90, 0x4b, 0xae,
	0x39, 0xe5, 0x92, 0x2f, 0x91, 0xca, 0x3d, 0x87, 0xa4, 0x52, 0xc9, 0x67, 0xc8, 0x21, 0x35, 0x3d,
	0x33, 0xbb, 0xb3, 0x0b, 0x80, 0x84, 0x12, 0x55, 0x6e, 0xe8, 0x9e, 0xd9, 0x7e, 0xfc, 0xba, 0xa7,
	0x7b, 0xa6, 0x49, 0xa8, 0xc4, 0xbe, 0xd7, 0x39, 0x6a, 0xf4, 0xa2, 0x90, 0x87, 0x64, 0x12, 0x89,
	0x87, 0x4e, 0xfd, 0xe6, 0x41, 0x18, 0x1e, 0xf8, 0xac, 0x89, 0xec, 0xbd, 0x64, 0xbf, 0xc9, 0xbd,
	0x2e, 0x8b, 0xb9, 0xd3, 0xed, 0xc9, 0x9d, 0xf5, 0xeb, 0x6a, 0x83, 0xd3, 0xf3, 0x9a, 0x4e, 0x10,
	0x84, 0xdc, 0xe1, 0x5e, 0x18, 0xc4, 0x72, 0x95, 0x9e, 0xc0, 0xe5, 0x76, 0xdc, 0x4a, 0xf8, 0x61,
	0x18, 0x79, 0x4f, 0x98, 0x6b, 0xb3, 0x87, 0x09, 0x8b, 0x39, 0x59, 0x82, 0xca, 0x9d, 0xb0, 0xdb,
	0x73, 0x82, 0x93, 0x4f, 0x9d, 0x2e, 0xab, 0x59, 0x4b, 0xd6, 0xf2, 0xb4, 0x6d, 0xb2, 0xc4, 0x8e,
	0x7b, 0x51, 0xf8, 0x80, 0x75, 0x38, 0xee, 0x28, 0xc9, 0x1d, 0x06, 0x8b, 0xdc, 0x00, 0xb8, 0xc7,
	0xa2, 0xae, 0x17, 0xc7, 0x5e, 0x18, 0xd4, 0xc6, 0x96, 0xac, 0xe5, 0x19, 0xdb, 0xe0, 0xd0, 0x4f,
	0x60, 0x21, 0xaf, 0x3a, 0xee, 0x85, 0x41, 0xcc, 0x48, 0x0d, 0x26, 0x5b, 0xbe, 0x1f, 0x3e, 0x62,
	0x2e, 0xea, 0x9d, 0xb2, 0x35, 0x29, 0x56, 0x7e, 0xc0, 0xe2, 0xd8, 0x39, 0xd0, 0xfa, 0x34, 0x49,
	0x17, 0x80, 0xdc, 0x49, 0xa2, 0x88, 0x05, 0xfc, 0x7e, 0xcc, 0x22, 0xe5, 0x05, 0xfd, 0x36, 0xcc,
	0x09, 0xb2, 0x1d, 0xec, 0x87, 0xda, 0x31, 0x0a, 0xd5, 0xbb, 0x5d, 0xc7, 0xf3, 0x5b, 0xae, 0x1b,
	0xb1, 0x38, 0x56, 0x9e, 0xe5, 0x78, 0xf4, 0x36, 0x5c, 0x13, 0x9f, 0xc5, 0x9b, 0x61, 0xa4, 0x3c,
	0xfe, 0x3c, 0x61, 0xd1, 0xc9, 0xc8, 0xd8, 0x50, 0x27, 0x13, 0xa0, 0x00, 0x79, 0x3e, 0x01, 0x17,
	0x83, 0x4b, 0x3f, 0x00, 0x82, 0x2a, 0x94, 0x60, 0x05, 0xdd, 0xeb, 0x50, 0x4e, 0x04, 0xb7, 0x66,
	0x2d, 0x8d, 0x2d, 0x57, 0x56, 0x2f, 0x35, 0x54, 0x96, 0x34, 0x52, 0x18, 0xe4, 0x3a, 0xfd, 0x0c,
	0x16, 0x95, 0xb4, 0x2c, 0x20, 0x62, 0xbd, 0xa8, 0xd9, 0xea, 0x0f, 0xeb, 0x02, 0x94, 0xed, 0xd0,
	0x67, 0x71, 0xad, 0xb4, 0x34, 0xb6, 0x3c, 0x6d, 0x4b, 0x82, 0x7e, 0x63, 0xc1, 0xa2, 0xf2, 0xa0,
	0x5f, 0xe2, 0x05, 0xde, 0x52, 0xa8, 0x2a, 0xb2, 0xe5, 0x76, 0xbd, 0x00, 0xdd, 0x9d, 0xb1, 0x73,
	0x3c, 0xb2, 0x06, 0x53, 0xca, 0x88, 0xb8, 0x36, 0x86, 0xce, 0xdd, 0x48, 0x9d, 0x1b, 0xe8, 0x89,
	0x9d, 0xee, 0xa7, 0x31, 0x5c, 0xde, 0x11, 0x5b, 0x0b, 0x86, 0xdd, 0x00, 0x40, 0xb6, 0x54, 0x6a,
	0xc9, 0xfc, 0xcc, 0x38, 0xe4, 0x7d, 0x98, 0x96, 0x26, 0x78, 0xca, 0x59, 0x53, 0xe7, 0x40, 0x5f,
	0xed, 0xec, 0x03, 0xfa, 0x2b, 0x4b, 0x20, 0xc9, 0xf6, 0x59, 0xc4, 0x82, 0x0e, 0x8b, 0x45, 0xee,
	0x7e, 0x1c, 0x76, 0xd9, 0xfd, 0xc8, 0x57, 0x10, 0x68, 0x52, 0x00, 0xba, 0x7b, 0xc8, 0xd2, 0x30,
	0x4b, 0x82, 0xdc, 0x82, 0x99, 0x75, 0xa7, 0x73, 0x74, 0x10, 0x85, 0x49, 0xe0, 0x8a, 0xaf, 0xc6,
	0x70, 0x35, 0xcf, 0x24, 0x6f, 0xc0, 0xf4, 0xa6, 0x73, 0x1c, 0x46, 0x1e, 0x67, 0x71, 0x6d, 0x1c,
	0x6d, 0x9c, 0x49, 0x6d, 0xdc, 0xf6, 0x82, 0x23, 0x3b, 0x5b, 0x17, 0x31, 0xba, 0xb4, 0xf3, 0xf6,
	0x0e, 0x0f, 0x23, 0xe7, 0x80, 0xed, 0x30, 0xce, 0xbd, 0xe0, 0x00, 0x0d, 0x5b, 0x77, 0x62, 0xd3,
	0x30, 0x45, 0x92, 0xeb, 0x30, 0xdd, 0xea, 0x74, 0x58, 0x1c, 0x7f, 0x9f, 0x9d, 0x28, 0xe3, 0x32,
	0x86, 0x58, 0xdd, 0x61, 0x9d, 0x88, 0x71, 0xb1, 0x2a, 0x8d, 0xcb, 0x18, 0xe4, 0x0a, 0x4c, 0xac,
	0x27, 0x9d, 0x23, 0xc6, 0x6b, 0xe3, 0xb8, 0xa4, 0x28, 0xc1, 0x17, 0xa8, 0x78, 0x8f, 0x6b, 0x65,
	0xc9, 0x97, 0x14, 0xfd, 0x63, 0x09, 0xe6, 0x14, 0xa6, 0xa9, 0x65, 0x17, 0x67, 0xce, 0x36, 0x5c,
	0x11, 0x99, 0x9d, 0xe1, 0xbc, 0xcb, 0xba, 0x3d, 0xdf, 0xe1, 0x12, 0xcb, 0xca, 0xea, 0x82, 0x91,
	0x23, 0x69, 0x28, 0xec, 0x21, 0xdf, 0x08, 0xc8, 0xef, 0x24, 0x31, 0x0f, 0xbb, 0xed, 0x4e, 0x18,
	0x18, 0x90, 0xe7, 0x98, 0xe4, 0x15, 0x28, 0x0b, 0x60, 0x87, 0xc0, 0x2d, 0xd7, 0xc8, 0x0a, 0xcc,
	0x2b, 0x3b, 0xd7, 0x9d, 0x20, 0x60, 0x91, 0x90, 0x26, 0x1d, 0xee, 0xe3, 0x93, 0x0d, 0x98, 0x2b,
	0xc4, 0xa4, 0x36, 0x81, 0xd6, 0xd7, 0x53, 0xd1, 0x7d, 0x51, 0xb3, 0x8b, 0x9f, 0xd0, 0x7f, 0x96,
	0x60, 0x4a, 0x9f, 0xf2, 0x51, 0xaa, 0x1c, 0xf9, 0x10, 0x2a, 0x59, 0xf6, 0xc6, 0x0a, 0xb0, 0xeb,
	0x99, 0xca, 0xfe, 0x13, 0x63, 0x9b, 0x1f, 0x90, 0x3a, 0x4c, 0x6d, 0x26, 0xbe, 0x8f, 0xa1, 0x91,
	0x40, 0xa5, 0xb4, 0xc8, 0x8d, 0x2d, 0xef, 0x98, 0x05, 0xb8, 0x28, 0x13, 0x20, 0x63, 0x88, 0x83,
	0xb7, 0xe9, 0x74, 0x3d, 0x5f, 0x86, 0x55, 0xc2, 0x62, 0x70, 0x30, 0xef, 0x8e, 0x1d, 0xee, 0x20,
	0x6a, 0x13, 0x2a, 0xef, 0x34, 0x43, 0xe8, 0xfd, 0x24, 0xdc, 0xdb, 0xf5, 0xb8, 0xcf, 0x6a, 0x93,
	0x52, 0xaf, 0xa6, 0xc9, 0x6b, 0x30, 0xfb, 0xb1, 0x13, 0x1f, 0x32, 0xf7, 0x9e, 0x13, 0xc7, 0x8f,
	0xc2, 0xc8, 0xad, 0x4d, 0xe1, 0x8e, 0x02, 0x97, 0x7c, 0x28, 0x1b, 0x83, 0x91, 0x14, 0xb5, 0xe9,
	0x73, 0x12, 0xa6, 0xb8, 0x99, 0xbe, 0x09, 0x0b, 0xad, 0x9e, 0xb7, 0x1b, 0x1e, 0xb1, 0x60, 0x3b,
	0x3c, 0xf0, 0x02, 0x5d, 0xd9, 0xc5, 0x51, 0x16, 0x4c, 0x05, 0xb8, 0x24, 0xb0, 0xd8, 0xfa, 0x8e,
	0x17, 0x08, 0x29, 0xb9, 0xed, 0x75, 0x19, 0x32, 0x23, 0xbb, 0x53, 0x5a, 0xac, 0xa5, 0x4e, 0xc8,
	0xb3, 0x97, 0xd2, 0x74, 0x1f, 0x66, 0x94, 0x9c, 0xac, 0x65, 0xee, 0x24, 0x78, 0x32, 0x75, 0xcb,
	0x54, 0x64, 0x66, 0x51, 0xc9, 0xb0, 0x88, 0xbc, 0x0a, 0xe3, 0x42, 0x11, 0xc6, 0x6d, 0x60, 0x9b,
	0xc0, 0x65, 0x3a, 0x0f, 0xb3, 0x3f, 0x64, 0x91, 0x08, 0xb7, 0xee, 0xa8, 0x4d, 0xb8, 0xac, 0x38,
	0xb2, 0xa9, 0x66, 0xfa, 0x15, 0x5b, 0xd7, 0x10, 0x45, 0xd2, 0x35, 0xb8, 0x52, 0x38, 0xd6, 0xa3,
	0xb7, 0xd1, 0x67, 0x16, 0xcc, 0xb6, 0x5c, 0xd7, 0xe8, 0xe8, 0x22, 0x35, 0x04, 0x89, 0x89, 0xac,
	0x3e, 0xc9, 0x18, 0x45, 0x91, 0xa5, 0xfe, 0x82, 0xf1, 0x51, 0x3e, 0xe9, 0xa5, 0xff, 0x17, 0x55,
	0x75, 0xf3, 0x13, 0xfa, 0x32, 0xdc, 0x6c, 0x1d, 0x3b, 0x9e, 0xef, 0xec, 0xf9, 0x6c, 0xb0, 0x67,
	0xd4, 0x86, 0xda, 0xb0, 0x2d, 0xe4, 0x5d, 0xb3, 0xa9, 0xc8, 0x2e, 0x5d, 0x2b, 0xaa, 0x4f, 0xe5,
	0x19, 0xed, 0x64, 0x11, 0x2e, 0xdb, 0x6c, 0x3f, 0x62, 0xf1, 0x21, 0x46, 0x50, 0xab, 0xba, 0x04,
	0x73, 0xba, 0xcd, 0x69, 0xd6, 0x06, 0x2c, 0x68, 0xd6, 0xb6, 0x17, 0xf3, 0x34, 0x46, 0x6f, 0x1a,
	0x1d, 0x54, 0x2a, 0x9e, 0x2f, 0x76, 0x50, 0xa3, 0x67, 0x7e, 0x6d, 0xc1, 0xec, 0xa6, 0xe7, 0xb3,
	0xfb, 0x3d, 0x3f, 0x74, 0x5c, 0x2c, 0x2a, 0xaf, 0x42, 0xa9, 0x2d, 0xaf, 0x64, 0x95, 0xd5, 0xc5,
	0x5c, 0xd5, 0x6b, 0xbb, 0x2c, 0xe0, 0x1e, 0x3f, 0xb1, 0x4b, 0x6d, 0x97, 0x10, 0x18, 0xdf, 0xf1,
	0x9e, 0x48, 0xf4, 0xc7, 0x6c, 0xfc, 0x2d, 0x03, 0x13, 0x70, 0x16, 0xf0, 0xdd, 0x93, 0x9e, 0x2e,
	0x17, 0x26, 0x0b, 0xab, 0x89, 0xe7, 0x33, 0xa3, 0x60, 0xa4, 0x34, 0x7d, 0x6a, 0xc1, 0xbc, 0x50,
	0x23, 0xdc, 0xd1, 0xaa, 0x44, 0xca, 0x29, 0xb8, 0x74, 0xca, 0x29, 0x52, 0xac, 0x28, 0x37, 0xf4,
	0x2d, 0x51, 0x91, 0xa2, 0xf0, 0xdc, 0xc5, 0xaf, 0x0d, 0x2b, 0x0c, 0x8e, 0x30, 0x42, 0x52, 0x6d,
	0x57, 0x1b, 0xa1, 0x69, 0xda, 0x84, 0x29, 0x6d, 0x83, 0x68, 0x01, 0x3e, 0xb6, 0x00, 0x6b, 0x60,
	0x0b, 0xc0, 0x35, 0xfa, 0x39, 0x4c, 0x0a, 0x52, 0x94, 0xac, 0x79, 0x18, 0xcb, 0xda, 0xab, 0xf8,
	0x49, 0xde, 0x81, 0xc9, 0xbb, 0x8f, 0x7b, 0x5e, 0xc4, 0x62, 0xac, 0x61, 0xa2, 0xd6, 0xcb, 0x6b,
	0x7a, 0x43, 0xdf, 0xe3, 0x1b, 0xbb, 0xfa, 0x1e, 0x6f, 0xeb, 0xad, 0xe2, 0x40, 0x54, 0x4d, 0xbc,
	0xff, 0xd7, 0x20, 0x88, 0xd8, 0x1a, 0x35, 0x1b, 0x7f, 0xd3, 0x7f, 0x58, 0x30, 0x2e, 0x8c, 0x7a,
	0x8e, 0xfc, 0x40, 0xcd, 0xd2, 0x2c, 0xfc, 0x2d, 0xaa, 0xd4, 0x67, 0x91, 0xab, 0x0a, 0x52, 0xd9,
	0x96, 0x84, 0x86, 0x6d, 0x3c, 0x83, 0x4d, 0xf8, 0x1b, 0x31, 0x87, 0x87, 0x91, 0x32, 0x41, 0x93,
	0xa4, 0x21, 0xf3, 0x47, 0x24, 0xaa, 0xea, 0x9e, 0x24, 0xdf, 0xca, 0xc4, 0xaa, 0x9d, 0xee, 0x11,
	0x01, 0xb8, 0xdf, 0x73, 0x1d, 0xce, 0xdc, 0x51, 0x02, 0xa0, 0xb6, 0xd2, 0x87, 0x30, 0x9d, 0x0a,
	0x13, 0x8e, 0xdc, 0x73, 0xf8, 0xa1, 0x42, 0x1e, 0x7f, 0xe7, 0xd2, 0xb8, 0x94, 0x4f, 0xe3, 0x11,
	0x0e, 0x81, 0x3e, 0x3a, 0xe3, 0xd9, 0xd1, 0xa1, 0xb7, 0xd3, 0x13, 0x3e, 0x42, 0xd4, 0x75, 0x7c,
	0x4a, 0x46, 0x7c, 0xfe, 0x5c, 0x4a, 0x53, 0x81, 0x2c, 0x1b, 0x21, 0xaa, 0x15, 0x4f, 0x7f, 0x2e,
	0x4a, 0xe9, 0x2d, 0xa7, 0x74, 0xce, 0x2d, 0x67, 0x19, 0xe6, 0x5a, 0x09, 0x0f, 0xbb, 0xf8, 0xa2,
	0xdc, 0x0d, 0x43, 0x5f, 0xde, 0xcd, 0xa7, 0xed, 0x22, 0x1b, 0x83, 0xee, 0x1c, 0xc8, 0x3b, 0x93,
	0x08, 0xba, 0x73, 0x10, 0x93, 0x8f, 0x00, 0x5a, 0x9c, 0x47, 0xde, 0x5e, 0x22, 0x2e, 0xaf, 0x65,
	0xd4, 0xb3, 0x54, 0x34, 0xaa, 0x91, 0x6d, 0xb9, 0x1b, 0xf0, 0xe8, 0xc4, 0x36, 0xbe, 0x21, 0xef,
	0x43, 0x65, 0xdb, 0x89, 0xb9, 0x0e, 0xe4, 0xc4, 0x85, 0x81, 0x34, 0xb7, 0xd7, 0x3f, 0x80, 0xb9,
	0x82, 0x70, 0x91, 0x71, 0x47, 0x4c, 0xa3, 0x2a, 0x7e, 0x8a, 0xcc, 0x3c, 0x76, 0xfc, 0x24, 0xbd,
	0x9c, 0x23, 0xb1, 0x56, 0x7a, 0xcf, 0xa2, 0x3f, 0x81, 0x4b, 0x02, 0xf6, 0x30, 0x60, 0x41, 0x16,
	0x9a, 0xd5, 0xec, 0xd8, 0x5d, 0x84, 0x72, 0x1a, 0x94, 0x41, 0x41, 0xfb, 0x91, 0x6c, 0x13, 0x28,
	0x9c, 0xac, 0x18, 0x51, 0xab, 0xe7, 0x9a, 0x45, 0x4e, 0x39, 0xc6, 0x6d, 0x09, 0x2a, 0x1b, 0x2c,
	0xee, 0x44, 0x5e, 0x4f, 0x80, 0xaf, 0x5b, 0xa0, 0xc1, 0xa2, 0x5d, 0x98, 0xdc, 0x64, 0x0e, 0x4f,
	0x22, 0x46, 0x66, 0x53, 0xc1, 0x55, 0x7d, 0x34, 0x8b, 0x96, 0xe8, 0x9e, 0xaa, 0x34, 0x61, 0xd6,
	0x56, 0x6d, 0x93, 0x25, 0x7a, 0x72, 0xea, 0x9b, 0xbe, 0xec, 0xa5, 0x0c, 0xfa, 0xaf, 0x12, 0x4c,
	0xed, 0xb2, 0x98, 0x77, 0x9c, 0x78, 0x34, 0x85, 0xb7, 0x60, 0x26, 0xcb, 0x9e, 0xec, 0x6d, 0x91,
	0x67, 0x8a, 0x9b, 0x5e, 0x3e, 0xc7, 0x94, 0xe6, 0x02, 0xb7, 0x68, 0x7e, 0xb9, 0xdf, 0xfc, 0x1a,
	0x4c, 0x6e, 0x30, 0x9f, 0xe9, 0x04, 0x9a, 0xb2, 0x35, 0x29, 0x2e, 0xf1, 0xed, 0x6e, 0x2f, 0x8c,
	0xb8, 0x13, 0x74, 0x98, 0xed, 0x88, 0x9e, 0x8c, 0xc5, 0xa2, 0x6c, 0xf7, 0xf1, 0x85, 0xd5, 0xed,
	0xc0, 0xe9, 0x70, 0xef, 0x98, 0x7d, 0x1a, 0x8a, 0x7c, 0x9e, 0xc2, 0x4c, 0xcf, 0x33, 0xf3, 0x50,
	0x4d, 0x17, 0xa0, 0x12, 0xc7, 0x69, 0x87, 0x3b, 0x7b, 0x9e, 0x2f, 0x82, 0x29, 0xd5, 0x01, 0xaa,
	0x2b, 0xb2, 0x45, 0x56, 0xee, 0x70, 0xd6, 0x8b, 0x6b, 0x15, 0xf9, 0x06, 0x47, 0x22, 0x3d, 0x64,
	0xd5, 0xec, 0x90, 0xd1, 0x26, 0x4c, 0x0b, 0xf4, 0x7b, 0xbe, 0x13, 0xc4, 0xa3, 0xc0, 0x4f, 0x9f,
	0xa9, 0x78, 0x45, 0xc9, 0x68, 0x1f, 0xe4, 0x7d, 0x1a, 0x2b, 0xfa, 0xb4, 0x00, 0xe5, 0xf5, 0xc4,
	0xf3, 0x75, 0x62, 0x48, 0x82, 0xac, 0x01, 0xd8, 0x49, 0xb0, 0xc3, 0x9d, 0x48, 0xc0, 0x5e, 0xbe,
	0xf0, 0xdc, 0x1a, 0xbb, 0xc5, 0xa1, 0xb7, 0x93, 0x60, 0xd3, 0x0b, 0x3c, 0x71, 0xa5, 0x1f, 0xe5,
	0xd0, 0x1b, 0xdb, 0x25, 0x72, 0xe2, 0x81, 0x28, 0x9f, 0x0e, 0x92, 0x10, 0x3d, 0x51, 0xa3, 0xd4,
	0xd6, 0x6f, 0x06, 0x83, 0x43, 0xbf, 0x03, 0x93, 0xad, 0x83, 0x34, 0x5d, 0x9e, 0xa3, 0xf8, 0xfe,
	0x14, 0xe6, 0xf1, 0x43, 0x35, 0x9c, 0x12, 0x22, 0xd3, 0x7d, 0x96, 0x01, 0xa2, 0x6a, 0x75, 0xa5,
	0xac, 0xd5, 0x51, 0xa8, 0x66, 0xa9, 0x9c, 0x22, 0x9b, 0xe3, 0xd1, 0xbf, 0x58, 0x50, 0x41, 0xf1,
	0xc2, 0x8b, 0x44, 0x3c, 0x98, 0xb3, 0x42, 0x91, 0x5d, 0xee, 0x94, 0xe5, 0x18, 0x40, 0x55, 0x31,
	0xef, 0x1c, 0xb2, 0xce, 0x91, 0x9a, 0xb4, 0x8c, 0x50, 0x31, 0xd5, 0x76, 0x11, 0x6a, 0x19, 0x08,
	0x9e, 0xc4, 0x3a, 0xd4, 0x29, 0x43, 0x3c, 0xed, 0xb7, 0xa2, 0x30, 0xe9, 0xe9, 0x2a, 0xaf, 0x28,
	0xf2, 0x3d, 0xa8, 0x18, 0xee, 0xab, 0x68, 0x5f, 0xcd, 0x9b, 0x67, 0x6c, 0xb0, 0xcd, 0xdd, 0xab,
	0x7f, 0x1b, 0x83, 0xf1, 0x56, 0xc2, 0x0f, 0xc9, 0x6f, 0x2c, 0xa8, 0x9a, 0xe3, 0x42, 0x92, 0x3d,
	0x55, 0x07, 0x0c, 0x30, 0xeb, 0xff, 0x37, 0x64, 0x55, 0x5e, 0x86, 0xe9, 0xd6, 0xd3, 0x3f, 0xfd,
	0xf5, 0xd7, 0xa5, 0x16, 0xb9, 0x2d, 0xc7, 0xa2, 0x09, 0x3f, 0x6c, 0x7a, 0xc6, 0xbe, 0xe6, 0xa9,
	0xf1, 0x68, 0x38, 0x6b, 0x9e, 0x1a, 0xf3, 0x2f, 0x41, 0xa5, 0xcf, 0x81, 0x33, 0x12, 0xc3, 0x2c,
	0x3e, 0xc5, 0xbe, 0xf0, 0xb8, 0xbc, 0x99, 0x93, 0x4c, 0xf3, 0xa0, 0x27, 0x62, 0xfd, 0x4a, 0xd6,
	0x49, 0xcd, 0x27, 0x1c, 0x5d, 0x41, 0x8b, 0x6e, 0x11, 0x9a, 0x59, 0xe4, 0x8b, 0x0d, 0x6f, 0x3d,
	0xf2, 0xf8, 0xe1, 0x5b, 0x5c, 0xc8, 0x69, 0x9e, 0xa2, 0xb8, 0x33, 0xf2, 0x00, 0x16, 0x52, 0xa5,
	0x77, 0x22, 0x86, 0xf5, 0xdf, 0xf1, 0x63, 0x62, 0x8c, 0xc4, 0x06, 0xbd, 0x37, 0x87, 0xea, 0xae,
	0xa3, 0xee, 0x05, 0x3a, 0x57, 0xd0, 0xbd, 0x66, 0xad, 0x10, 0x06, 0x55, 0xf3, 0xe1, 0x61, 0xc0,
	0x3e, 0xe0, 0x3d, 0x32, 0x54, 0xc3, 0x4d, 0xd4, 0x70, 0x95, 0xbc, 0x94, 0x69, 0x88, 0xe4, 0xe7,
	0xd2, 0xb5, 0xd5, 0xdf, 0x97, 0xa1, 0x8c, 0x03, 0x4d, 0xf2, 0x73, 0x20, 0x5b, 0x8c, 0x1b, 0xd3,
	0x5c, 0xbc, 0xaf, 0x5d, 0xcb, 0xfa, 0x5e, 0xdf, 0x9c, 0xb7, 0xde, 0xff, 0x80, 0xd5, 0x2e, 0x11,
	0x82, 0x0a, 0x71, 0xe8, 0xd9, 0xec, 0xc8, 0x2f, 0xc9, 0x1e, 0x54, 0xb6, 0x58, 0x26, 0xba, 0xd6,
	0xff, 0xfc, 0x1d, 0x2e, 0xf7, 0x35, 0x94, 0xbb, 0x44, 0x6e, 0x18, 0x72, 0xbd, 0x60, 0x3f, 0x6c,
	0x9e, 0x9a, 0xc3, 0x95, 0x33, 0xf2, 0x0b, 0x0b, 0xdd, 0x28, 0xcc, 0x91, 0xc9, 0xad, 0x9c, 0xc4,
	0x21, 0x13, 0xe6, 0xfa, 0xb5, 0xfc, 0xae, 0xdc, 0x8c, 0x97, 0xbe, 0x81, 0x16, 0xbc, 0x4a, 0x5e,
	0x31, 0x2c, 0xd8, 0x3b, 0x79, 0xab, 0x23, 0xe5, 0xe4, 0x33, 0x97, 0x3c, 0xcb, 0x9b, 0xa1, 0xaf,
	0x1c, 0xfd, 0x66, 0x0c, 0x98, 0x53, 0x9f, 0x6f, 0xc6, 0x77, 0xd1, 0x8c, 0xb7, 0xc9, 0xb7, 0xf2,
	0x66, 0xf4, 0xa4, 0x9c, 0xf3, 0x0e, 0x10, 0xf9, 0x12, 0x40, 0xde, 0xc1, 0x84, 0x58, 0xd2, 0x0f,
	0xf2, 0x20, 0xdc, 0x6f, 0xa1, 0xba, 0x1b, 0xf5, 0xab, 0x86, 0xba, 0x3c, 0xe4, 0x22, 0x59, 0x03,
	0x98, 0x57, 0x03, 0x83, 0xdd, 0x50, 0x43, 0xfe, 0x52, 0x76, 0x1e, 0x73, 0xb3, 0x84, 0x41, 0x5a,
	0x1a, 0xa8, 0x65, 0x99, 0x8e, 0x82, 0xed, 0x9a, 0xb5, 0xb2, 0xfa, 0xf7, 0xb1, 0xb4, 0x1b, 0x90,
	0x44, 0xe6, 0x6d, 0xe1, 0xbd, 0x7f, 0x73, 0xe8, 0xe3, 0x5e, 0x59, 0x31, 0xf4, 0xf5, 0xaf, 0x5d,
	0x26, 0xd7, 0xd1, 0x98, 0x8e, 0x1e, 0x05, 0x14, 0x22, 0xfc, 0xd4, 0x82, 0x6b, 0x5b, 0x8c, 0x0f,
	0x1d, 0x38, 0x2c, 0x67, 0xee, 0x9f, 0x3f, 0xb6, 0xa8, 0xbf, 0x7c, 0xe1, 0x4e, 0x7a, 0x05, 0x4d,
	0x9a, 0x27, 0xb3, 0x79, 0x93, 0x08, 0x87, 0x45, 0x19, 0xd1, 0xa2, 0xf6, 0xa1, 0xde, 0x9d, 0xe3,
	0xf7, 0xeb, 0xa8, 0xe4, 0xe5, 0xfa, 0xb9, 0x7e, 0x8b, 0x68, 0x3f, 0x00, 0xd2, 0x72, 0xdd, 0x17,
	0x88, 0xf8, 0x55, 0xd4, 0x7c, 0x99, 0x16, 0xdc, 0x13, 0x91, 0xfe, 0x6d, 0x29, 0x1b, 0x9f, 0x90,
	0xaf, 0xb0, 0x80, 0xa4, 0x64, 0xdf, 0x1d, 0x3f, 0xee, 0xef, 0x42, 0x83, 0x46, 0x32, 0x74, 0x11,
	0xf5, 0xcd, 0x91, 0x19, 0xd4, 0xd7, 0xd3, 0xf2, 0xf6, 0x61, 0x3e, 0x13, 0xbf, 0x2e, 0x07, 0x57,
	0x43, 0xdf, 0x11, 0xf5, 0xbe, 0x29, 0x4e, 0xa1, 0x46, 0x69, 0xb1, 0x29, 0x7e, 0x67, 0xcd, 0x53,
	0x99, 0x3a, 0x36, 0x40, 0xcb, 0x75, 0x75, 0x4d, 0x78, 0x1e, 0x0d, 0x35, 0xd4, 0x40, 0x68, 0xde,
	0x70, 0x81, 0xd3, 0x1f, 0x26, 0xd4, 0xc3, 0x91, 0x3c, 0x86, 0xa9, 0x2d, 0xc6, 0xe5, 0xef, 0xab,
	0xb9, 0xe7, 0xa3, 0x39, 0xc7, 0x31, 0x4e, 0xa1, 0x5e, 0xa2, 0x1f, 0xa2, 0xf4, 0xf7, 0xc8, 0xbb,
	0x28, 0x1d, 0xa7, 0x29, 0xa6, 0xf1, 0xca, 0x88, 0xb3, 0xe6, 0x69, 0x36, 0xb5, 0x48, 0x89, 0xb6,
	0x8b, 0xb5, 0x77, 0xb2, 0xe5, 0xba, 0x38, 0x94, 0xc8, 0x3f, 0x5c, 0x07, 0x69, 0xfb, 0x02, 0xb5,
	0x7d, 0x4e, 0xb7, 0x4d, 0x6d, 0x6d, 0xb7, 0x91, 0x29, 0x6c, 0xbb, 0x8d, 0x4c, 0x67, 0xdb, 0x6d,
	0xe4, 0xd4, 0xa6, 0x74, 0xdb, 0x95, 0x54, 0x9a, 0x9e, 0x67, 0x00, 0x36, 0xeb, 0x86, 0xc7, 0x0c,
	0x0d, 0x19, 0x3c, 0x11, 0x19, 0x64, 0xd0, 0x5d, 0x34, 0xe8, 0xf6, 0xca, 0x07, 0xff, 0x99, 0xfb,
	0x3a, 0xba, 0xbf, 0xb4, 0x74, 0x99, 0x7d, 0x3e, 0x20, 0xea, 0x2f, 0x1c, 0x88, 0xaf, 0x2d, 0x98,
	0xdd, 0x62, 0x7c, 0x23, 0x7c, 0x14, 0xf8, 0xa1, 0x83, 0x7f, 0xb7, 0x1a, 0x82, 0xc6, 0x7c, 0x8e,
	0x7d, 0x3f, 0xf2, 0xe9, 0xa7, 0x68, 0xd4, 0xc7, 0x64, 0xf3, 0xbf, 0x02, 0xa3, 0xe9, 0x2a, 0xdd,
	0xe4, 0x1b, 0x0b, 0xaa, 0xa2, 0x21, 0xf6, 0xb4, 0x25, 0x59, 0x7b, 0xc8, 0x8f, 0x3b, 0x07, 0xd8,
	0xf2, 0x33, 0xb4, 0xe5, 0x4b, 0xba, 0xf3, 0x22, 0x01, 0x6a, 0x26, 0xa8, 0x52, 0x9c, 0x9d, 0x27,
	0x30, 0x81, 0x97, 0xe1, 0x98, 0xf4, 0xa0, 0x2a, 0x43, 0xa7, 0xae, 0xd6, 0x0b, 0xf9, 0xdb, 0xb2,
	0xe4, 0xd6, 0x07, 0x72, 0xe9, 0x3b, 0x68, 0x65, 0x83, 0xfe, 0xbf, 0xbc, 0x6a, 0xa1, 0xc0, 0x7e,
	0x33, 0xa5, 0xee, 0x18, 0x3f, 0x11, 0xba, 0x0f, 0xd3, 0x09, 0x3e, 0xf9, 0x0a, 0xa3, 0xb5, 0x99,
	0xf8, 0xbe, 0xe6, 0x64, 0x18, 0xe5, 0xff, 0x1c, 0x50, 0xbf, 0x5e, 0x5c, 0x30, 0xff, 0x2a, 0x40,
	0x17, 0xd0, 0x92, 0x59, 0x52, 0x45, 0x4b, 0x8e, 0xe5, 0x8e, 0xf5, 0x0d, 0xb8, 0xd6, 0x09, 0xbb,
	0xe9, 0x87, 0x1d, 0xdf, 0x63, 0x01, 0x4f, 0x9f, 0x1e, 0x3f, 0xd6, 0xff, 0xd8, 0xf0, 0xbb, 0xd2,
	0x79, 0xdb, 0xf6, 0x26, 0xf0, 0xd7, 0xdb, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x90, 0xc3, 0x7c,
	0x83, 0x15, 0x21, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	IsAuthorized(ctx context.Context, in *IsAuthorizedRequest, opts ...grpc.CallOption) (*IsAuthorizedResponse, error)
	LoginWithToken(ctx context.Context, in *ApiTokenLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	LoginWithCredentials(ctx context.Context, in *PlainUserLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) IsAuthorized(ctx context.Context, in *IsAuthorizedRequest, opts ...grpc.CallOption) (*IsAuthorizedResponse, error) {
	out := new(IsAuthorizedResponse)
	err := c.cc.Invoke(ctx, "/slickqa.Auth/IsAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LoginWithToken(ctx context.Context, in *ApiTokenLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/slickqa.Auth/LoginWithToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LoginWithCredentials(ctx context.Context, in *PlainUserLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/slickqa.Auth/LoginWithCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/slickqa.Auth/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	IsAuthorized(context.Context, *IsAuthorizedRequest) (*IsAuthorizedResponse, error)
	LoginWithToken(context.Context, *ApiTokenLoginRequest) (*LoginResponse, error)
	LoginWithCredentials(context.Context, *PlainUserLoginRequest) (*LoginResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*LoginResponse, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_IsAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAuthorizedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).IsAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Auth/IsAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).IsAuthorized(ctx, req.(*IsAuthorizedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LoginWithToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiTokenLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginWithToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Auth/LoginWithToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginWithToken(ctx, req.(*ApiTokenLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LoginWithCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlainUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginWithCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Auth/LoginWithCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginWithCredentials(ctx, req.(*PlainUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Auth/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAuthorized",
			Handler:    _Auth_IsAuthorized_Handler,
		},
		{
			MethodName: "LoginWithToken",
			Handler:    _Auth_LoginWithToken_Handler,
		},
		{
			MethodName: "LoginWithCredentials",
			Handler:    _Auth_LoginWithCredentials_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Auth_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsersClient interface {
	GetCurrentUserInfo(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*UserInfo, error)
	GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfo, error)
	GetUsersForCompany(ctx context.Context, in *UsersForCompanyQueryRequest, opts ...grpc.CallOption) (*UsersQueryResponse, error)
	GetUsersForProject(ctx context.Context, in *UsersForProjectQueryRequest, opts ...grpc.CallOption) (*UsersQueryResponse, error)
	UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserInfo, error)
	AddUserToCompany(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*UserInfo, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) GetCurrentUserInfo(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/slickqa.Users/GetCurrentUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/slickqa.Users/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUsersForCompany(ctx context.Context, in *UsersForCompanyQueryRequest, opts ...grpc.CallOption) (*UsersQueryResponse, error) {
	out := new(UsersQueryResponse)
	err := c.cc.Invoke(ctx, "/slickqa.Users/GetUsersForCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUsersForProject(ctx context.Context, in *UsersForProjectQueryRequest, opts ...grpc.CallOption) (*UsersQueryResponse, error) {
	out := new(UsersQueryResponse)
	err := c.cc.Invoke(ctx, "/slickqa.Users/GetUsersForProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/slickqa.Users/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) AddUserToCompany(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/slickqa.Users/AddUserToCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
type UsersServer interface {
	GetCurrentUserInfo(context.Context, *CurrentUserRequest) (*UserInfo, error)
	GetUserInfo(context.Context, *UserInfoRequest) (*UserInfo, error)
	GetUsersForCompany(context.Context, *UsersForCompanyQueryRequest) (*UsersQueryResponse, error)
	GetUsersForProject(context.Context, *UsersForProjectQueryRequest) (*UsersQueryResponse, error)
	UpdateUser(context.Context, *UserInfo) (*UserInfo, error)
	AddUserToCompany(context.Context, *AddUserRequest) (*UserInfo, error)
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_GetCurrentUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetCurrentUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/GetCurrentUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetCurrentUserInfo(ctx, req.(*CurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUsersForCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersForCompanyQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsersForCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/GetUsersForCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsersForCompany(ctx, req.(*UsersForCompanyQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUsersForProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersForProjectQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsersForProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/GetUsersForProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsersForProject(ctx, req.(*UsersForProjectQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_AddUserToCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).AddUserToCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Users/AddUserToCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).AddUserToCompany(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentUserInfo",
			Handler:    _Users_GetCurrentUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Users_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUsersForCompany",
			Handler:    _Users_GetUsersForCompany_Handler,
		},
		{
			MethodName: "GetUsersForProject",
			Handler:    _Users_GetUsersForProject_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Users_UpdateUser_Handler,
		},
		{
			MethodName: "AddUserToCompany",
			Handler:    _Users_AddUserToCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

// CompanyClient is the client API for Company service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompanyClient interface {
	GetCompanySettings(ctx context.Context, in *CompanySettingsRequest, opts ...grpc.CallOption) (*CompanySettings, error)
	GetAvailableCompanySettings(ctx context.Context, in *AvailableCompanySettingsRequest, opts ...grpc.CallOption) (*AvailableCompanySettings, error)
	UpdateCompanySettings(ctx context.Context, in *CompanySettings, opts ...grpc.CallOption) (*CompanySettings, error)
	AddCompanySettings(ctx context.Context, in *CompanySettingsRequest, opts ...grpc.CallOption) (*CompanySettings, error)
}

type companyClient struct {
	cc *grpc.ClientConn
}

func NewCompanyClient(cc *grpc.ClientConn) CompanyClient {
	return &companyClient{cc}
}

func (c *companyClient) GetCompanySettings(ctx context.Context, in *CompanySettingsRequest, opts ...grpc.CallOption) (*CompanySettings, error) {
	out := new(CompanySettings)
	err := c.cc.Invoke(ctx, "/slickqa.Company/GetCompanySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetAvailableCompanySettings(ctx context.Context, in *AvailableCompanySettingsRequest, opts ...grpc.CallOption) (*AvailableCompanySettings, error) {
	out := new(AvailableCompanySettings)
	err := c.cc.Invoke(ctx, "/slickqa.Company/GetAvailableCompanySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) UpdateCompanySettings(ctx context.Context, in *CompanySettings, opts ...grpc.CallOption) (*CompanySettings, error) {
	out := new(CompanySettings)
	err := c.cc.Invoke(ctx, "/slickqa.Company/UpdateCompanySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) AddCompanySettings(ctx context.Context, in *CompanySettingsRequest, opts ...grpc.CallOption) (*CompanySettings, error) {
	out := new(CompanySettings)
	err := c.cc.Invoke(ctx, "/slickqa.Company/AddCompanySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServer is the server API for Company service.
type CompanyServer interface {
	GetCompanySettings(context.Context, *CompanySettingsRequest) (*CompanySettings, error)
	GetAvailableCompanySettings(context.Context, *AvailableCompanySettingsRequest) (*AvailableCompanySettings, error)
	UpdateCompanySettings(context.Context, *CompanySettings) (*CompanySettings, error)
	AddCompanySettings(context.Context, *CompanySettingsRequest) (*CompanySettings, error)
}

func RegisterCompanyServer(s *grpc.Server, srv CompanyServer) {
	s.RegisterService(&_Company_serviceDesc, srv)
}

func _Company_GetCompanySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetCompanySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Company/GetCompanySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetCompanySettings(ctx, req.(*CompanySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetAvailableCompanySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableCompanySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetAvailableCompanySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Company/GetAvailableCompanySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetAvailableCompanySettings(ctx, req.(*AvailableCompanySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_UpdateCompanySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).UpdateCompanySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Company/UpdateCompanySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).UpdateCompanySettings(ctx, req.(*CompanySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_AddCompanySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).AddCompanySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Company/AddCompanySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).AddCompanySettings(ctx, req.(*CompanySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Company_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Company",
	HandlerType: (*CompanyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompanySettings",
			Handler:    _Company_GetCompanySettings_Handler,
		},
		{
			MethodName: "GetAvailableCompanySettings",
			Handler:    _Company_GetAvailableCompanySettings_Handler,
		},
		{
			MethodName: "UpdateCompanySettings",
			Handler:    _Company_UpdateCompanySettings_Handler,
		},
		{
			MethodName: "AddCompanySettings",
			Handler:    _Company_AddCompanySettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

// ProjectsClient is the client API for Projects service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectsClient interface {
	GetProjects(ctx context.Context, in *ProjectsRequest, opts ...grpc.CallOption) (*ProjectsListResponse, error)
	GetProjectByName(ctx context.Context, in *ProjectIdentity, opts ...grpc.CallOption) (*Project, error)
	AddProject(ctx context.Context, in *ProjectIdentity, opts ...grpc.CallOption) (*Project, error)
}

type projectsClient struct {
	cc *grpc.ClientConn
}

func NewProjectsClient(cc *grpc.ClientConn) ProjectsClient {
	return &projectsClient{cc}
}

func (c *projectsClient) GetProjects(ctx context.Context, in *ProjectsRequest, opts ...grpc.CallOption) (*ProjectsListResponse, error) {
	out := new(ProjectsListResponse)
	err := c.cc.Invoke(ctx, "/slickqa.Projects/GetProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) GetProjectByName(ctx context.Context, in *ProjectIdentity, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/slickqa.Projects/GetProjectByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) AddProject(ctx context.Context, in *ProjectIdentity, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/slickqa.Projects/AddProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsServer is the server API for Projects service.
type ProjectsServer interface {
	GetProjects(context.Context, *ProjectsRequest) (*ProjectsListResponse, error)
	GetProjectByName(context.Context, *ProjectIdentity) (*Project, error)
	AddProject(context.Context, *ProjectIdentity) (*Project, error)
}

func RegisterProjectsServer(s *grpc.Server, srv ProjectsServer) {
	s.RegisterService(&_Projects_serviceDesc, srv)
}

func _Projects_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Projects/GetProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).GetProjects(ctx, req.(*ProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_GetProjectByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).GetProjectByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Projects/GetProjectByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).GetProjectByName(ctx, req.(*ProjectIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_AddProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).AddProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Projects/AddProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).AddProject(ctx, req.(*ProjectIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

var _Projects_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Projects",
	HandlerType: (*ProjectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjects",
			Handler:    _Projects_GetProjects_Handler,
		},
		{
			MethodName: "GetProjectByName",
			Handler:    _Projects_GetProjectByName_Handler,
		},
		{
			MethodName: "AddProject",
			Handler:    _Projects_AddProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

// LinksClient is the client API for Links service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LinksClient interface {
	GetLinks(ctx context.Context, in *LinkListIdentity, opts ...grpc.CallOption) (*LinkList, error)
	AddLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*LinkList, error)
	RemoveLink(ctx context.Context, in *LinkIdentity, opts ...grpc.CallOption) (*LinkList, error)
	UpdateLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*LinkList, error)
	GetDownloadUrl(ctx context.Context, in *LinkIdentity, opts ...grpc.CallOption) (*LinkUrl, error)
	GetUploadUrl(ctx context.Context, in *FileUploadInfo, opts ...grpc.CallOption) (*LinkUrl, error)
}

type linksClient struct {
	cc *grpc.ClientConn
}

func NewLinksClient(cc *grpc.ClientConn) LinksClient {
	return &linksClient{cc}
}

func (c *linksClient) GetLinks(ctx context.Context, in *LinkListIdentity, opts ...grpc.CallOption) (*LinkList, error) {
	out := new(LinkList)
	err := c.cc.Invoke(ctx, "/slickqa.Links/GetLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) AddLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*LinkList, error) {
	out := new(LinkList)
	err := c.cc.Invoke(ctx, "/slickqa.Links/AddLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) RemoveLink(ctx context.Context, in *LinkIdentity, opts ...grpc.CallOption) (*LinkList, error) {
	out := new(LinkList)
	err := c.cc.Invoke(ctx, "/slickqa.Links/RemoveLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) UpdateLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*LinkList, error) {
	out := new(LinkList)
	err := c.cc.Invoke(ctx, "/slickqa.Links/UpdateLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) GetDownloadUrl(ctx context.Context, in *LinkIdentity, opts ...grpc.CallOption) (*LinkUrl, error) {
	out := new(LinkUrl)
	err := c.cc.Invoke(ctx, "/slickqa.Links/GetDownloadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) GetUploadUrl(ctx context.Context, in *FileUploadInfo, opts ...grpc.CallOption) (*LinkUrl, error) {
	out := new(LinkUrl)
	err := c.cc.Invoke(ctx, "/slickqa.Links/GetUploadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinksServer is the server API for Links service.
type LinksServer interface {
	GetLinks(context.Context, *LinkListIdentity) (*LinkList, error)
	AddLink(context.Context, *Link) (*LinkList, error)
	RemoveLink(context.Context, *LinkIdentity) (*LinkList, error)
	UpdateLink(context.Context, *Link) (*LinkList, error)
	GetDownloadUrl(context.Context, *LinkIdentity) (*LinkUrl, error)
	GetUploadUrl(context.Context, *FileUploadInfo) (*LinkUrl, error)
}

func RegisterLinksServer(s *grpc.Server, srv LinksServer) {
	s.RegisterService(&_Links_serviceDesc, srv)
}

func _Links_GetLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkListIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).GetLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Links/GetLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).GetLinks(ctx, req.(*LinkListIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_AddLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).AddLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Links/AddLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).AddLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_RemoveLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).RemoveLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Links/RemoveLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).RemoveLink(ctx, req.(*LinkIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_UpdateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).UpdateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Links/UpdateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).UpdateLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_GetDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).GetDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Links/GetDownloadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).GetDownloadUrl(ctx, req.(*LinkIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_GetUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).GetUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Links/GetUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).GetUploadUrl(ctx, req.(*FileUploadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Links_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Links",
	HandlerType: (*LinksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLinks",
			Handler:    _Links_GetLinks_Handler,
		},
		{
			MethodName: "AddLink",
			Handler:    _Links_AddLink_Handler,
		},
		{
			MethodName: "RemoveLink",
			Handler:    _Links_RemoveLink_Handler,
		},
		{
			MethodName: "UpdateLink",
			Handler:    _Links_UpdateLink_Handler,
		},
		{
			MethodName: "GetDownloadUrl",
			Handler:    _Links_GetDownloadUrl_Handler,
		},
		{
			MethodName: "GetUploadUrl",
			Handler:    _Links_GetUploadUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

// AgentsClient is the client API for Agents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentsClient interface {
	UpdateStatus(ctx context.Context, in *AgentStatus, opts ...grpc.CallOption) (*AgentStatus, error)
}

type agentsClient struct {
	cc *grpc.ClientConn
}

func NewAgentsClient(cc *grpc.ClientConn) AgentsClient {
	return &agentsClient{cc}
}

func (c *agentsClient) UpdateStatus(ctx context.Context, in *AgentStatus, opts ...grpc.CallOption) (*AgentStatus, error) {
	out := new(AgentStatus)
	err := c.cc.Invoke(ctx, "/slickqa.Agents/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentsServer is the server API for Agents service.
type AgentsServer interface {
	UpdateStatus(context.Context, *AgentStatus) (*AgentStatus, error)
}

func RegisterAgentsServer(s *grpc.Server, srv AgentsServer) {
	s.RegisterService(&_Agents_serviceDesc, srv)
}

func _Agents_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentsServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Agents/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentsServer).UpdateStatus(ctx, req.(*AgentStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agents_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Agents",
	HandlerType: (*AgentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateStatus",
			Handler:    _Agents_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

// VersionClient is the client API for Version service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VersionClient interface {
	GetFullVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionInfoResponse, error)
}

type versionClient struct {
	cc *grpc.ClientConn
}

func NewVersionClient(cc *grpc.ClientConn) VersionClient {
	return &versionClient{cc}
}

func (c *versionClient) GetFullVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionInfoResponse, error) {
	out := new(VersionInfoResponse)
	err := c.cc.Invoke(ctx, "/slickqa.Version/GetFullVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionServer is the server API for Version service.
type VersionServer interface {
	GetFullVersion(context.Context, *VersionRequest) (*VersionInfoResponse, error)
}

func RegisterVersionServer(s *grpc.Server, srv VersionServer) {
	s.RegisterService(&_Version_serviceDesc, srv)
}

func _Version_GetFullVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServer).GetFullVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slickqa.Version/GetFullVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServer).GetFullVersion(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Version_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slickqa.Version",
	HandlerType: (*VersionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFullVersion",
			Handler:    _Version_GetFullVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slick.proto",
}

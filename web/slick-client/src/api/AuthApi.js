/**
 * slick.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

    const ApiClient = require('../ApiClient'),
     SlickqaIsAuthorizedResponse = require('../model/SlickqaIsAuthorizedResponse'),
     SlickqaLoginResponse = require('../model/SlickqaLoginResponse'),
     SlickqaPlainUserLoginRequest = require('../model/SlickqaPlainUserLoginRequest');

  /**
   * Auth service.
   * @module api/AuthApi
   * @version 0.1.0
   */

  /**
   * Constructs a new AuthApi. 
   * @alias module:api/AuthApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the isAuthorized operation.
     * @callback module:api/AuthApi~isAuthorizedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlickqaIsAuthorizedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyName 
     * @param {String} projectName 
     * @param {Number} permission 
     * @param {module:api/AuthApi~isAuthorizedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlickqaIsAuthorizedResponse}
     */
    this.isAuthorized = function(companyName, projectName, permission, callback) {
      var postBody = null;

      // verify the required parameter 'companyName' is set
      if (companyName == undefined || companyName == null) {
        throw new Error("Missing the required parameter 'companyName' when calling isAuthorized");
      }

      // verify the required parameter 'projectName' is set
      if (projectName == undefined || projectName == null) {
        throw new Error("Missing the required parameter 'projectName' when calling isAuthorized");
      }

      // verify the required parameter 'permission' is set
      if (permission == undefined || permission == null) {
        throw new Error("Missing the required parameter 'permission' when calling isAuthorized");
      }


      var pathParams = {
        'CompanyName': companyName,
        'ProjectName': projectName,
        'Permission': permission
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SlickqaIsAuthorizedResponse;

      return this.apiClient.callApi(
        '/api/auth/isAuthorized/{CompanyName}/{ProjectName}/{Permission}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginWithCredentials operation.
     * @callback module:api/AuthApi~loginWithCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlickqaLoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SlickqaPlainUserLoginRequest} body 
     * @param {module:api/AuthApi~loginWithCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlickqaLoginResponse}
     */
    this.loginWithCredentials = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling loginWithCredentials");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SlickqaLoginResponse;

      return this.apiClient.callApi(
        '/api/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginWithToken operation.
     * @callback module:api/AuthApi~loginWithTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlickqaLoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} token 
     * @param {module:api/AuthApi~loginWithTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlickqaLoginResponse}
     */
    this.loginWithToken = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling loginWithToken");
      }


      var pathParams = {
        'Token': token
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SlickqaLoginResponse;

      return this.apiClient.callApi(
        '/api/auth/login-with-token/{Token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  module.exports = exports;
